[ { "title": "Diagrams", "url": "/posts/diagrams/", "categories": "template", "tags": "template, myblog", "date": "2023-06-20 00:00:00 +0000", "snippet": "在线代码生成图swimlanes.io seqdiagdatabasediagram" }, { "title": "Dubbo线程池问题汇总", "url": "/posts/dubbo_threadpool/", "categories": "dubbo", "tags": "dubbo", "date": "2023-05-06 00:00:00 +0000", "snippet": " 每个连接一个线程池ip+port,多个连接还要*connection1.【2013-Need a limited Threadpool in consumer side】,优化方案在这里R【educe context switching cost by optimizing thread model on consumer side】consumer端，每个连接一个线程池 2.i【ssues4467-why does dubbo creates a new ThreadPool for each connection】 端口共享线程池 1.dubbo线程池按照端口分配后仍然有不少问题，比如这个7054碰到有节点下线会不断关闭与重建线程池，修复PR-7109" }, { "title": "Hudi Compact 流程", "url": "/posts/hudi_compact/", "categories": "hudi", "tags": "Java, hudi, tools", "date": "2022-10-21 00:00:00 +0000", "snippet": "hudi spark/flink Compact流程图" }, { "title": "Hudi upsert 流程", "url": "/posts/hudi_upsert/", "categories": "hudi", "tags": "Java, hudi, tools", "date": "2022-10-17 00:00:00 +0000", "snippet": "Upsert流程图" }, { "title": "CompletableFuture与ForkJoinPool", "url": "/posts/CF_forkjoin/", "categories": "Java", "tags": "Java, File, tools，OOM", "date": "2022-10-14 00:00:00 +0000", "snippet": "CompletableFutureCompletableFuture常用方法//thenApplypublic &lt;U&gt; CompletableFuture&lt;U&gt; thenApply( Function&lt;? super T,? extends U&gt; fn) { return uniApplyStage(null, fn);}//thenApplyAsyncpublic &lt;U&gt; CompletableFuture&lt;U&gt; thenApplyAsync( Function&lt;? super T,? extends U&gt; fn) { return uniApplyStage(asyncPool, fn);}//thenComposepublic &lt;U&gt; CompletableFuture&lt;U&gt; thenCompose( Function&lt;? super T, ? extends CompletionStage&lt;U&gt;&gt; fn) { return uniComposeStage(null, fn);}//thenComposeAsyncpublic &lt;U&gt; CompletableFuture&lt;U&gt; thenComposeAsync( Function&lt;? super T, ? extends CompletionStage&lt;U&gt;&gt; fn) { return uniComposeStage(asyncPool, fn);}//supplyAsyncpublic static &lt;U&gt; CompletableFuture&lt;U&gt; supplyAsync(Supplier&lt;U&gt; supplier, Executor executor) { return asyncSupplyStage(screenExecutor(executor), supplier);}//runAsyncpublic static CompletableFuture&lt;Void&gt; runAsync(Runnable runnable) { return asyncRunStage(asyncPool, runnable);}以CompletableFuture.thenApplyAsync为例大致流程get相关方法public T get() throws InterruptedException, ExecutionException { Object r; ////result为null,继续等待结果 return reportGet((r = result) == null ? waitingGet(true) : r);}waitingGet()方法1，首先进行自旋private Object waitingGet(boolean interruptible) { Signaller q = null; boolean queued = false; int spins = -1; Object r; while ((r = result) == null) { //spins &lt; 0开始进入自旋 if (spins &lt; 0) spins = (Runtime.getRuntime().availableProcessors() &gt; 1) ? 1 &lt;&lt; 8 : 0; // Use brief spin-wait on multiprocessors else if (spins &gt; 0) {、 //随机数，并不是每次都一样 if (ThreadLocalRandom.nextSecondarySeed() &gt;= 0) --spins; } //到这里说明自旋次数spins==0 else if (q == null)//还没有生成Signaller， q = new Signaller(interruptible, 0L, 0L); else if (!queued)//将Signaller入栈 queued = tryPushStack(q); else if (interruptible &amp;&amp; q.interruptControl &lt; 0) {//interruptible是否允许中断，且已经中断，直接返回null q.thread = null; cleanStack();//清理stack,依赖的stage return null; } else if (q.thread != null &amp;&amp; result == null) { try { ForkJoinPool.managedBlock(q);//进行阻塞，通过LockSupport.park阻塞 } catch (InterruptedException ie) { q.interruptControl = -1; } } } //阻塞已经唤醒，有可能是中断，需要处理下中断 if (q != null) { q.thread = null; if (q.interruptControl &lt; 0) {//interruptControl &lt; 0表示已经中断了 if (interruptible) r = null; // report interruption else Thread.currentThread().interrupt(); } } //非中断，正常唤醒 postComplete(); return r;}ForkJoinPool.managedBlock阻塞内部调用Signaller的block进行阻塞，看起来主要是调用LockSupport进行阻塞public boolean block() { if (isReleasable()) return true; else if (deadline == 0L) LockSupport.park(this); else if (nanos &gt; 0L) LockSupport.parkNanos(this, nanos); return isReleasable();}final boolean isLive() { return thread != null; }}Signaller唤醒既然阻塞是通过LockSupport.park，那么唤醒理应是LockSupport.unpark，这个在Signaller的tryFire内部final CompletableFuture&lt;?&gt; tryFire(int ignore) { Thread w; // no need to atomically claim if ((w = thread) != null) { thread = null; LockSupport.unpark(w); } return null;}再看下的定义static final class Signaller extends Completion implements ForkJoinPool.ManagedBlocker { long nanos; // wait time if timed final long deadline; // non-zero if timed volatile int interruptControl; // &gt; 0: interruptible, &lt; 0: interrupted volatile Thread thread; Signaller(boolean interruptible, long nanos, long deadline) { this.thread = Thread.currentThread();//当前线程 this.interruptControl = interruptible ? 1 : 0;//支持中断默认值为1 this.nanos = nanos; this.deadline = deadline; } final CompletableFuture&lt;?&gt; tryFire(int ignore) { Thread w; // no need to atomically claim if ((w = thread) != null) { thread = null; LockSupport.unpark(w);//唤醒当前线程 } return null; } public boolean isReleasable() { if (thread == null) return true; if (Thread.interrupted()) { int i = interruptControl; interruptControl = -1; if (i &gt; 0) return true; } if (deadline != 0L &amp;&amp; (nanos &lt;= 0L || (nanos = deadline - System.nanoTime()) &lt;= 0L)) { thread = null; return true; } return false; } public boolean block() { if (isReleasable()) return true; else if (deadline == 0L) LockSupport.park(this); else if (nanos &gt; 0L) LockSupport.parkNanos(this, nanos); return isReleasable(); } final boolean isLive() { return thread != null; }} Signaller继承了CompletionCompletion继承了ForkJoinTask，实现Runnableabstract static class Completion extends ForkJoinTask&lt;Void&gt; implements Runnable, AsynchronousCompletionTask { volatile Completion next; // Treiber stack link /** * Performs completion action if triggered, returning a * dependent that may need propagation, if one exists. * * @param mode SYNC, ASYNC, or NESTED */ abstract CompletableFuture&lt;?&gt; tryFire(int mode); /** Returns true if possibly still triggerable. Used by cleanStack. */ abstract boolean isLive(); public final void run() { tryFire(ASYNC); }//Runnable触发tryFire public final boolean exec() { tryFire(ASYNC); return true; }//由ForkJoinTask调用 public final Void getRawResult() { return null; } public final void setRawResult(Void v) {}}" }, { "title": "ESA Restlight​高性能 Web 服务框架", "url": "/posts/esa_restlight/", "categories": "Java", "tags": "Java, File, tools，OOM", "date": "2022-10-11 00:00:00 +0000", "snippet": "ESA Restlight​高性能 Web 服务框架ESA Stack(Elastic Service Architecture) 是OPPO云计算中心孵化的技术品牌，致力于微服务相关技术栈，帮助用户快速构建高性能，高可用的云原生微服务。产品包含高性能Web服务框架、RPC框架、服务治理框架、注册中心、配置中心、调用链追踪系统，Service Mesh、Serverless等各类产品及研究方向。ESA Restlight开源项目地址ESA Restlight流程图(部分)" }, { "title": "Etcd MVCC", "url": "/posts/etcd_mvcc/", "categories": "distributed", "tags": "etcd", "date": "2022-09-27 00:00:00 +0000", "snippet": "写入流程 //etcdserver/apply.gofunc (a *applierV3backend) Put(ctx context.Context, txn mvcc.TxnWrite, p *pb.PutRequest) (resp *pb.PutResponse, trace *traceutil.Trace, err error) {\tresp = &amp;pb.PutResponse{}\tresp.Header = &amp;pb.ResponseHeader{}\ttrace = traceutil.Get(ctx)\t// create put tracing if the trace in context is empty\tif trace.IsEmpty() {\t\ttrace = traceutil.New(\"put\",\t\t\ta.s.getLogger(),\t\t\ttraceutil.Field{Key: \"key\", Value: string(p.Key)},\t\t\ttraceutil.Field{Key: \"req_size\", Value: proto.Size(p)},\t\t)\t}\tval, leaseID := p.Value, lease.LeaseID(p.Lease)\tif txn == nil {\t\tif leaseID != lease.NoLease {\t\t\tif l := a.s.lessor.Lookup(leaseID); l == nil {\t\t\t\treturn nil, nil, lease.ErrLeaseNotFound\t\t\t}\t\t} //获得一个\t\ttxn = a.s.KV().Write(trace) //End内部如果是写,会判断是否需要commit\t\tdefer txn.End()\t}\tvar rr *mvcc.RangeResult\tif p.IgnoreValue || p.IgnoreLease || p.PrevKv {\t\ttrace.StepWithFunction(func() {\t\t\trr, err = txn.Range(context.TODO(), p.Key, nil, mvcc.RangeOptions{})\t\t}, \"get previous kv pair\")\t\tif err != nil {\t\t\treturn nil, nil, err\t\t}\t}\tif p.IgnoreValue || p.IgnoreLease {\t\tif rr == nil || len(rr.KVs) == 0 {\t\t\t// ignore_{lease,value} flag expects previous key-value pair\t\t\treturn nil, nil, ErrKeyNotFound\t\t}\t}\tif p.IgnoreValue {\t\tval = rr.KVs[0].Value\t}\tif p.IgnoreLease {\t\tleaseID = lease.LeaseID(rr.KVs[0].Lease)\t}\tif p.PrevKv {\t\tif rr != nil &amp;&amp; len(rr.KVs) != 0 {\t\t\tresp.PrevKv = &amp;rr.KVs[0]\t\t}\t}\tresp.Header.Revision = txn.Put(p.Key, val, leaseID)\ttrace.AddField(traceutil.Field{Key: \"response_revision\", Value: resp.Header.Revision})\treturn resp, trace, nil}a.s.KV().Write(trace)的实现有两个 //mvcc/kvstore_tx.go func (s *store) Write(trace *traceutil.Trace) TxnWrite {\ts.mu.RLock()\ttx := s.b.BatchTx()\ttx.Lock()\ttw := &amp;storeTxnWrite{\t\tstoreTxnRead: storeTxnRead{s, tx, 0, 0, trace},\t\ttx: tx,\t\tbeginRev: s.currentRev,\t\tchanges: make([]mvccpb.KeyValue, 0, 4),\t}\treturn newMetricsTxnWrite(tw)}//mvcc/watchable_store_txn.gotype watchableStoreTxnWrite struct {\tTxnWrite\ts *watchableStore}func (s *watchableStore) Write(trace *traceutil.Trace) TxnWrite {\treturn &amp;watchableStoreTxnWrite{s.store.Write(trace), s}}再来看下End()//mvcc/kvstore_txn.gofunc (tw *storeTxnWrite) End() {\t// only update index if the txn modifies the mvcc state.\tif len(tw.changes) != 0 {\t\ttw.s.saveIndex(tw.tx)\t\t// hold revMu lock to prevent new read txns from opening until writeback.\t\ttw.s.revMu.Lock()\t\ttw.s.currentRev++\t}\t//调用写事务BatchTx的Unlock,这里需要注意：Unlock原本是ReadTx定义的接口，但是嵌套在BatchTx\ttw.tx.Unlock()\tif len(tw.changes) != 0 {\t\ttw.s.revMu.Unlock()\t}\ttw.s.mu.RUnlock()}//mvcc/backend/batch_tx.gofunc (t *batchTxBuffered) Unlock() {\tif t.pending != 0 {\t\tt.backend.readTx.Lock() // blocks txReadBuffer for writing.\t\tt.buf.writeback(&amp;t.backend.readTx.buf)\t\tt.backend.readTx.Unlock()\t\tif t.pending &gt;= t.backend.batchLimit {\t\t\tt.commit(false)\t\t}\t}\tt.batchTx.Unlock()}//func (t *batchTx) Unlock() { //判断是否达到事务提交阈值\tif t.pending &gt;= t.backend.batchLimit {\t\tt.commit(false)\t}\tt.Mutex.Unlock()}在创建backend的时候会创建负责执行读写事务的初始化readTx,batchTx func newBackend(bcfg BackendConfig) *backend {\tif bcfg.Logger == nil {\t\tbcfg.Logger = zap.NewNop()\t}\tbopts := &amp;bolt.Options{}\tif boltOpenOptions != nil {\t\t*bopts = *boltOpenOptions\t}\tbopts.InitialMmapSize = bcfg.mmapSize()\tbopts.FreelistType = bcfg.BackendFreelistType\tbopts.NoSync = bcfg.UnsafeNoFsync\tbopts.NoGrowSync = bcfg.UnsafeNoFsync\t//打开bolt db\tdb, err := bolt.Open(bcfg.Path, 0600, bopts)\tif err != nil {\t\tbcfg.Logger.Panic(\"failed to open database\", zap.String(\"path\", bcfg.Path), zap.Error(err))\t}\t// In future, may want to make buffering optional for low-concurrency systems\t// or dynamically swap between buffered/non-buffered depending on workload.\tb := &amp;backend{\t\tdb: db,\t\tbatchInterval: bcfg.BatchInterval,\t\tbatchLimit: bcfg.BatchLimit,\t\t//初始化readTx,执行读事务操作\t\treadTx: &amp;readTx{\t\t\tbaseReadTx: baseReadTx{\t\t\t\tbuf: txReadBuffer{\t\t\t\t\ttxBuffer: txBuffer{make(map[string]*bucketBuffer)},\t\t\t\t},\t\t\t\tbuckets: make(map[string]*bolt.Bucket),\t\t\t\ttxWg: new(sync.WaitGroup),\t\t\t\ttxMu: new(sync.RWMutex),\t\t\t},\t\t},\t\tstopc: make(chan struct{}),\t\tdonec: make(chan struct{}),\t\tlg: bcfg.Logger,\t}\t//初始化batchTx,执行写事务操作;这里会执行一次commit操作\tb.batchTx = newBatchTxBuffered(b)\t//启动goroutine,异步执行commit操作\tgo b.run()\treturn b}//mvcc/backend/batch_tx.go batchTxBuffered持有batchTxfunc newBatchTxBuffered(backend *backend) *batchTxBuffered {\ttx := &amp;batchTxBuffered{\t\tbatchTx: batchTx{backend: backend},\t\tbuf: txWriteBuffer{\t\t\ttxBuffer: txBuffer{make(map[string]*bucketBuffer)},\t\t\tseq: true,\t\t},\t}\ttx.Commit()\treturn tx}ReadTx和BatchTx定义，其中BatchTx内部又嵌套了ReadTx type ReadTx interface {\tLock()\tUnlock()\tRLock()\tRUnlock()\tUnsafeRange(bucketName []byte, key, endKey []byte, limit int64) (keys [][]byte, vals [][]byte)\tUnsafeForEach(bucketName []byte, visitor func(k, v []byte) error) error}type BatchTx interface {\tReadTx\tUnsafeCreateBucket(name []byte)\tUnsafePut(bucketName []byte, key []byte, value []byte)\tUnsafeSeqPut(bucketName []byte, key []byte, value []byte)\tUnsafeDelete(bucketName []byte, key []byte)\t// Commit commits a previous tx and begins a new writable one.\tCommit()\t// CommitAndStop commits the previous tx and does not create a new one.\tCommitAndStop()}readTx被baseReadTx持有,batchTxBuffered持有batchTx type readTx struct {\tbaseReadTx}type batchTxBuffered struct {\tbatchTx\tbuf txWriteBuffer}数据持久化 " }, { "title": "github action自动将drawio转图片", "url": "/posts/docker_local_act/", "categories": "code-server", "tags": "https, code-server", "date": "2022-09-22 00:00:00 +0000", "snippet": "可以将在https://app.diagrams.net/画的图的原始.drawio文件保存到github仓库, 通过配置github工作流自动生成图片github workflows在.github/workflows/deploy_action.yml配置rlespinasse/drawio-export-actioninmastername: Keep draw.io export synchronizedon: push: branches: master paths: \"*.drawio\"jobs: drawio-export: runs-on: ubuntu-latest steps: - name: Checkout sources uses: actions/checkout@v3 with: fetch-depth: 0 - name: Export drawio files to asciidoctor and png files uses: rlespinasse/drawio-export-action@v2 with: format: png transparent: true - name: Push to GitHub uses: EndBug/add-and-commit@v7.2.1 with: branch: master message: 'Convert .Drawio to PNG'使用act进行github action本地调试act安装cd /home/code_github/curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash列出可用的actions/home/code_github/bin/act -l本地运行action/home/code_github/bin/act -n" }, { "title": "Flink流程图整理以及画图模板", "url": "/posts/flink_svg/", "categories": "Flink", "tags": "flink, Calcite, realtime", "date": "2022-09-19 00:00:00 +0000", "snippet": "[drawio项目文件地址]（https://github.com/2pc/mydrawio）Checkpoint流程启动流程FlinkSQLFlink Slot管理画图模板画图模板PNG" }, { "title": "云服务器部署code-server无域名支持https", "url": "/posts/vscode_server/", "categories": "code-server", "tags": "https, code-server", "date": "2022-09-16 00:00:00 +0000", "snippet": "安装code-serverwget https://github.com/coder/code-server/releases/download/v4.6.1/code-server-4.6.1-linux-amd64.tar.gztar zxvf code-server-4.6.1-linux-amd64.tar.gzcd code-server-4.6.1-linux-amd64/启动code-server ./bin/code-server --port 8080 --host 0.0.0.0 --auth password启动完就可以通过ip:8080 访问了，但是这个发现插件都没有生效看官方是必须https方式才可以支持#支持Https本来打算nginx+certbot配置下就好了,折腾半天，死活搞不通，这是才想起一定是审查备案,奈何天X云不开放80/443端口，只好放弃 为啥用天X云,羊毛撸的16G机器便宜,github速度数10M比20k腾X云好多了吧,用来部署code-server应该还是够的偶然想起openssl可以支持ipOpenSSL自签发配置ip地址的证书安装opensslyum install openssl openssl-devel -yopenssl配置文件openssl.cnf[req]distinguished_name = req_distinguished_namereq_extensions = v3_req[req_distinguished_name]countryName = Country Name (2 letter code)countryName_default = CHstateOrProvinceName = State or Province Name (full name)stateOrProvinceName_default = ZJlocalityName = Locality Name (eg, city)localityName_default = HangZhouorganizationalUnitName = Organizational Unit Name (eg, section)organizationalUnitName_default = THScommonName = Internet Widgits LtdcommonName_max = 64[ v3_req ]# Extensions to add to a certificate requestbasicConstraints = CA:FALSEkeyUsage = nonRepudiation, digitalSignature, keyEnciphermentsubjectAltName = @alt_names[alt_names]# 天X云服务器ipIP.1 = 公网ipIP.2 = 0.0.0.0IP.3 = 内网ip生成私钥openssl genrsa -out abc.key 2048创建CSR文件openssl req -new -out abc.csr -key abc.key -config openssl.cnf测试CSR文件openssl req -text -noout -in abc.csr自签名并创建证书openssl x509 -req -days 3650 -in abc.csr -signkey abc.key -out abc.crt -extensions v3_req -extfile openssl.cnf最终生成的3个文件abc.csrabc.crtabc.key abc.key将abc.crt下载到本地并导入这一步很关键，不然浏览器还是会报不信任证书 windows 命令行输入: certmgr.msc受信任的证书颁发机构-&gt;所有任务-&gt;导入更多工具里点添加到桌面最后启动code-server ./bin/code-server --port 8080 --host 0.0.0.0 --cert /home/openssl/abc.crt --cert-key /home/openssl/abc.key " }, { "title": "FlinkSQL(Flink1.15/1.16)源码分析", "url": "/posts/FLINKSQL/", "categories": "Flink1.15", "tags": "flink, Calcite, realtime", "date": "2022-08-30 00:00:00 +0000", "snippet": "FlinkSQL流程图StreamSQLExample 示例代码 def main(args: Array[String]): Unit = { // set up the Scala DataStream API val env = StreamExecutionEnvironment.getExecutionEnvironment // set up the Scala Table API val tableEnv = StreamTableEnvironment.create(env) val orderA = env.fromCollection(Seq(Order(1L, \"beer\", 3), Order(1L, \"diaper\", 4), Order(3L, \"rubber\", 2))) val orderB = env.fromCollection(Seq(Order(2L, \"pen\", 3), Order(2L, \"rubber\", 3), Order(4L, \"beer\", 1))) // convert the first DataStream to a Table object // it will be used \"inline\" and is not registered in a catalog val tableA = tableEnv.fromDataStream(orderA) // convert the second DataStream and register it as a view // it will be accessible under a name tableEnv.createTemporaryView(\"TableB\", orderB) // union the two tables val result = tableEnv.sqlQuery(s\"\"\" |SELECT * FROM $tableA WHERE amount &gt; 2 |UNION ALL |SELECT * FROM TableB WHERE amount &lt; 2 \"\"\".stripMargin) // convert the Table back to an insert-only DataStream of type `Order` tableEnv.toDataStream(result, classOf[Order]).print() // after the table program is converted to a DataStream program, // we must use `env.execute()` to submit the job env.execute() }StreamTableEnvironment.sqlQuery public Table sqlQuery(String query) { //将SQL解析成SqlNode，生成逻辑执行计划，并封装成Operation，普通select语句就是，PlannerQueryOperation List&lt;Operation&gt; operations = getParser().parse(query); if (operations.size() != 1) { throw new ValidationException( \"Unsupported SQL query! sqlQuery() only accepts a single SQL query.\"); } Operation operation = operations.get(0); if (operation instanceof QueryOperation &amp;&amp; !(operation instanceof ModifyOperation)) { return createTable((QueryOperation) operation); } else { throw new ValidationException( \"Unsupported SQL query! sqlQuery() only accepts a single SQL query of type \" + \"SELECT, UNION, INTERSECT, EXCEPT, VALUES, and ORDER_BY.\"); } } SQL解析阶段生成AST（抽象语法树），将SQL转化为SqlNodepublic List&lt;Operation&gt; parse(String statement) { CalciteParser parser = calciteParserSupplier.get(); FlinkPlannerImpl planner = validatorSupplier.get(); Optional&lt;Operation&gt; command = EXTENDED_PARSER.parse(statement); if (command.isPresent()) { return Collections.singletonList(command.get()); } // parse the sql query // use parseSqlList here because we need to support statement end with ';' in sql client. //解析sql生成SqlNode, SqlNodeList sqlNodeList = parser.parseSqlList(statement); List&lt;SqlNode&gt; parsed = sqlNodeList.getList(); Preconditions.checkArgument(parsed.size() == 1, \"only single statement supported\"); return Collections.singletonList( SqlToOperationConverter.convert(planner, catalogManager, parsed.get(0)) .orElseThrow(() -&gt; new TableException(\"Unsupported query: \" + statement)));} 验证阶段，SqlNode –&gt;SqlNode```public static Optional convert( FlinkPlannerImpl flinkPlanner, CatalogManager catalogManager, SqlNode sqlNode) { // validate the query //验证阶段,还是SqlNode final SqlNode validated = flinkPlanner.validate(sqlNode); return convertValidatedSqlNode(flinkPlanner, catalogManager, validated);}3. 语义分析,生成逻辑计划树（SqlNode–&gt;RelNode/RexNode） ///** Convert a validated sql node to Operation. */private static Optional convertValidatedSqlNode( FlinkPlannerImpl flinkPlanner, CatalogManager catalogManager, SqlNode validated) { //这里是Kind==UNION if (validated.getKind().belongsTo(SqlKind.QUERY)) { return Optional.of(converter.convertSqlQuery(validated)); }}//SqlToOperationConverterprivate Operation convertSqlQuery(SqlNode node) { return toQueryOperation(flinkPlanner, node);}//SqlToOperationConverter//生成relNode,并封装成PlannerQueryOperationprivate PlannerQueryOperation toQueryOperation(FlinkPlannerImpl planner, SqlNode validated) { // transform to a relational tree RelRoot relational = planner.rel(validated); return new PlannerQueryOperation(relational.project());}planner的实现类是FlinkPlannerImpl //FlinkPlannerImpldef rel(validatedSqlNode: SqlNode): RelRoot = { rel(validatedSqlNode, getOrCreateSqlValidator())//FlinkCalciteSqlValidator}//FlinkPlannerImplprivate def rel(validatedSqlNode: SqlNode, sqlValidator: FlinkCalciteSqlValidator) = { try { assert(validatedSqlNode != null) val sqlToRelConverter: SqlToRelConverter = createSqlToRelConverter(sqlValidator) sqlToRelConverter.convertQuery(validatedSqlNode, false, true) // we disable automatic flattening in order to let composite types pass without modification // we might enable it again once Calcite has better support for structured types // root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true)) // TableEnvironment.optimize will execute the following // root = root.withRel(RelDecorrelator.decorrelateQuery(root.rel)) // convert time indicators // root = root.withRel(RelTimeIndicatorConverter.convert(root.rel, rexBuilder))} catch { case e: RelConversionException =&gt; throw new TableException(e.getMessage) } } ``` 定义FlinkCalciteSqlValidator，SqlToRelConverter就是是Calcite的&lt;br /&gt;SqlToRelConverter.convertQueryRecursive将SqlNode转RelNode ``` //SqlToRelConverter public RelRoot convertQuery(SqlNode query, boolean needsValidation, boolean top) {if (needsValidation) { query = this.validator.validate(query);}RelNode result = this.convertQueryRecursive(query, top, (RelDataType)null).rel;if (top &amp;&amp; isStream(query)) { result = new LogicalDelta(this.cluster, ((RelNode)result).getTraitSet(), (RelNode)result);}RelCollation collation = RelCollations.EMPTY;if (!query.isA(SqlKind.DML) &amp;&amp; isOrdered(query)) { collation = this.requiredCollation((RelNode)result);}this.checkConvertedType(query, (RelNode)result);if (SQL2REL_LOGGER.isDebugEnabled()) { SQL2REL_LOGGER.debug(RelOptUtil.dumpPlan(\"Plan after converting SqlNode to RelNode\", (RelNode)result, SqlExplainFormat.TEXT, SqlExplainLevel.EXPPLAN_ATTRIBUTES));}RelDataType validatedRowType = this.validator.getValidatedNodeType(query);List&lt;RelHint&gt; hints = new ArrayList();if (query.getKind() == SqlKind.SELECT) { SqlSelect select = (SqlSelect)query; if (select.hasHints()) { hints = SqlUtil.getRelHint(this.hintStrategies, select.getHints()); }}RelNode result = RelOptUtil.propagateRelHints((RelNode)result, false);return RelRoot.of(result, validatedRowType, query.getKind()).withCollation(collation).withHints((List)hints); } ``` 优化阶段（RelNode–&gt;RelNode）tableEnv.toDataStream(result, Order.class) toStreamInternal–&gt;planner.translatepublic &lt;T&gt; DataStream&lt;T&gt; toDataStream(Table table, Class&lt;T&gt; targetClass) { Preconditions.checkNotNull(table, \"Table must not be null.\"); Preconditions.checkNotNull(targetClass, \"Target class must not be null.\"); if (targetClass == Row.class) {//targetClass==Order.class // for convenience, we allow the Row class here as well return (DataStream&lt;T&gt;) toDataStream(table);//这里 } return toDataStream(table, DataTypes.of(targetClass));}//public &lt;T&gt; DataStream&lt;T&gt; toDataStream(Table table, AbstractDataType&lt;?&gt; targetDataType) { Preconditions.checkNotNull(table, \"Table must not be null.\"); Preconditions.checkNotNull(targetDataType, \"Target data type must not be null.\"); final SchemaTranslator.ProducingResult schemaTranslationResult = SchemaTranslator.createProducingResult( getCatalogManager().getDataTypeFactory(), table.getResolvedSchema(), targetDataType); return toStreamInternal(table, schemaTranslationResult, ChangelogMode.insertOnly());}//protected &lt;T&gt; DataStream&lt;T&gt; toStreamInternal( Table table, SchemaTranslator.ProducingResult schemaTranslationResult, @Nullable ChangelogMode changelogMode) { //省略其他代码,只看toStreamInternal return toStreamInternal(table, modifyOperation);}//protected &lt;T&gt; DataStream&lt;T&gt; toStreamInternal(Table table, ModifyOperation modifyOperation) { //PlannerBase.translate final List&lt;Transformation&lt;?&gt;&gt; transformations = planner.translate(Collections.singletonList(modifyOperation)); final Transformation&lt;T&gt; transformation = getTransformation(table, transformations); executionEnvironment.addOperator(transformation); // Reconfigure whenever planner transformations are added // We pass only the configuration to avoid reconfiguration with the rootConfiguration executionEnvironment.configure(tableConfig.getConfiguration()); return new DataStream&lt;&gt;(executionEnvironment, transformation);}PlannerBaseoverride def translate( modifyOperations: util.List[ModifyOperation]): util.List[Transformation[_]] = { beforeTranslation() if (modifyOperations.isEmpty) { return List.empty[Transformation[_]] } //这里是modifyOperations 有ExternalModifyOperation等,生成一个DataStreamTableSink val relNodes = modifyOperations.map(translateToRel) //1.优化RelNode到FlinkLogicalRel, //2. 物理规则阶段优化FlinkLogicalRel到FlinkPhysicalRel val optimizedRelNodes = optimize(relNodes) //生成execGraph，即FlinkPhysicalRel转换成execGraph val execGraph = translateToExecNodeGraph(optimizedRelNodes) //生成物理执行计划,这里实现类StreamPlanner和BatchPlanner val transformations = translateToPlan(execGraph) afterTranslation() transformations}PlannerBase逻辑执行计划优化1.15版本private[flink] def optimize(relNodes: Seq[RelNode]): Seq[RelNode] = { val optimizedRelNodes = getOptimizer.optimize(relNodes)// require(optimizedRelNodes.size == relNodes.size) optimizedRelNodes}//CommonSubGraphBasedOptimizeroverride def optimize(roots: Seq[RelNode]): Seq[RelNode] = { // val sinkBlocks = doOptimize(roots) val optimizedPlan = sinkBlocks.map { block =&gt; val plan = block.getOptimizedPlan require(plan != null) plan } expandIntermediateTableScan(optimizedPlan)}1.16版本 override def optimize(roots: Seq[RelNode]): Seq[RelNode] = { // resolve hints before optimizing val joinHintResolver = new JoinHintResolver() val resolvedHintRoots = joinHintResolver.resolve(toJava(roots)) // clear query block alias bef optimizing val clearQueryBlockAliasResolver = new ClearQueryBlockAliasResolver val resolvedAliasRoots = clearQueryBlockAliasResolver.resolve(resolvedHintRoots) //doOptimize 两种实现流批 val sinkBlocks = doOptimize(resolvedAliasRoots) val optimizedPlan = sinkBlocks.map { block =&gt; val plan = block.getOptimizedPlan require(plan != null) plan } val expanded = expandIntermediateTableScan(optimizedPlan) val postOptimizedPlan = postOptimize(expanded) // Rewrite same rel object to different rel objects // in order to get the correct dag (dag reuse is based on object not digest) val shuttle = new SameRelObjectShuttle() val relsWithoutSameObj = postOptimizedPlan.map(_.accept(shuttle)) // reuse subplan SubplanReuser.reuseDuplicatedSubplan(relsWithoutSameObj, unwrapTableConfig(roots.head)) }doOptimize由子类实现，流批分开：StreamCommonSubGraphBasedOptimizer，BatchCommonSubGraphBasedOptimizer主要两个方法 optimizeTree ，optimizeBlockStreamCommonSubGraphBasedOptimizer.doOptimizeoverride protected def doOptimize(roots: Seq[RelNode]): Seq[RelNodeBlock] = {val tableConfig = planner.getTableConfig// build RelNodeBlock planval sinkBlocks = RelNodeBlockPlanBuilder.buildRelNodeBlockPlan(roots, tableConfig)// infer trait properties for sink blocksinkBlocks.foreach { sinkBlock =&gt; // don't require update before by default sinkBlock.setUpdateBeforeRequired(false) val miniBatchInterval: MiniBatchInterval = if (tableConfig.get(ExecutionConfigOptions.TABLE_EXEC_MINIBATCH_ENABLED)) { val miniBatchLatency = tableConfig.get(ExecutionConfigOptions.TABLE_EXEC_MINIBATCH_ALLOW_LATENCY).toMillis Preconditions.checkArgument( miniBatchLatency &gt; 0, \"MiniBatch Latency must be greater than 0 ms.\", null) new MiniBatchInterval(miniBatchLatency, MiniBatchMode.ProcTime) } else { MiniBatchIntervalTrait.NONE.getMiniBatchInterval } sinkBlock.setMiniBatchInterval(miniBatchInterval)}if (sinkBlocks.size == 1) { // If there is only one sink block, the given relational expressions are a simple tree // (only one root), not a dag. So many operations (e.g. infer and propagate // requireUpdateBefore) can be omitted to save optimization time. val block = sinkBlocks.head val optimizedTree = optimizeTree( block.getPlan, block.isUpdateBeforeRequired, block.getMiniBatchInterval, isSinkBlock = true) block.setOptimizedPlan(optimizedTree) return sinkBlocks}//optimizeBlock // TODO FLINK-24048: Move changeLog inference out of optimizing phase// infer modifyKind property for each blocks independentlysinkBlocks.foreach(b =&gt; optimizeBlock(b, isSinkBlock = true))// infer and propagate updateKind and miniBatchInterval property for each blockssinkBlocks.foreach { b =&gt; propagateUpdateKindAndMiniBatchInterval( b, b.isUpdateBeforeRequired, b.getMiniBatchInterval, isSinkBlock = true)}// clear the intermediate resultsinkBlocks.foreach(resetIntermediateResult)// optimize recursively RelNodeBlocksinkBlocks.foreach(b =&gt; optimizeBlock(b, isSinkBlock = true))sinkBlocks}BatchCommonSubGraphBasedOptimizer.doOptimizeoverride protected def doOptimize(roots: Seq[RelNode]): Seq[RelNodeBlock] = {// build RelNodeBlock planval rootBlocks = RelNodeBlockPlanBuilder.buildRelNodeBlockPlan(roots, planner.getTableConfig)// optimize recursively RelNodeBlockrootBlocks.foreach(optimizeBlock)rootBlocks}private def optimizeBlock(block: RelNodeBlock): Unit = {block.children.foreach { child =&gt; if (child.getNewOutputNode.isEmpty) { optimizeBlock(child) }}val originTree = block.getPlanval optimizedTree = optimizeTree(originTree)optimizedTree match { case _: LegacySink | _: Sink =&gt; // ignore case _ =&gt; val name = createUniqueIntermediateRelTableName val intermediateRelTable = new IntermediateRelTable(Collections.singletonList(name), optimizedTree) val newTableScan = wrapIntermediateRelTableToTableScan(intermediateRelTable, name) block.setNewOutputNode(newTableScan) block.setOutputTableName(name)}block.setOptimizedPlan(optimizedTree)}看下流的optimizeTreeStreamCommonSubGraphBasedOptimizer.optimizeTreeprivate def optimizeTree( relNode: RelNode, updateBeforeRequired: Boolean, miniBatchInterval: MiniBatchInterval, isSinkBlock: Boolean): RelNode = {val tableConfig = planner.getTableConfigval calciteConfig = TableConfigUtils.getCalciteConfig(tableConfig)//注意programs的构建FlinkStreamProgram.buildProgramval programs = calciteConfig.getStreamProgram .getOrElse(FlinkStreamProgram.buildProgram(tableConfig))Preconditions.checkNotNull(programs)val context = unwrapContext(relNode)//FlinkChainedProgramprograms.optimize( relNode, new StreamOptimizeContext() { override def isBatchMode: Boolean = false override def getTableConfig: TableConfig = tableConfig override def getFunctionCatalog: FunctionCatalog = planner.functionCatalog override def getCatalogManager: CatalogManager = planner.catalogManager override def getModuleManager: ModuleManager = planner.moduleManager override def getRexFactory: RexFactory = context.getRexFactory override def getFlinkRelBuilder: FlinkRelBuilder = planner.createRelBuilder override def isUpdateBeforeRequired: Boolean = updateBeforeRequired def getMiniBatchInterval: MiniBatchInterval = miniBatchInterval override def needFinalTimeIndicatorConversion: Boolean = isSinkBlock override def getClassLoader: ClassLoader = context.getClassLoader })}这里的programs是FlinkStreamProgram.buildProgram生成的def buildProgram(tableConfig: ReadableConfig): FlinkChainedProgram[StreamOptimizeContext] = {val chainedProgram = new FlinkChainedProgram[StreamOptimizeContext]()// rewrite sub-queries to joinschainedProgram.addLast( SUBQUERY_REWRITE, FlinkGroupProgramBuilder .newBuilder[StreamOptimizeContext] // rewrite QueryOperationCatalogViewTable before rewriting sub-queries .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.TABLE_REF_RULES) .build(), \"convert table references before rewriting sub-queries to semi-join\" ) .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.SEMI_JOIN_RULES) .build(), \"rewrite sub-queries to semi-join\" ) .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_COLLECTION) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.TABLE_SUBQUERY_RULES) .build(), \"sub-queries remove\" ) // convert RelOptTableImpl (which exists in SubQuery before) to FlinkRelOptTable .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.TABLE_REF_RULES) .build(), \"convert table references after sub-queries removed\" ) .build())// rewrite special temporal join planchainedProgram.addLast( TEMPORAL_JOIN_REWRITE, FlinkGroupProgramBuilder .newBuilder[StreamOptimizeContext] .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.EXPAND_PLAN_RULES) .build(), \"convert correlate to temporal table join\" ) .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.POST_EXPAND_CLEAN_UP_RULES) .build(), \"convert enumerable table scan\" ) .build())// query decorrelationchainedProgram.addLast( DECORRELATE, FlinkGroupProgramBuilder .newBuilder[StreamOptimizeContext] // rewrite before decorrelation .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.PRE_DECORRELATION_RULES) .build(), \"pre-rewrite before decorrelation\" ) .addProgram(new FlinkDecorrelateProgram) .build())// default rewrite, includes: predicate simplification, expression reduction, window// properties rewrite, etc.chainedProgram.addLast( DEFAULT_REWRITE, FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.DEFAULT_REWRITE_RULES) .build())// rule based optimization: push down predicate(s) in where clause, so it only needs to read// the required datachainedProgram.addLast( PREDICATE_PUSHDOWN, FlinkGroupProgramBuilder .newBuilder[StreamOptimizeContext] .addProgram( FlinkGroupProgramBuilder .newBuilder[StreamOptimizeContext] .addProgram( FlinkHepRuleSetProgramBuilder .newBuilder[StreamOptimizeContext] .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.JOIN_PREDICATE_REWRITE_RULES) .build(), \"join predicate rewrite\" ) .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_COLLECTION) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.FILTER_PREPARE_RULES) .build(), \"filter rules\" ) .setIterations(5) .build(), \"predicate rewrite\" ) .addProgram( // PUSH_PARTITION_DOWN_RULES should always be in front of PUSH_FILTER_DOWN_RULES // to prevent PUSH_FILTER_DOWN_RULES from consuming the predicates in partitions FlinkGroupProgramBuilder .newBuilder[StreamOptimizeContext] .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.PUSH_PARTITION_DOWN_RULES) .build(), \"push down partitions into table scan\" ) .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.PUSH_FILTER_DOWN_RULES) .build(), \"push down filters into table scan\" ) .build(), \"push predicate into table scan\" ) .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.PRUNE_EMPTY_RULES) .build(), \"prune empty after predicate push down\" ) .build())// join reorderif (tableConfig.get(OptimizerConfigOptions.TABLE_OPTIMIZER_JOIN_REORDER_ENABLED)) { chainedProgram.addLast( JOIN_REORDER, FlinkGroupProgramBuilder .newBuilder[StreamOptimizeContext] .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_COLLECTION) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.JOIN_REORDER_PREPARE_RULES) .build(), \"merge join into MultiJoin\" ) .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.JOIN_REORDER_RULES) .build(), \"do join reorder\" ) .build() )}// project rewritechainedProgram.addLast( PROJECT_REWRITE, FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_COLLECTION) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.PROJECT_RULES) .build())// optimize the logical planchainedProgram.addLast( LOGICAL, FlinkVolcanoProgramBuilder.newBuilder .add(FlinkStreamRuleSets.LOGICAL_OPT_RULES) .setRequiredOutputTraits(Array(FlinkConventions.LOGICAL)) .build())// logical rewritechainedProgram.addLast( LOGICAL_REWRITE, FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.LOGICAL_REWRITE) .build())// convert time indicatorschainedProgram.addLast(TIME_INDICATOR, new FlinkRelTimeIndicatorProgram)// optimize the physical planchainedProgram.addLast( PHYSICAL, FlinkVolcanoProgramBuilder.newBuilder .add(FlinkStreamRuleSets.PHYSICAL_OPT_RULES) .setRequiredOutputTraits(Array(FlinkConventions.STREAM_PHYSICAL)) .build())// physical rewritechainedProgram.addLast( PHYSICAL_REWRITE, FlinkGroupProgramBuilder .newBuilder[StreamOptimizeContext] // add a HEP program for watermark transpose rules to make this optimization deterministic .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_COLLECTION) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.WATERMARK_TRANSPOSE_RULES) .build(), \"watermark transpose\" ) .addProgram(new FlinkChangelogModeInferenceProgram, \"Changelog mode inference\") .addProgram( new FlinkMiniBatchIntervalTraitInitProgram, \"Initialization for mini-batch interval inference\") .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.TOP_DOWN) .add(FlinkStreamRuleSets.MINI_BATCH_RULES) .build(), \"mini-batch interval rules\" ) .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_COLLECTION) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.PHYSICAL_REWRITE) .build(), \"physical rewrite\" ) .build())chainedProgram}可以看出来是一个链组成的，看定义大概有val SUBQUERY_REWRITE = \"subquery_rewrite\"val TEMPORAL_JOIN_REWRITE = \"temporal_join_rewrite\"val DECORRELATE = \"decorrelate\"val DEFAULT_REWRITE = \"default_rewrite\"val PREDICATE_PUSHDOWN = \"predicate_pushdown\"val JOIN_REORDER = \"join_reorder\"val PROJECT_REWRITE = \"project_rewrite\"val LOGICAL = \"logical\"val LOGICAL_REWRITE = \"logical_rewrite\"val TIME_INDICATOR = \"time_indicator\"val PHYSICAL = \"physical\"val PHYSICAL_REWRITE = \"physical_rewrite\"FlinkChainedProgram.optimize def optimize(root: RelNode, context: OC): RelNode = { programNames.foldLeft(root) { (input, name) =&gt; val program = get(name).getOrElse(throw new TableException(s\"This should not happen.\")) val start = System.currentTimeMillis() // program是FlinkOptimizeProgram //FlinkOptimizeProgram子类由FlinkHepProgram或者FlinkVolcanoProgram等 val result = program.optimize(input, context) val end = System.currentTimeMillis() if (LOG.isDebugEnabled) { LOG.debug( s\"optimize $name cost ${end - start} ms.\\n\" + s\"optimize result: \\n${FlinkRelOptUtil.toString(result)}\") } result } }programNames可以看出是所有的program列表遍历一遍，以PREDICATE_PUSHDOWN为例,其定义如下// rule based optimization: push down predicate(s) in where clause, so it only needs to read// the required datachainedProgram.addLast( PREDICATE_PUSHDOWN, FlinkGroupProgramBuilder .newBuilder[StreamOptimizeContext] .addProgram( FlinkGroupProgramBuilder .newBuilder[StreamOptimizeContext] .addProgram( FlinkHepRuleSetProgramBuilder .newBuilder[StreamOptimizeContext] .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.JOIN_PREDICATE_REWRITE_RULES) .build(), \"join predicate rewrite\" ) .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_COLLECTION) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.FILTER_PREPARE_RULES) .build(), \"filter rules\" ) .setIterations(5) .build(), \"predicate rewrite\" ) .addProgram( // PUSH_PARTITION_DOWN_RULES should always be in front of PUSH_FILTER_DOWN_RULES // to prevent PUSH_FILTER_DOWN_RULES from consuming the predicates in partitions FlinkGroupProgramBuilder .newBuilder[StreamOptimizeContext] .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.PUSH_PARTITION_DOWN_RULES) .build(), \"push down partitions into table scan\" ) .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.PUSH_FILTER_DOWN_RULES) .build(), \"push down filters into table scan\" ) .build(), \"push predicate into table scan\" ) .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.PRUNE_EMPTY_RULES) .build(), \"prune empty after predicate push down\" ) .build())这个也是多条，包括三个组”predicate rewrite”FlinkStreamRuleSets.JOIN_PREDICATE_REWRITE_RULESFlinkStreamRuleSets.FILTER_PREPARE_RULES.addProgram( FlinkGroupProgramBuilder .newBuilder[StreamOptimizeContext] .addProgram( FlinkHepRuleSetProgramBuilder .newBuilder[StreamOptimizeContext] .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.JOIN_PREDICATE_REWRITE_RULES) .build(), \"join predicate rewrite\" ) .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_COLLECTION) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.FILTER_PREPARE_RULES) .build(), \"filter rules\" ) .setIterations(5) .build(), \"predicate rewrite\")push predicate into table scanFlinkStreamRuleSets.PUSH_PARTITION_DOWN_RULESFlinkStreamRuleSets.PUSH_FILTER_DOWN_RULES.addProgram( // PUSH_PARTITION_DOWN_RULES should always be in front of PUSH_FILTER_DOWN_RULES // to prevent PUSH_FILTER_DOWN_RULES from consuming the predicates in partitions FlinkGroupProgramBuilder .newBuilder[StreamOptimizeContext] .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.PUSH_PARTITION_DOWN_RULES) .build(), \"push down partitions into table scan\" ) .addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.PUSH_FILTER_DOWN_RULES) .build(), \"push down filters into table scan\" ) .build(), \"push predicate into table scan\")prune empty after predicate push downFlinkStreamRuleSets.PRUNE_EMPTY_RULES.addProgram( FlinkHepRuleSetProgramBuilder.newBuilder .setHepRulesExecutionType(HEP_RULES_EXECUTION_TYPE.RULE_SEQUENCE) .setHepMatchOrder(HepMatchOrder.BOTTOM_UP) .add(FlinkStreamRuleSets.PRUNE_EMPTY_RULES) .build(), \"prune empty after predicate push down\").build()逻辑执行计划LOGICAL_CONVERTERS负责转换RelNode到FlinkLogicalRel转换/** RuleSet to do logical optimize for stream */val LOGICAL_OPT_RULES: RuleSet = RuleSets.ofList(( FILTER_RULES.asScala ++ PROJECT_RULES.asScala ++ PRUNE_EMPTY_RULES.asScala ++ LOGICAL_RULES.asScala ++ LOGICAL_CONVERTERS.asScala//转换RelNode --&gt;FlinkLogicalRel).asJava)LOGICAL_CONVERTERS/** RuleSet to translate calcite nodes to flink nodes */private val LOGICAL_CONVERTERS: RuleSet = RuleSets.ofList(// translate to flink logical rel nodesFlinkLogicalAggregate.STREAM_CONVERTER,FlinkLogicalTableAggregate.CONVERTER,FlinkLogicalOverAggregate.CONVERTER,FlinkLogicalCalc.CONVERTER,FlinkLogicalCorrelate.CONVERTER,FlinkLogicalJoin.CONVERTER,FlinkLogicalSort.STREAM_CONVERTER,FlinkLogicalUnion.CONVERTER,FlinkLogicalValues.CONVERTER,FlinkLogicalTableSourceScan.CONVERTER,FlinkLogicalLegacyTableSourceScan.CONVERTER,FlinkLogicalTableFunctionScan.CONVERTER,FlinkLogicalDataStreamTableScan.CONVERTER,FlinkLogicalIntermediateTableScan.CONVERTER,FlinkLogicalExpand.CONVERTER,FlinkLogicalRank.CONVERTER,FlinkLogicalWatermarkAssigner.CONVERTER,FlinkLogicalWindowAggregate.CONVERTER,FlinkLogicalWindowTableAggregate.CONVERTER,FlinkLogicalSnapshot.CONVERTER,FlinkLogicalMatch.CONVERTER,FlinkLogicalSink.CONVERTER,FlinkLogicalLegacySink.CONVERTER)比如FlinkLogicalJoinConverter负责join的转换即join RelNode–&gt;FlinkLogicalJoin/** Support all joins. */private class FlinkLogicalJoinConverter extends ConverterRule( classOf[LogicalJoin], Convention.NONE, FlinkConventions.LOGICAL, \"FlinkLogicalJoinConverter\") { override def convert(rel: RelNode): RelNode = { val join = rel.asInstanceOf[LogicalJoin] val newLeft = RelOptRule.convert(join.getLeft, FlinkConventions.LOGICAL) val newRight = RelOptRule.convert(join.getRight, FlinkConventions.LOGICAL) FlinkLogicalJoin.create(newLeft, newRight, join.getCondition, join.getHints, join.getJoinType) }}object FlinkLogicalJoin { val CONVERTER: ConverterRule = new FlinkLogicalJoinConverter//创建FlinkLogicalJoin def create( left: RelNode, right: RelNode, conditionExpr: RexNode, hints: JList[RelHint], joinType: JoinRelType): FlinkLogicalJoin = { val cluster = left.getCluster val traitSet = cluster.traitSetOf(FlinkConventions.LOGICAL).simplify() new FlinkLogicalJoin(cluster, traitSet, left, right, conditionExpr, hints, joinType) }}同理经过PHYSICAL，PHYSICAL_REWRITE优化转换后，得到FlinkPhysicalRel比如StreamPhysicalDataStreamScanRule转换为StreamPhysicalDataStreamScanStreamPhysicalTableSourceScanRule转换位StreamPhysicalChangelogNormalize之后FlinkPhysicalRel转换为ExecNodeGraph private[flink] def translateToExecNodeGraph( optimizedRelNodes: Seq[RelNode], isCompiled: Boolean): ExecNodeGraph = { val nonPhysicalRel = optimizedRelNodes.filterNot(_.isInstanceOf[FlinkPhysicalRel]) if (nonPhysicalRel.nonEmpty) { throw new TableException( \"The expected optimized plan is FlinkPhysicalRel plan, \" + s\"actual plan is ${nonPhysicalRel.head.getClass.getSimpleName} plan.\") } require(optimizedRelNodes.forall(_.isInstanceOf[FlinkPhysicalRel])) // convert FlinkPhysicalRel DAG to ExecNodeGraph val generator = new ExecNodeGraphGenerator() //优化后的节点生成execGraph val execGraph = generator.generate(optimizedRelNodes.map(_.asInstanceOf[FlinkPhysicalRel]), isCompiled) // process the graph val context = new ProcessorContext(this) val processors = getExecNodeGraphProcessors processors.foldLeft(execGraph)((graph, processor) =&gt; processor.process(graph, context)) }最后ExecNodeGraph生成transformationsStreamPlanner为例//StreamPlanneroverride protected def translateToPlan(execGraph: ExecNodeGraph): util.List[Transformation[_]] = { beforeTranslation() val planner = createDummyPlanner() val transformations = execGraph.getRootNodes.map { case node: StreamExecNode[_] =&gt; node.translateToPlan(planner)//ExecNodeBase case _ =&gt; throw new TableException( \"Cannot generate DataStream due to an invalid logical plan. \" + \"This is a bug and should not happen. Please file an issue.\") } afterTranslation() transformations}ExecNodeBasepublic final Transformation&lt;T&gt; translateToPlan(Planner planner) { if (transformation == null) { //translateToPlanInternal有子类实现，比如StreamExecJoin,StreamExecWindowJoin transformation = translateToPlanInternal( (PlannerBase) planner, new ExecNodeConfig( ((PlannerBase) planner).getTableConfig(), persistedConfig)); if (this instanceof SingleTransformationTranslator) { if (inputsContainSingleton()) { transformation.setParallelism(1); transformation.setMaxParallelism(1); } } } return transformation;}translateToPlanInternal由具体子类实现，比如StreamExecJoin,StreamExecWindowJoinFlinkBatchProgramFlinkStreamProgram" }, { "title": "FlinkSQL(Flink1.15)规则优化以及Calcite原理", "url": "/posts/calcite_rule/", "categories": "Flink1.15", "tags": "flink, Calcite, realtime", "date": "2022-08-23 00:00:00 +0000", "snippet": "SQL语句示例select p.id,o.id from products p join orders o on p.id=o.id where p.id &gt; 5优化前，从SqlNode到RelNode阶段，从SqlToRelConverter.convertQuery的trace日志[DEBUG] 2022-08-22 14:50:41,662(627) --&gt; [main] org.apache.calcite.sql2rel.SqlToRelConverter.convertQuery(SqlToRelConverter.java:576): Plan after converting SqlNode to RelNodeLogicalProject(ID=[$0], ID0=[$3]) LogicalFilter(condition=[&gt;($0, 1)]) LogicalJoin(condition=[=($0, $3)], joinType=[inner]) LogicalTableScan(table=[[PRODUCTS]]) LogicalTableScan(table=[[ORDERS]])优化后LogicalProject(ID=[$0], ID0=[$3]) LogicalJoin(condition=[=($0, $3)], joinType=[inner]) LogicalFilter(condition=[&gt;($0, 5)]) EnumerableTableScan(table=[[PRODUCTS]]) EnumerableTableScan(table=[[ORDERS]])SQL示例2select u.id as user_id, u.name as user_name, w.content as content, u.age as user_age from users u\" + \" join weibos w on u.id=w.id where u.age &gt; 30 and w.id&gt;10 order by user_id优化前,还是从SqlNode到RelNode阶段[DEBUG] 2022-08-22 15:13:44,542(552) --&gt; [main] org.apache.calcite.sql2rel.SqlToRelConverter.convertQuery(SqlToRelConverter.java:576): Plan after converting SqlNode to RelNodeLogicalSort(sort0=[$0], dir0=[ASC]) LogicalProject(USER_ID=[$0], USER_NAME=[$1], CONTENT=[$5], USER_AGE=[$2]) LogicalFilter(condition=[AND(&gt;($2, 30), &gt;($3, 10))]) LogicalJoin(condition=[=($0, $3)], joinType=[inner]) LogicalTableScan(table=[[USERS]]) LogicalTableScan(table=[[WEIBOS]])优化后，因为两个表都有条件，生成了两个LogicalFilterLogicalSort(sort0=[$0], dir0=[ASC]) LogicalProject(USER_ID=[$0], USER_NAME=[$1], CONTENT=[$5], USER_AGE=[$2]) LogicalJoin(condition=[=($0, $3)], joinType=[inner]) LogicalFilter(condition=[&gt;($2, 30)])// EnumerableTableScan(table=[[USERS]]) LogicalFilter(condition=[&gt;($0, 10)]) EnumerableTableScan(table=[[WEIBOS]])//trace日志[TRACE] 2022-08-22 14:50:41,737(702) --&gt; [main] org.apache.calcite.plan.hep.HepPlanner.dumpGraph(HepPlanner.java:1015): //filter没下推Breadth-first from root: { HepRelVertex#18 = rel#17:LogicalProject(input=HepRelVertex#16,ID=$0,ID0=$3), rowcount=750.0, cumulative cost=3200.0 HepRelVertex#16 = rel#15:LogicalFilter(input=HepRelVertex#14,condition=&gt;($0, 1)), rowcount=750.0, cumulative cost=2450.0 HepRelVertex#14 = rel#13:LogicalJoin(left=HepRelVertex#11,right=HepRelVertex#12,condition==($0, $3),joinType=inner), rowcount=1500.0, cumulative cost=1700.0 HepRelVertex#11 = rel#6:EnumerableTableScan(table=[PRODUCTS]), rowcount=100.0, cumulative cost=100.0 HepRelVertex#12 = rel#7:EnumerableTableScan(table=[ORDERS]), rowcount=100.0, cumulative cost=100.0} [TRACE] 2022-08-22 14:50:41,737(702) --&gt; [main] org.apache.calcite.plan.hep.HepPlanner.applyRules(HepPlanner.java:402): Applying rule set [FilterJoinRule:FilterJoinRule:filter] [TRACE] 2022-08-22 14:50:41,737(702) --&gt; [main] org.apache.calcite.plan.hep.HepPlanner.collectGarbage(HepPlanner.java:944): collecting garbage //FilterJoinRule:FilterJoinRule规则[DEBUG] 2022-08-22 14:50:41,740(705) --&gt; [main] org.apache.calcite.plan.AbstractRelOptPlanner.fireRule(AbstractRelOptPlanner.java:305): call#0: Apply rule [FilterJoinRule:FilterJoinRule:filter] to [rel#15:LogicalFilter(input=HepRelVertex#14,condition=&gt;($0, 1)), rel#13:LogicalJoin(left=HepRelVertex#11,right=HepRelVertex#12,condition==($0, $3),joinType=inner)] [TRACE] 2022-08-22 14:54:56,202(255167) --&gt; [main] org.apache.calcite.rel.AbstractRelNode.&lt;init&gt;(AbstractRelNode.java:116): new LogicalFilter#19 [TRACE] 2022-08-22 14:54:56,208(255173) --&gt; [main] org.apache.calcite.rel.AbstractRelNode.&lt;init&gt;(AbstractRelNode.java:116): new LogicalJoin#20 //FilterJoinRule:FilterJoinRule规则[DEBUG] 2022-08-22 14:54:56,209(255174) --&gt; [main] org.apache.calcite.plan.AbstractRelOptPlanner.notifyTransformation(AbstractRelOptPlanner.java:345): call#0: Rule FilterJoinRule:FilterJoinRule:filter arguments [rel#15:LogicalFilter(input=HepRelVertex#14,condition=&gt;($0, 1)), rel#13:LogicalJoin(left=HepRelVertex#11,right=HepRelVertex#12,condition==($0, $3),joinType=inner)] produced LogicalJoin#20 [TRACE] 2022-08-22 14:54:56,228(255193) --&gt; [main] org.apache.calcite.rel.AbstractRelNode.&lt;init&gt;(AbstractRelNode.java:116): new HepRelVertex#21 [TRACE] 2022-08-22 14:54:56,228(255193) --&gt; [main] org.apache.calcite.rel.AbstractRelNode.&lt;init&gt;(AbstractRelNode.java:116): new LogicalJoin#22 [TRACE] 2022-08-22 14:54:56,228(255193) --&gt; [main] org.apache.calcite.rel.AbstractRelNode.&lt;init&gt;(AbstractRelNode.java:116): new HepRelVertex#23 [TRACE] 2022-08-22 14:54:56,230(255195) --&gt; [main] org.apache.calcite.plan.hep.HepPlanner.dumpGraph(HepPlanner.java:1015): //filter下推后Breadth-first from root: { HepRelVertex#18 = rel#17:LogicalProject(input=HepRelVertex#16,ID=$0,ID0=$3), rowcount=750.0, cumulative cost=1750.0 HepRelVertex#23 = rel#22:LogicalJoin(left=HepRelVertex#21,right=HepRelVertex#12,condition==($0, $3),joinType=inner), rowcount=750.0, cumulative cost=1000.0 HepRelVertex#21 = rel#19:LogicalFilter(input=HepRelVertex#11,condition=&gt;($0, 1)), rowcount=50.0, cumulative cost=150.0 HepRelVertex#12 = rel#7:EnumerableTableScan(table=[ORDERS]), rowcount=100.0, cumulative cost=100.0 HepRelVertex#11 = rel#6:EnumerableTableScan(table=[PRODUCTS]), rowcount=100.0, cumulative cost=100.0} 看下原理,首先是优化器，使用HepPlanner优化器，并添加规则FilterIntoJoinRuleHepProgramBuilder builder = new HepProgramBuilder();//这里添加一条规则builder.addRuleInstance(FilterJoinRule.FilterIntoJoinRule.FILTER_ON_JOIN);HepPlanner planner = new HepPlanner(builder.build());优化调用 planner的findBestExp()方法 // implement RelOptPlanner public RelNode findBestExp() { assert root != null; executeProgram(mainProgram); // Get rid of everything except what's in the final plan. collectGarbage(); return buildFinalPlan(root); } private void executeProgram(HepProgram program) { HepProgram savedProgram = currentProgram; currentProgram = program; currentProgram.initialize(program == mainProgram); for (HepInstruction instruction : currentProgram.instructions) { instruction.execute(this);//RuleInstance这里比较关键 int delta = nTransformations - nTransformationsLastGC; if (delta &gt; graphSizeLastGC) { // The number of transformations performed since the last // garbage collection is greater than the number of vertices in // the graph at that time. That means there should be a // reasonable amount of garbage to collect now. We do it this // way to amortize garbage collection cost over multiple // instructions, while keeping the highwater memory usage // proportional to the graph size. collectGarbage(); } } currentProgram = savedProgram; }RuleInstance.executestatic class RuleInstance extends HepInstruction {/** * Description to look for, or null if rule specified explicitly. */String ruleDescription;/** * Explicitly specified rule, or rule looked up by planner from * description. */RelOptRule rule;void initialize(boolean clearCache) { if (!clearCache) { return; } if (ruleDescription != null) { // Look up anew each run. rule = null; }}//这里自然是HepPlannervoid execute(HepPlanner planner) { planner.executeInstruction(this);}}HepPlanner.executeInstructionapplyRules，看名字就是与配置的规则有关了void executeInstruction( HepInstruction.RuleInstance instruction) {if (skippingGroup()) { return;}if (instruction.rule == null) { assert instruction.ruleDescription != null; instruction.rule = getRuleByDescription(instruction.ruleDescription); LOGGER.trace(\"Looking up rule with description {}, found {}\", instruction.ruleDescription, instruction.rule);}//applyRules，看名字就是与配置的规则有关了if (instruction.rule != null) { applyRules( Collections.singleton(instruction.rule), true);}}HepPlanner.applyRulesprivate void applyRules( Collection&lt;RelOptRule&gt; rules, boolean forceConversions) {if (currentProgram.group != null) { assert currentProgram.group.collecting; currentProgram.group.ruleSet.addAll(rules); return;}LOGGER.trace(\"Applying rule set {}\", rules);boolean fullRestartAfterTransformation = currentProgram.matchOrder != HepMatchOrder.ARBITRARY &amp;&amp; currentProgram.matchOrder != HepMatchOrder.DEPTH_FIRST;int nMatches = 0;boolean fixedPoint;do { Iterator&lt;HepRelVertex&gt; iter = getGraphIterator(root); fixedPoint = true; while (iter.hasNext()) { HepRelVertex vertex = iter.next(); for (RelOptRule rule : rules) { // HepRelVertex newVertex = applyRule(rule, vertex, forceConversions); if (newVertex == null || newVertex == vertex) { continue; } ++nMatches; if (nMatches &gt;= currentProgram.matchLimit) { return; } if (fullRestartAfterTransformation) { iter = getGraphIterator(root); } else { // To the extent possible, pick up where we left // off; have to create a new iterator because old // one was invalidated by transformation. iter = getGraphIterator(newVertex); if (currentProgram.matchOrder == HepMatchOrder.DEPTH_FIRST) { nMatches = depthFirstApply(iter, rules, forceConversions, nMatches); if (nMatches &gt;= currentProgram.matchLimit) { return; } } // Remember to go around again since we're // skipping some stuff. fixedPoint = false; } break; } }} while (!fixedPoint);}HepPlanner.applyRule这里的规则是FilterIntoJoinRule，既不是ConverterRule也不是CommonRelSubExprRule类型 private HepRelVertex applyRule( RelOptRule rule, HepRelVertex vertex, boolean forceConversions) { if (!belongsToDag(vertex)) { return null; } RelTrait parentTrait = null; List&lt;RelNode&gt; parents = null; if (rule instanceof ConverterRule) { // Guaranteed converter rules require special casing to make sure // they only fire where actually needed, otherwise they tend to // fire to infinity and beyond. ConverterRule converterRule = (ConverterRule) rule; if (converterRule.isGuaranteed() || !forceConversions) { if (!doesConverterApply(converterRule, vertex)) { return null; } parentTrait = converterRule.getOutTrait(); } } else if (rule instanceof CommonRelSubExprRule) { // Only fire CommonRelSubExprRules if the vertex is a common // subexpression. List&lt;HepRelVertex&gt; parentVertices = getVertexParents(vertex); if (parentVertices.size() &lt; 2) { return null; } parents = new ArrayList&lt;&gt;(); for (HepRelVertex pVertex : parentVertices) { parents.add(pVertex.getCurrentRel()); } } final List&lt;RelNode&gt; bindings = new ArrayList&lt;&gt;(); final Map&lt;RelNode, List&lt;RelNode&gt;&gt; nodeChildren = new HashMap&lt;&gt;(); boolean match = matchOperands( rule.getOperand(), vertex.getCurrentRel(), bindings, nodeChildren); if (!match) { return null; } HepRuleCall call = new HepRuleCall( this, rule.getOperand(), bindings.toArray(new RelNode[0]), nodeChildren, parents); // Allow the rule to apply its own side-conditions. if (!rule.matches(call)) { return null; }\t//规则在这里匹配出发 fireRule(call); if (!call.getResults().isEmpty()) { return applyTransformationResults( vertex, call, parentTrait); } return null; }AbstractRelOptPlanner.fireRule protected void fireRule( RelOptRuleCall ruleCall) { checkCancel(); assert ruleCall.getRule().matches(ruleCall); if (isRuleExcluded(ruleCall.getRule())) { LOGGER.debug(\"call#{}: Rule [{}] not fired due to exclusion filter\", ruleCall.id, ruleCall.getRule()); return; } if (LOGGER.isDebugEnabled()) { // Leave this wrapped in a conditional to prevent unnecessarily calling Arrays.toString(...) LOGGER.debug(\"call#{}: Apply rule [{}] to {}\", ruleCall.id, ruleCall.getRule(), Arrays.toString(ruleCall.rels)); } if (listener != null) { RelOptListener.RuleAttemptedEvent event = new RelOptListener.RuleAttemptedEvent( this, ruleCall.rel(0), ruleCall, true); listener.ruleAttempted(event); }\t//匹配到规则FilterIntoJoinRule ruleCall.getRule().onMatch(ruleCall); if (listener != null) { RelOptListener.RuleAttemptedEvent event = new RelOptListener.RuleAttemptedEvent( this, ruleCall.rel(0), ruleCall, false); listener.ruleAttempted(event); } }这里配置到之前配置的规则：FilterIntoJoinRule分别取出filter和join后执行perform public static class FilterIntoJoinRule extends FilterJoinRule { public FilterIntoJoinRule(boolean smart, RelBuilderFactory relBuilderFactory, Predicate predicate) { super( operand(Filter.class, operand(Join.class, RelOptRule.any())), \"FilterJoinRule:filter\", smart, relBuilderFactory, predicate); } @Deprecated // to be removed before 2.0 public FilterIntoJoinRule(boolean smart, RelFactories.FilterFactory filterFactory, RelFactories.ProjectFactory projectFactory, Predicate predicate) { this(smart, RelBuilder.proto(filterFactory, projectFactory), predicate); }\t//分别取出filter和join @Override public void onMatch(RelOptRuleCall call) { Filter filter = call.rel(0); Join join = call.rel(1); perform(call, filter, join); } }perform由父类FilterJoinRule实现代码比较长，主要是从左右两边表解析出filter在生成RelNode：LogicalFilter,在重新生成joinRelNode：LogicalJoin protected void perform(RelOptRuleCall call, Filter filter, Join join) { final List&lt;RexNode&gt; joinFilters = RelOptUtil.conjunctions(join.getCondition()); final List&lt;RexNode&gt; origJoinFilters = ImmutableList.copyOf(joinFilters); // If there is only the joinRel, // make sure it does not match a cartesian product joinRel // (with \"true\" condition), otherwise this rule will be applied // again on the new cartesian product joinRel. if (filter == null &amp;&amp; joinFilters.isEmpty()) { return; } final List&lt;RexNode&gt; aboveFilters = filter != null ? conjunctions(filter.getCondition()) : new ArrayList&lt;&gt;(); final ImmutableList&lt;RexNode&gt; origAboveFilters = ImmutableList.copyOf(aboveFilters); // Simplify Outer Joins JoinRelType joinType = join.getJoinType(); if (smart &amp;&amp; !origAboveFilters.isEmpty() &amp;&amp; join.getJoinType() != JoinRelType.INNER) { joinType = RelOptUtil.simplifyJoin(join, origAboveFilters, joinType); } final List&lt;RexNode&gt; leftFilters = new ArrayList&lt;&gt;(); final List&lt;RexNode&gt; rightFilters = new ArrayList&lt;&gt;(); // TODO - add logic to derive additional filters. E.g., from // (t1.a = 1 AND t2.a = 2) OR (t1.b = 3 AND t2.b = 4), you can // derive table filters: // (t1.a = 1 OR t1.b = 3) // (t2.a = 2 OR t2.b = 4) // Try to push down above filters. These are typically where clause // filters. They can be pushed down if they are not on the NULL // generating side. boolean filterPushed = false; if (RelOptUtil.classifyFilters( join, aboveFilters, joinType, !(join instanceof EquiJoin), !joinType.generatesNullsOnLeft(), !joinType.generatesNullsOnRight(), joinFilters, leftFilters, rightFilters)) { filterPushed = true; } // Move join filters up if needed validateJoinFilters(aboveFilters, joinFilters, join, joinType); // If no filter got pushed after validate, reset filterPushed flag if (leftFilters.isEmpty() &amp;&amp; rightFilters.isEmpty() &amp;&amp; joinFilters.size() == origJoinFilters.size()) { if (Sets.newHashSet(joinFilters) .equals(Sets.newHashSet(origJoinFilters))) { filterPushed = false; } } // Try to push down filters in ON clause. A ON clause filter can only be // pushed down if it does not affect the non-matching set, i.e. it is // not on the side which is preserved. if (RelOptUtil.classifyFilters( join, joinFilters, joinType, false, !joinType.generatesNullsOnRight(), !joinType.generatesNullsOnLeft(), joinFilters, leftFilters, rightFilters)) { filterPushed = true; } // if nothing actually got pushed and there is nothing leftover, // then this rule is a no-op if ((!filterPushed &amp;&amp; joinType == join.getJoinType()) || (joinFilters.isEmpty() &amp;&amp; leftFilters.isEmpty() &amp;&amp; rightFilters.isEmpty())) { return; } // create Filters on top of the children if any filters were // pushed to them //生成左右表LogicalFilter节点 final RexBuilder rexBuilder = join.getCluster().getRexBuilder(); final RelBuilder relBuilder = call.builder(); final RelNode leftRel = relBuilder.push(join.getLeft()).filter(leftFilters).build(); final RelNode rightRel = relBuilder.push(join.getRight()).filter(rightFilters).build(); // create the new join node referencing the new children and // containing its new join filters (if there are any) final ImmutableList&lt;RelDataType&gt; fieldTypes = ImmutableList.&lt;RelDataType&gt;builder() .addAll(RelOptUtil.getFieldTypeList(leftRel.getRowType())) .addAll(RelOptUtil.getFieldTypeList(rightRel.getRowType())).build(); final RexNode joinFilter = RexUtil.composeConjunction(rexBuilder, RexUtil.fixUp(rexBuilder, joinFilters, fieldTypes)); // If nothing actually got pushed and there is nothing leftover, // then this rule is a no-op if (joinFilter.isAlwaysTrue() &amp;&amp; leftFilters.isEmpty() &amp;&amp; rightFilters.isEmpty() &amp;&amp; joinType == join.getJoinType()) { return; }\t//重新生成LogicalJoin RelNode newJoinRel = join.copy( join.getTraitSet(), joinFilter, leftRel, rightRel, joinType, join.isSemiJoinDone()); call.getPlanner().onCopy(join, newJoinRel); if (!leftFilters.isEmpty()) { call.getPlanner().onCopy(filter, leftRel); } if (!rightFilters.isEmpty()) { call.getPlanner().onCopy(filter, rightRel); } relBuilder.push(newJoinRel); // Create a project on top of the join if some of the columns have become // NOT NULL due to the join-type getting stricter. //生成LogicalProject relBuilder.convert(join.getRowType(), false); // create a FilterRel on top of the join if needed relBuilder.filter( RexUtil.fixUp(rexBuilder, aboveFilters, RelOptUtil.getFieldTypeList(relBuilder.peek().getRowType()))); call.transformTo(relBuilder.build()); }HepPlanner.applyTransformationResults用新的LogicalJoin替换掉原LogicFilter，添加到 HepPlanner 的 graph 新DAG private HepRelVertex applyTransformationResults( HepRelVertex vertex, HepRuleCall call, RelTrait parentTrait) { // TODO jvs 5-Apr-2006: Take the one that gives the best // global cost rather than the best local cost. That requires // \"tentative\" graph edits. assert !call.getResults().isEmpty(); RelNode bestRel = null; if (call.getResults().size() == 1) { // No costing required; skip it to minimize the chance of hitting // rels without cost information. bestRel = call.getResults().get(0); } else { RelOptCost bestCost = null; final RelMetadataQuery mq = call.getMetadataQuery(); for (RelNode rel : call.getResults()) { RelOptCost thisCost = getCost(rel, mq); if (LOGGER.isTraceEnabled()) { // Keep in the isTraceEnabled for the getRowCount method call LOGGER.trace(\"considering {} with cumulative cost={} and rowcount={}\", rel, thisCost, mq.getRowCount(rel)); } if ((bestRel == null) || thisCost.isLt(bestCost)) { bestRel = rel; bestCost = thisCost; } } } ++nTransformations; notifyTransformation( call, bestRel, true); // Before we add the result, make a copy of the list of vertex's // parents. We'll need this later during contraction so that // we only update the existing parents, not the new parents // (otherwise loops can result). Also take care of filtering // out parents by traits in case we're dealing with a converter rule. final List&lt;HepRelVertex&gt; allParents = Graphs.predecessorListOf(graph, vertex); final List&lt;HepRelVertex&gt; parents = new ArrayList&lt;&gt;(); for (HepRelVertex parent : allParents) { if (parentTrait != null) { RelNode parentRel = parent.getCurrentRel(); if (parentRel instanceof Converter) { // We don't support automatically chaining conversions. // Treating a converter as a candidate parent here // can cause the \"iParentMatch\" check below to // throw away a new converter needed in // the multi-parent DAG case. continue; } if (!parentRel.getTraitSet().contains(parentTrait)) { // This parent does not want the converted result. continue; } } parents.add(parent); } HepRelVertex newVertex = addRelToGraph(bestRel); // There's a chance that newVertex is the same as one // of the parents due to common subexpression recognition // (e.g. the LogicalProject added by JoinCommuteRule). In that // case, treat the transformation as a nop to avoid // creating a loop. int iParentMatch = parents.indexOf(newVertex); if (iParentMatch != -1) { newVertex = parents.get(iParentMatch); } else { contractVertices(newVertex, vertex, parents); } if (getListener() != null) { // Assume listener doesn't want to see garbage. collectGarbage(); } notifyTransformation( call, bestRel, false); dumpGraph(); return newVertex; }规则FlinkStreamProgramFlinkVolcanoProgram主要两个FlinkStreamRuleSets.LOGICAL_OPT_RULES,FlinkStreamRuleSets.PHYSICAL_OPT_RULE别看只有两个，这都是代表一系列的规则// optimize the logical planchainedProgram.addLast( LOGICAL, FlinkVolcanoProgramBuilder.newBuilder .add(FlinkStreamRuleSets.LOGICAL_OPT_RULES) .setRequiredOutputTraits(Array(FlinkConventions.LOGICAL)) .build())// optimize the physical planchainedProgram.addLast( PHYSICAL, FlinkVolcanoProgramBuilder.newBuilder .add(FlinkStreamRuleSets.PHYSICAL_OPT_RULES) .setRequiredOutputTraits(Array(FlinkConventions.STREAM_PHYSICAL)) .build())逻辑执行计划LOGICAL_CONVERTERS负责转换RelNode到FlinkLogicalRel转换/** RuleSet to do logical optimize for stream */val LOGICAL_OPT_RULES: RuleSet = RuleSets.ofList(( FILTER_RULES.asScala ++ PROJECT_RULES.asScala ++ PRUNE_EMPTY_RULES.asScala ++ LOGICAL_RULES.asScala ++ LOGICAL_CONVERTERS.asScala//转换RelNode --&gt;FlinkLogicalRel).asJava)LOGICAL_CONVERTERS/** RuleSet to translate calcite nodes to flink nodes */private val LOGICAL_CONVERTERS: RuleSet = RuleSets.ofList(// translate to flink logical rel nodesFlinkLogicalAggregate.STREAM_CONVERTER,FlinkLogicalTableAggregate.CONVERTER,FlinkLogicalOverAggregate.CONVERTER,FlinkLogicalCalc.CONVERTER,FlinkLogicalCorrelate.CONVERTER,FlinkLogicalJoin.CONVERTER,FlinkLogicalSort.STREAM_CONVERTER,FlinkLogicalUnion.CONVERTER,FlinkLogicalValues.CONVERTER,FlinkLogicalTableSourceScan.CONVERTER,FlinkLogicalLegacyTableSourceScan.CONVERTER,FlinkLogicalTableFunctionScan.CONVERTER,FlinkLogicalDataStreamTableScan.CONVERTER,FlinkLogicalIntermediateTableScan.CONVERTER,FlinkLogicalExpand.CONVERTER,FlinkLogicalRank.CONVERTER,FlinkLogicalWatermarkAssigner.CONVERTER,FlinkLogicalWindowAggregate.CONVERTER,FlinkLogicalWindowTableAggregate.CONVERTER,FlinkLogicalSnapshot.CONVERTER,FlinkLogicalMatch.CONVERTER,FlinkLogicalSink.CONVERTER,FlinkLogicalLegacySink.CONVERTER)比如FlinkLogicalJoinConverter负责join的转换即join RelNode–&gt;FlinkLogicalJoin/** Support all joins. */private class FlinkLogicalJoinConverter extends ConverterRule( classOf[LogicalJoin], Convention.NONE, FlinkConventions.LOGICAL, \"FlinkLogicalJoinConverter\") { override def convert(rel: RelNode): RelNode = { val join = rel.asInstanceOf[LogicalJoin] val newLeft = RelOptRule.convert(join.getLeft, FlinkConventions.LOGICAL) val newRight = RelOptRule.convert(join.getRight, FlinkConventions.LOGICAL) FlinkLogicalJoin.create(newLeft, newRight, join.getCondition, join.getHints, join.getJoinType) }}object FlinkLogicalJoin { val CONVERTER: ConverterRule = new FlinkLogicalJoinConverter//创建FlinkLogicalJoin def create( left: RelNode, right: RelNode, conditionExpr: RexNode, hints: JList[RelHint], joinType: JoinRelType): FlinkLogicalJoin = { val cluster = left.getCluster val traitSet = cluster.traitSetOf(FlinkConventions.LOGICAL).simplify() new FlinkLogicalJoin(cluster, traitSet, left, right, conditionExpr, hints, joinType) }}" }, { "title": "Flink1.15 JobMaster源码分析", "url": "/posts/master/", "categories": "Flink1.15", "tags": "flink, Calcite, realtime", "date": "2022-08-16 00:00:00 +0000", "snippet": "启动流程dispatcher.start();调用start后回调onStart public final void start() { rpcServer.start(); }StandaloneDispatcher继承自Dispatcherpublic class StandaloneDispatcher extends Dispatcher { public StandaloneDispatcher( RpcService rpcService, DispatcherId fencingToken, Collection&lt;JobGraph&gt; recoveredJobs, Collection&lt;JobResult&gt; recoveredDirtyJobResults, DispatcherBootstrapFactory dispatcherBootstrapFactory, DispatcherServices dispatcherServices) throws Exception { super( rpcService, fencingToken, recoveredJobs, recoveredDirtyJobResults, dispatcherBootstrapFactory, dispatcherServices); }}Dispatcher.onStartpublic void onStart() throws Exception { try { startDispatcherServices(); } catch (Throwable t) { final DispatcherException exception = new DispatcherException( String.format(\"Could not start the Dispatcher %s\", getAddress()), t); onFatalError(exception); throw exception; } // startRecoveredJobs startRecoveredJobs(); //dispatcher.start //ApplicationDispatcherGatewayServiceFactory.create() this.dispatcherBootstrap = this.dispatcherBootstrapFactory.create( getSelfGateway(DispatcherGateway.class), this.getRpcService().getScheduledExecutor(), this::onFatalError);}//Dispatcherprivate void startRecoveredJobs() { for (JobGraph recoveredJob : recoveredJobs) { runRecoveredJob(recoveredJob); } recoveredJobs.clear();}private void runRecoveredJob(final JobGraph recoveredJob) { checkNotNull(recoveredJob); FutureUtils.assertNoException( runJob(recoveredJob).handle(handleRecoveredJobStartError(recoveredJob.getJobID())));}//private CompletableFuture&lt;Void&gt; runJob(JobGraph jobGraph) { Preconditions.checkState(!jobManagerRunnerFutures.containsKey(jobGraph.getJobID())); //创建JobManagerRunner final CompletableFuture&lt;JobManagerRunner&gt; jobManagerRunnerFuture = createJobManagerRunner(jobGraph); jobManagerRunnerFutures.put(jobGraph.getJobID(), jobManagerRunnerFuture); //startJobManagerRunner内部执行 jobManagerRunner.start();启动 return jobManagerRunnerFuture .thenApply(FunctionUtils.uncheckedFunction(this::startJobManagerRunner)) .thenApply(FunctionUtils.nullFn()) .whenCompleteAsync( (ignored, throwable) -&gt; { if (throwable != null) { jobManagerRunnerFutures.remove(jobGraph.getJobID()); } }, getMainThreadExecutor());}createJobManagerRunnerjobManagerRunnerFactory是JobMasterServiceLeadershipRunnerFactory private JobManagerRunner createJobMasterRunner(JobGraph jobGraph) throws Exception { Preconditions.checkState(!jobManagerRunnerRegistry.isRegistered(jobGraph.getJobID())); return jobManagerRunnerFactory.createJobManagerRunner( jobGraph, configuration, getRpcService(), highAvailabilityServices, heartbeatServices, jobManagerSharedServices, new DefaultJobManagerJobMetricGroupFactory(jobManagerMetricGroup), fatalErrorHandler, System.currentTimeMillis()); }前面讲dispatcher的时候提到 DispatcherServices.from的参数其中之一是JobMasterServiceLeadershipRunnerFactory.INSTANCE也就是这里的jobManagerRunnerFactorypublic enum SessionDispatcherFactory implements DispatcherFactory {INSTANCE;@Overridepublic StandaloneDispatcher createDispatcher( RpcService rpcService, DispatcherId fencingToken, Collection&lt;JobGraph&gt; recoveredJobs, Collection&lt;JobResult&gt; recoveredDirtyJobResults, DispatcherBootstrapFactory dispatcherBootstrapFactory, PartialDispatcherServicesWithJobPersistenceComponents partialDispatcherServicesWithJobPersistenceComponents)throws Exception { // create the default dispatcher return new StandaloneDispatcher( rpcService, fencingToken, recoveredJobs, recoveredDirtyJobResults, dispatcherBootstrapFactory, DispatcherServices.from( partialDispatcherServicesWithJobPersistenceComponents, JobMasterServiceLeadershipRunnerFactory.INSTANCE, CheckpointResourcesCleanupRunnerFactory.INSTANCE));}}JobMasterServiceLeadershipRunnerFactory.createJobMasterRunnerpublic JobManagerRunner createJobManagerRunner( JobGraph jobGraph, Configuration configuration, RpcService rpcService, HighAvailabilityServices highAvailabilityServices, HeartbeatServices heartbeatServices, JobManagerSharedServices jobManagerServices, JobManagerJobMetricGroupFactory jobManagerJobMetricGroupFactory, FatalErrorHandler fatalErrorHandler, long initializationTimestamp) throws Exception { checkArgument(jobGraph.getNumberOfVertices() &gt; 0, \"The given job is empty\"); final JobMasterConfiguration jobMasterConfiguration = JobMasterConfiguration.fromConfiguration(configuration); final JobResultStore jobResultStore = highAvailabilityServices.getJobResultStore(); final LeaderElectionService jobManagerLeaderElectionService = highAvailabilityServices.getJobManagerLeaderElectionService(jobGraph.getJobID()); final SlotPoolServiceSchedulerFactory slotPoolServiceSchedulerFactory = DefaultSlotPoolServiceSchedulerFactory.fromConfiguration( configuration, jobGraph.getJobType()); if (jobMasterConfiguration.getConfiguration().get(JobManagerOptions.SCHEDULER_MODE) == SchedulerExecutionMode.REACTIVE) { Preconditions.checkState( slotPoolServiceSchedulerFactory.getSchedulerType() == JobManagerOptions.SchedulerType.Adaptive, \"Adaptive Scheduler is required for reactive mode\"); } final LibraryCacheManager.ClassLoaderLease classLoaderLease = jobManagerServices .getLibraryCacheManager() .registerClassLoaderLease(jobGraph.getJobID()); final ClassLoader userCodeClassLoader = classLoaderLease .getOrResolveClassLoader( jobGraph.getUserJarBlobKeys(), jobGraph.getClasspaths()) .asClassLoader(); final DefaultJobMasterServiceFactory jobMasterServiceFactory = new DefaultJobMasterServiceFactory( jobManagerServices.getIoExecutor(), rpcService, jobMasterConfiguration, jobGraph, highAvailabilityServices, slotPoolServiceSchedulerFactory, jobManagerServices, heartbeatServices, jobManagerJobMetricGroupFactory, fatalErrorHandler, userCodeClassLoader, initializationTimestamp); final DefaultJobMasterServiceProcessFactory jobMasterServiceProcessFactory = new DefaultJobMasterServiceProcessFactory( jobGraph.getJobID(), jobGraph.getName(), jobGraph.getCheckpointingSettings(), initializationTimestamp, jobMasterServiceFactory); return new JobMasterServiceLeadershipRunner( jobMasterServiceProcessFactory, jobManagerLeaderElectionService, jobResultStore, classLoaderLease, fatalErrorHandler);}createJobManagerRunner方法有点长，主要是生成一个JobMasterServiceLeadershipRunnerJobMasterServiceLeadershipRunner实现了选举接口LeaderContender，看选举接口回调方法grantLeadership public void grantLeadership(UUID leaderSessionID) { runIfStateRunning( () -&gt; startJobMasterServiceProcessAsync(leaderSessionID), \"starting a new JobMasterServiceProcess\"); }实现 LeaderContender 接口，选举成功回调方法 void grantLeadership(UUID leaderSessionID);//JobManagerRunnerImplpublic void grantLeadership(final UUID leaderSessionID) { synchronized (lock) { if (shutdown) { log.debug( \"JobManagerRunner cannot be granted leadership because it is already shut down.\"); return; } leadershipOperation = leadershipOperation.thenCompose( (ignored) -&gt; { synchronized (lock) { //startJobMaster return verifyJobSchedulingStatusAndStartJobManager( leaderSessionID); } }); handleException(leadershipOperation, \"Could not start the job manager.\"); }}verifyJobSchedulingStatusAndStartJobManagerjobMasterServiceProcessFactory来创建jobMasterServiceProcessprivate void verifyJobSchedulingStatusAndCreateJobMasterServiceProcess(UUID leaderSessionId)throws FlinkException { try { if (jobResultStore.hasJobResultEntry(getJobID())) { jobAlreadyDone(); } else { createNewJobMasterServiceProcess(leaderSessionId); } } catch (IOException e) { throw new FlinkException( String.format( \"Could not retrieve the job scheduling status for job %s.\", getJobID()), e); }}private void createNewJobMasterServiceProcess(UUID leaderSessionId) throws FlinkException { Preconditions.checkState(jobMasterServiceProcess.closeAsync().isDone()); LOG.debug( \"Create new JobMasterServiceProcess because we were granted leadership under {}.\", leaderSessionId); jobMasterServiceProcess = jobMasterServiceProcessFactory.create(leaderSessionId); forwardIfValidLeader( leaderSessionId, jobMasterServiceProcess.getJobMasterGatewayFuture(), jobMasterGatewayFuture, \"JobMasterGatewayFuture from JobMasterServiceProcess\"); forwardResultFuture(leaderSessionId, jobMasterServiceProcess.getResultFuture()); confirmLeadership(leaderSessionId, jobMasterServiceProcess.getLeaderAddressFuture());}DefaultJobMasterServiceProcessFactorypublic JobMasterServiceProcess create(UUID leaderSessionId) { return new DefaultJobMasterServiceProcess( jobId, leaderSessionId, jobMasterServiceFactory, cause -&gt; createArchivedExecutionGraph(JobStatus.FAILED, cause));}DefaultJobMasterServiceProcessjobMasterServiceFactory来创建JobMasterpublic DefaultJobMasterServiceProcess( JobID jobId, UUID leaderSessionId, JobMasterServiceFactory jobMasterServiceFactory, Function&lt;Throwable, ArchivedExecutionGraph&gt; failedArchivedExecutionGraphFactory) { this.jobId = jobId; this.leaderSessionId = leaderSessionId; this.jobMasterServiceFuture = jobMasterServiceFactory.createJobMasterService(leaderSessionId, this); jobMasterServiceFuture.whenComplete( (jobMasterService, throwable) -&gt; { if (throwable != null) { final JobInitializationException jobInitializationException = new JobInitializationException( jobId, \"Could not start the JobMaster.\", throwable); LOG.debug( \"Initialization of the JobMasterService for job {} under leader id {} failed.\", jobId, leaderSessionId, jobInitializationException); resultFuture.complete( JobManagerRunnerResult.forInitializationFailure( new ExecutionGraphInfo( failedArchivedExecutionGraphFactory.apply( jobInitializationException)), jobInitializationException)); } else { registerJobMasterServiceFutures(jobMasterService); } });}DefaultJobMasterServiceFactory.createJobMasterServicepublic CompletableFuture&lt;JobMasterService&gt; createJobMasterService( UUID leaderSessionId, OnCompletionActions onCompletionActions) { return CompletableFuture.supplyAsync( FunctionUtils.uncheckedSupplier( () -&gt; internalCreateJobMasterService(leaderSessionId, onCompletionActions)), executor);}private JobMasterService internalCreateJobMasterService( UUID leaderSessionId, OnCompletionActions onCompletionActions) throws Exception { final JobMaster jobMaster = new JobMaster( rpcService, JobMasterId.fromUuidOrNull(leaderSessionId), jobMasterConfiguration, ResourceID.generate(), jobGraph, haServices, slotPoolServiceSchedulerFactory, jobManagerSharedServices, heartbeatServices, jobManagerJobMetricGroupFactory, onCompletionActions, fatalErrorHandler, userCodeClassloader, shuffleMaster, lookup -&gt; new JobMasterPartitionTrackerImpl( jobGraph.getJobID(), shuffleMaster, lookup), new DefaultExecutionDeploymentTracker(), DefaultExecutionDeploymentReconciler::new, initializationTimestamp); jobMaster.start(); return jobMaster;}}JobMasterpublic CompletableFuture&lt;Acknowledge&gt; start(final JobMasterId newJobMasterId) throws Exception { // make sure we receive RPC and async calls start(); return callAsyncWithoutFencing( () -&gt; startJobExecution(newJobMasterId), RpcUtils.INF_TIMEOUT);}private Acknowledge startJobExecution(JobMasterId newJobMasterId) throws Exception { validateRunsInMainThread(); checkNotNull(newJobMasterId, \"The new JobMasterId must not be null.\"); if (Objects.equals(getFencingToken(), newJobMasterId)) { log.info(\"Already started the job execution with JobMasterId {}.\", newJobMasterId); return Acknowledge.get(); } setNewFencingToken(newJobMasterId); //slotPool.start //scheduler.start //reconnectToResourceManager startJobMasterServices(); log.info( \"Starting execution of job {} ({}) under job master id {}.\", jobGraph.getName(), jobGraph.getJobID(), newJobMasterId); // resetAndStartScheduler(); return Acknowledge.get();}JobMaster.startJobMasterServicesprivate void startJobMasterServices() throws Exception { try { //task 是HeartbeatManagerSenderImpl 主动发送心跳请求 this.taskManagerHeartbeatManager = createTaskManagerHeartbeatManager(heartbeatServices); //HeartbeatManagerImpl,实现monitorTarget方法供对端调用 this.resourceManagerHeartbeatManager = createResourceManagerHeartbeatManager(heartbeatServices); // start the slot pool make sure the slot pool now accepts messages for this leader slotPoolService.start(getFencingToken(), getAddress(), getMainThreadExecutor()); // job is ready to go, try to establish connection with resource manager // - activate leader retrieval for the resource manager // - on notification of the leader, the connection will be established and // the slot pool will start requesting slots resourceManagerLeaderRetriever.start(new ResourceManagerLeaderListener()); } catch (Exception e) { handleStartJobMasterServicesError(e); }}对RM来说，需要创建Sender同时给JM,TM发送心跳//ResourceManagerprivate void startHeartbeatServices() { taskManagerHeartbeatManager = heartbeatServices.createHeartbeatManagerSender( resourceId, new TaskManagerHeartbeatListener(), getMainThreadExecutor(), log); jobManagerHeartbeatManager = heartbeatServices.createHeartbeatManagerSender( resourceId, new JobManagerHeartbeatListener(), getMainThreadExecutor(), log);}对JM来说需要创建Sender对TM主动发送心跳,反向就是HeartbeatReceiver，tm内部有ResourceManagerHeartbeatReceiver ,JobManagerHeartbeatReceiverJM内部也有一个ResourceManagerHeartbeatReceiver//JobMasterprivate HeartbeatManager&lt;TaskExecutorToJobManagerHeartbeatPayload, AllocatedSlotReport&gt; createTaskManagerHeartbeatManager(HeartbeatServices heartbeatServices) { return heartbeatServices.createHeartbeatManagerSender( resourceId, new TaskManagerHeartbeatListener(), getMainThreadExecutor(), log);1.心跳管理taskManagerHeartbeatManagerm,resourceManagerHeartbeatManagerpublic &lt;I, O&gt; HeartbeatManager&lt;I, O&gt; createHeartbeatManagerSender( ResourceID resourceId, HeartbeatListener&lt;I, O&gt; heartbeatListener, ScheduledExecutor mainThreadExecutor, Logger log) { //具体实现类是HeartbeatManagerSenderImpl return new HeartbeatManagerSenderImpl&lt;&gt;( heartbeatInterval, heartbeatTimeout, failedRpcRequestsUntilUnreachable, resourceId, heartbeatListener, mainThreadExecutor, log);}HeartbeatManagerSenderImpl( long heartbeatPeriod, long heartbeatTimeout, int failedRpcRequestsUntilUnreachable, ResourceID ownResourceID, HeartbeatListener&lt;I, O&gt; heartbeatListener, ScheduledExecutor mainThreadExecutor, Logger log, HeartbeatMonitor.Factory&lt;O&gt; heartbeatMonitorFactory) { super( heartbeatTimeout, failedRpcRequestsUntilUnreachable, ownResourceID, heartbeatListener, mainThreadExecutor, log, heartbeatMonitorFactory); this.heartbeatPeriod = heartbeatPeriod; //交给线程池mainThreadExecutor定时调度,是HeartbeatManagerSenderImpl本身的run方法 mainThreadExecutor.schedule(this, 0L, TimeUnit.MILLISECONDS);}//交给线程池mainThreadExecutor定时调度,是HeartbeatManagerSenderImpl本身的run方法public void run() { if (!stopped) { // log.debug(\"Trigger heartbeat request.\"); for (HeartbeatMonitor&lt;O&gt; heartbeatMonitor : getHeartbeatTargets().values()) { requestHeartbeat(heartbeatMonitor); } getMainThreadExecutor().schedule(this, heartbeatPeriod, TimeUnit.MILLISECONDS); }}private void requestHeartbeat(HeartbeatMonitor&lt;O&gt; heartbeatMonitor) { O payload = getHeartbeatListener().retrievePayload(heartbeatMonitor.getHeartbeatTargetId()); final HeartbeatTarget&lt;O&gt; heartbeatTarget = heartbeatMonitor.getHeartbeatTarget(); //requestHeartbeat由JM,RM对应的GateWa heartbeatTarget .requestHeartbeat(getOwnResourceID(), payload) .whenCompleteAsync( handleHeartbeatRpc(heartbeatMonitor.getHeartbeatTargetId()), getMainThreadExecutor());} ResourceManagerLeaderListener private class ResourceManagerLeaderListener implements LeaderRetrievalListener { @Override public void notifyLeaderAddress(final String leaderAddress, final UUID leaderSessionID) { runAsync( () -&gt; notifyOfNewResourceManagerLeader( leaderAddress, ResourceManagerId.fromUuidOrNull(leaderSessionID))); } @Override public void handleError(final Exception exception) { handleJobMasterError( new Exception(\"Fatal error in the ResourceManager leader service\", exception)); }}//连接RMprivate void notifyOfNewResourceManagerLeader( final String newResourceManagerAddress, final ResourceManagerId resourceManagerId) { resourceManagerAddress = createResourceManagerAddress(newResourceManagerAddress, resourceManagerId); reconnectToResourceManager( new FlinkException( String.format( \"ResourceManager leader changed to new address %s\", resourceManagerAddress)));} 向ResourceManager发起连接，也就是注册 private void reconnectToResourceManager(Exception cause) { closeResourceManagerConnection(cause); tryConnectToResourceManager(); } private void tryConnectToResourceManager() { if (resourceManagerAddress != null) { connectToResourceManager(); } } private void connectToResourceManager() { assert (resourceManagerAddress != null); assert (resourceManagerConnection == null); assert (establishedResourceManagerConnection == null); log.info(\"Connecting to ResourceManager {}\", resourceManagerAddress); resourceManagerConnection = new ResourceManagerConnection( log, jobGraph.getJobID(), resourceId, getAddress(), getFencingToken(), resourceManagerAddress.getAddress(), resourceManagerAddress.getResourceManagerId(), futureExecutor); resourceManagerConnection.start(); } 注册以及成功的回调 protected RetryingRegistration&lt; ResourceManagerId, ResourceManagerGateway, JobMasterRegistrationSuccess, RegistrationResponse.Rejection&gt; generateRegistration() { return new RetryingRegistration&lt; ResourceManagerId, ResourceManagerGateway, JobMasterRegistrationSuccess, RegistrationResponse.Rejection&gt;( log, getRpcService(), \"ResourceManager\", ResourceManagerGateway.class, getTargetAddress(), getTargetLeaderId(), jobMasterConfiguration.getRetryingRegistrationConfiguration()) { @Override protected CompletableFuture&lt;RegistrationResponse&gt; invokeRegistration( ResourceManagerGateway gateway, ResourceManagerId fencingToken, long timeoutMillis) { Time timeout = Time.milliseconds(timeoutMillis); //向RM注册JM return gateway.registerJobMaster( jobMasterId, jobManagerResourceID, jobManagerRpcAddress, jobID, timeout); } }; } @Override //注册成功的回调 protected void onRegistrationSuccess(final JobMasterRegistrationSuccess success) { runAsync( () -&gt; { // filter out outdated connections //noinspection ObjectEquality if (this == resourceManagerConnection) { establishResourceManagerConnection(success); } }); } CompletableFuture场景，返回cf,等reg注册返回whenCompleteAsync再回调在createNewRegistration内 public void start() { checkState(!closed, \"The RPC connection is already closed\"); checkState( !isConnected() &amp;&amp; pendingRegistration == null, \"The RPC connection is already started\"); //这里返回一个CF,等后面reg成功在回调onRegistrationSuccess/onRegistrationFailure final RetryingRegistration&lt;F, G, S, R&gt; newRegistration = createNewRegistration(); //注册 if (REGISTRATION_UPDATER.compareAndSet(this, null, newRegistration)) { newRegistration.startRegistration(); } else { // concurrent start operation newRegistration.cancel(); }} " }, { "title": "Flink1.15 Resource Manager源码分析", "url": "/posts/rm/", "categories": "Flink1.15", "tags": "flink, realtime", "date": "2022-08-12 00:00:00 +0000", "snippet": "" }, { "title": "Flink1.15 Dispatcher源码分析", "url": "/posts/Dispatcher/", "categories": "Flink1.15", "tags": "flink, realtime", "date": "2022-08-12 00:00:00 +0000", "snippet": "AM启动类YarnApplicationClusterEntryPointYarnApplicationClusterEntryPoint.mainClusterEntrypoint.runClusterEntrypointClusterEntrypoint.startClusterClusterEntrypoint.runClusterprivate void runCluster(Configuration configuration, PluginManager pluginManager)throws Exception { synchronized (lock) { initializeServices(configuration, pluginManager); // write host information into configuration configuration.setString(JobManagerOptions.ADDRESS, commonRpcService.getAddress()); configuration.setInteger(JobManagerOptions.PORT, commonRpcService.getPort()); //创建dispatcherResourceManagerComponentFactory final DispatcherResourceManagerComponentFactory dispatcherResourceManagerComponentFactory = createDispatcherResourceManagerComponentFactory(configuration); //创建DispatcherResourceManagerComponent clusterComponent = dispatcherResourceManagerComponentFactory.create( configuration, resourceId.unwrap(), ioExecutor, commonRpcService, haServices, blobServer, heartbeatServices, metricRegistry, executionGraphInfoStore, new RpcMetricQueryServiceRetriever( metricRegistry.getMetricQueryServiceRpcService()), this); clusterComponent .getShutDownFuture() .whenComplete( (ApplicationStatus applicationStatus, Throwable throwable) -&gt; { if (throwable != null) { shutDownAsync( ApplicationStatus.UNKNOWN, ShutdownBehaviour.GRACEFUL_SHUTDOWN, ExceptionUtils.stringifyException(throwable), false); } else { // This is the general shutdown path. If a separate more // specific shutdown was // already triggered, this will do nothing shutDownAsync( applicationStatus, ShutdownBehaviour.GRACEFUL_SHUTDOWN, null, true); } }); }}createDispatcherResourceManagerComponentFactory这里用的是DefaultDispatcherResourceManagerComponentFactory另外注意下这里的参数SessionDispatcherFactory.INSTANCE//注意下SessionDispatcherFactoryprotected DispatcherResourceManagerComponentFactorycreateDispatcherResourceManagerComponentFactory(final Configuration configuration) { return new DefaultDispatcherResourceManagerComponentFactory( new DefaultDispatcherRunnerFactory( ApplicationDispatcherLeaderProcessFactoryFactory.create( configuration, SessionDispatcherFactory.INSTANCE, program)), resourceManagerFactory, JobRestEndpointFactory.INSTANCE);}SessionDispatcherFactory后边生成dispatcher是StandaloneDispatcherpublic enum SessionDispatcherFactory implements DispatcherFactory { INSTANCE; @Override public StandaloneDispatcher createDispatcher( RpcService rpcService, DispatcherId fencingToken, Collection&lt;JobGraph&gt; recoveredJobs, Collection&lt;JobResult&gt; recoveredDirtyJobResults, DispatcherBootstrapFactory dispatcherBootstrapFactory, PartialDispatcherServicesWithJobPersistenceComponents partialDispatcherServicesWithJobPersistenceComponents) throws Exception { // create the default dispatcher return new StandaloneDispatcher( rpcService, fencingToken, recoveredJobs, recoveredDirtyJobResults, dispatcherBootstrapFactory, DispatcherServices.from( partialDispatcherServicesWithJobPersistenceComponents, JobMasterServiceLeadershipRunnerFactory.INSTANCE, CheckpointResourcesCleanupRunnerFactory.INSTANCE)); }}DefaultDispatcherResourceManagerComponentFactory.create启动dispatcher启动RMlog.debug(\"Starting Dispatcher.\");dispatcherRunner =dispatcherRunnerFactory.createDispatcherRunner( highAvailabilityServices.getDispatcherLeaderElectionService(), fatalErrorHandler, new HaServicesJobPersistenceComponentFactory(highAvailabilityServices), ioExecutor, rpcService, partialDispatcherServices);log.debug(\"Starting ResourceManagerService.\");resourceManagerService.start();resourceManagerRetrievalService.start(resourceManagerGatewayRetriever);dispatcherLeaderRetrievalService.start(dispatcherGatewayRetriever);return new DispatcherResourceManagerComponent( dispatcherRunner, resourceManagerService, dispatcherLeaderRetrievalService, resourceManagerRetrievalService, webMonitorEndpoint, fatalErrorHandler, dispatcherOperationCaches);DefaultDispatcherRunnerFactory.createDispatcherRunnerpublic class DefaultDispatcherRunnerFactory implements DispatcherRunnerFactory { private final DispatcherLeaderProcessFactoryFactory dispatcherLeaderProcessFactoryFactory; public DefaultDispatcherRunnerFactory( DispatcherLeaderProcessFactoryFactory dispatcherLeaderProcessFactoryFactory) { this.dispatcherLeaderProcessFactoryFactory = dispatcherLeaderProcessFactoryFactory; } //application @Override public DispatcherRunner createDispatcherRunner( LeaderElectionService leaderElectionService, FatalErrorHandler fatalErrorHandler, JobPersistenceComponentFactory jobPersistenceComponentFactory, Executor ioExecutor, RpcService rpcService, PartialDispatcherServices partialDispatcherServices) throws Exception { //SessionDispatcherLeaderProcessFactory final DispatcherLeaderProcessFactory dispatcherLeaderProcessFactory = dispatcherLeaderProcessFactoryFactory.createFactory( jobPersistenceComponentFactory, ioExecutor, rpcService, partialDispatcherServices, fatalErrorHandler); return DefaultDispatcherRunner.create( leaderElectionService, fatalErrorHandler, dispatcherLeaderProcessFactory); } //session public static DefaultDispatcherRunnerFactory createSessionRunner( DispatcherFactory dispatcherFactory) { return new DefaultDispatcherRunnerFactory( SessionDispatcherLeaderProcessFactoryFactory.create(dispatcherFactory)); } //job public static DefaultDispatcherRunnerFactory createJobRunner( JobGraphRetriever jobGraphRetriever) { return new DefaultDispatcherRunnerFactory( JobDispatcherLeaderProcessFactoryFactory.create(jobGraphRetriever)); }}application模式ApplicationDispatcherLeaderProcessFactoryFactory.createDispatcherRunnerpublic DispatcherRunner createDispatcherRunner( LeaderElectionService leaderElectionService, FatalErrorHandler fatalErrorHandler, JobPersistenceComponentFactory jobPersistenceComponentFactory, Executor ioExecutor, RpcService rpcService, PartialDispatcherServices partialDispatcherServices)throws Exception { final DispatcherLeaderProcessFactory dispatcherLeaderProcessFactory = dispatcherLeaderProcessFactoryFactory.createFactory( jobPersistenceComponentFactory, ioExecutor, rpcService, partialDispatcherServices, fatalErrorHandler); return DefaultDispatcherRunner.create( leaderElectionService, fatalErrorHandler, dispatcherLeaderProcessFactory);}DefaultDispatcherRunner实现LeaderContender选举回调grantLeadershippublic void grantLeadership(UUID leaderSessionID) { runActionIfRunning( () -&gt; { LOG.info( \"{} was granted leadership with leader id {}. Creating new {}.\", getClass().getSimpleName(), leaderSessionID, DispatcherLeaderProcess.class.getSimpleName()); startNewDispatcherLeaderProcess(leaderSessionID); });}DefaultDispatcherRunner.startNewDispatcherLeaderProcessprivate void startNewDispatcherLeaderProcess(UUID leaderSessionID) { stopDispatcherLeaderProcess(); dispatcherLeaderProcess = createNewDispatcherLeaderProcess(leaderSessionID); final DispatcherLeaderProcess newDispatcherLeaderProcess = dispatcherLeaderProcess; FutureUtils.assertNoException( previousDispatcherLeaderProcessTerminationFuture.thenRun( newDispatcherLeaderProcess::start));}AbstractDispatcherLeaderProcess.startAbstractDispatcherLeaderProcess.startInternalpublic final void start() { runIfStateIs(State.CREATED, this::startInternal);}private void startInternal() { log.info(\"Start {}.\", getClass().getSimpleName()); state = State.RUNNING; onStart();}SessionDispatcherLeaderProcess.onStart()protected void onStart() { startServices(); onGoingRecoveryOperation = createDispatcherBasedOnRecoveredJobGraphsAndRecoveredDirtyJobResults();}createDispatcherBasedOnRecoveredJobGraphsAndRecoveredDirtyJobResults private CompletableFuture&lt;Void&gt; createDispatcherBasedOnRecoveredJobGraphsAndRecoveredDirtyJobResults() { final CompletableFuture&lt;Collection&lt;JobResult&gt;&gt; dirtyJobsFuture = CompletableFuture.supplyAsync(this::getDirtyJobResultsIfRunning, ioExecutor); return dirtyJobsFuture .thenApplyAsync( dirtyJobs -&gt; this.recoverJobsIfRunning( dirtyJobs.stream() .map(JobResult::getJobId) .collect(Collectors.toSet())), ioExecutor) .thenAcceptBoth(dirtyJobsFuture, this::createDispatcherIfRunning) .handle(this::onErrorIfRunning); }SessionDispatcherLeaderProcess.createDispatcherIfRunningSessionDispatcherLeaderProcess.createDispatcherprivate void createDispatcherIfRunning( Collection&lt;JobGraph&gt; jobGraphs, Collection&lt;JobResult&gt; recoveredDirtyJobResults) { runIfStateIs(State.RUNNING, () -&gt; createDispatcher(jobGraphs, recoveredDirtyJobResults));}private void createDispatcher( Collection&lt;JobGraph&gt; jobGraphs, Collection&lt;JobResult&gt; recoveredDirtyJobResults) { final DispatcherGatewayService dispatcherService = dispatcherGatewayServiceFactory.create( DispatcherId.fromUuid(getLeaderSessionId()), jobGraphs, recoveredDirtyJobResults, jobGraphStore, jobResultStore); completeDispatcherSetup(dispatcherService);}ApplicationDispatcherGatewayServiceFactory.createpublic AbstractDispatcherLeaderProcess.DispatcherGatewayService create( DispatcherId fencingToken, Collection&lt;JobGraph&gt; recoveredJobs, Collection&lt;JobResult&gt; recoveredDirtyJobResults, JobGraphWriter jobGraphWriter, JobResultStore jobResultStore) { final List&lt;JobID&gt; recoveredJobIds = getRecoveredJobIds(recoveredJobs); final Dispatcher dispatcher; try { dispatcher = dispatcherFactory.createDispatcher( rpcService, fencingToken, recoveredJobs, recoveredDirtyJobResults, (dispatcherGateway, scheduledExecutor, errorHandler) -&gt; new ApplicationDispatcherBootstrap( application, recoveredJobIds, configuration, dispatcherGateway, scheduledExecutor, errorHandler), PartialDispatcherServicesWithJobPersistenceComponents.from( partialDispatcherServices, jobGraphWriter, jobResultStore)); } catch (Exception e) { throw new FlinkRuntimeException(\"Could not create the Dispatcher rpc endpoint.\", e); } dispatcher.start(); return DefaultDispatcherGatewayService.from(dispatcher);}这里SessionDispatcherFactory生成StandaloneDispatcherpublic enum SessionDispatcherFactory implements DispatcherFactory { INSTANCE; @Override public StandaloneDispatcher createDispatcher( RpcService rpcService, DispatcherId fencingToken, Collection&lt;JobGraph&gt; recoveredJobs, Collection&lt;JobResult&gt; recoveredDirtyJobResults, DispatcherBootstrapFactory dispatcherBootstrapFactory, PartialDispatcherServicesWithJobPersistenceComponents partialDispatcherServicesWithJobPersistenceComponents) throws Exception { // create the default dispatcher return new StandaloneDispatcher( rpcService, fencingToken, recoveredJobs, recoveredDirtyJobResults, dispatcherBootstrapFactory, DispatcherServices.from( partialDispatcherServicesWithJobPersistenceComponents, JobMasterServiceLeadershipRunnerFactory.INSTANCE, CheckpointResourcesCleanupRunnerFactory.INSTANCE)); }}StandaloneDispatcher是Dispatcher的子类，本身什么也没干，逻辑都在Dispatcherpublic class StandaloneDispatcher extends Dispatcher { public StandaloneDispatcher( RpcService rpcService, DispatcherId fencingToken, Collection&lt;JobGraph&gt; recoveredJobs, Collection&lt;JobResult&gt; recoveredDirtyJobResults, DispatcherBootstrapFactory dispatcherBootstrapFactory, DispatcherServices dispatcherServices) throws Exception { super( rpcService, fencingToken, recoveredJobs, recoveredDirtyJobResults, dispatcherBootstrapFactory, dispatcherServices); }}Dispatcher继承了RpcEndpoint，start方法public final void start() { rpcServer.start();}启动RPC后会调用onStartpublic void onStart() throws Exception { try { startDispatcherServices(); } catch (Throwable t) { final DispatcherException exception = new DispatcherException( String.format(\"Could not start the Dispatcher %s\", getAddress()), t); onFatalError(exception); throw exception; } startCleanupRetries(); // startRecoveredJobs(); this.dispatcherBootstrap = this.dispatcherBootstrapFactory.create( getSelfGateway(DispatcherGateway.class), this.getRpcService().getScheduledExecutor(), this::onFatalError);}主要看startRecoveredJobsprivate void startRecoveredJobs() { for (JobGraph recoveredJob : recoveredJobs) { runRecoveredJob(recoveredJob); } recoveredJobs.clear();}private void runRecoveredJob(final JobGraph recoveredJob) { checkNotNull(recoveredJob); try { runJob(createJobMasterRunner(recoveredJob), ExecutionType.RECOVERY); } catch (Throwable throwable) { onFatalError( new DispatcherException( String.format( \"Could not start recovered job %s.\", recoveredJob.getJobID()), throwable)); }}" }, { "title": "Flink1.15 Cli提交源码分析", "url": "/posts/Cli/", "categories": "Flink1.15", "tags": "flink, realtime", "date": "2022-08-11 00:00:00 +0000", "snippet": "org.apache.flink.client.cli.CliFrontend#runpublic static void main(final String[] args) { EnvironmentInformation.logEnvironmentInfo(LOG, \"Command Line Client\", args); // 1. find the configuration directory final String configurationDirectory = getConfigurationDirectoryFromEnv(); // 2. load the global configuration final Configuration configuration = GlobalConfiguration.loadConfiguration(configurationDirectory); // 3. load the custom command lines final List&lt;CustomCommandLine&gt; customCommandLines = loadCustomCommandLines(configuration, configurationDirectory); int retCode = 31; try { final CliFrontend cli = new CliFrontend(configuration, customCommandLines); SecurityUtils.install(new SecurityConfiguration(cli.configuration)); //执行parseAndRun retCode = SecurityUtils.getInstalledContext().runSecured(() -&gt; cli.parseAndRun(args)); } catch (Throwable t) { final Throwable strippedThrowable = ExceptionUtils.stripException(t, UndeclaredThrowableException.class); LOG.error(\"Fatal error while running command line interface.\", strippedThrowable); strippedThrowable.printStackTrace(); } finally { System.exit(retCode); }}public int parseAndRun(String[] args) { // check for action if (args.length &lt; 1) { CliFrontendParser.printHelp(customCommandLines); System.out.println(\"Please specify an action.\"); return 1; } // get action String action = args[0]; // remove action from parameters final String[] params = Arrays.copyOfRange(args, 1, args.length); try { // do action switch (action) { case ACTION_RUN: run(params); return 0; case ACTION_RUN_APPLICATION: runApplication(params); return 0; }}非application模式 run(params)protected void run(String[] args) throws Exception { LOG.info(\"Running 'run' command.\"); final Options commandOptions = CliFrontendParser.getRunCommandOptions(); final CommandLine commandLine = getCommandLine(commandOptions, args, true); // evaluate help flag if (commandLine.hasOption(HELP_OPTION.getOpt())) { CliFrontendParser.printHelpForRun(customCommandLines); return; } final CustomCommandLine activeCommandLine = validateAndGetActiveCommandLine(checkNotNull(commandLine)); final ProgramOptions programOptions = ProgramOptions.create(commandLine); final List&lt;URL&gt; jobJars = getJobJarAndDependencies(programOptions); final Configuration effectiveConfiguration = getEffectiveConfiguration(activeCommandLine, commandLine, programOptions, jobJars); LOG.debug(\"Effective executor configuration: {}\", effectiveConfiguration); try (PackagedProgram program = getPackagedProgram(programOptions, effectiveConfiguration)) { executeProgram(effectiveConfiguration, program); }}executeProgramprotected void executeProgram(final Configuration configuration, final PackagedProgram program)throws ProgramInvocationException { ClientUtils.executeProgram( new DefaultExecutorServiceLoader(), configuration, program, false, false);}ClientUtils.executeProgrampublic static void executeProgram( PipelineExecutorServiceLoader executorServiceLoader, Configuration configuration, PackagedProgram program, boolean enforceSingleJobExecution, boolean suppressSysout)throws ProgramInvocationException { checkNotNull(executorServiceLoader); final ClassLoader userCodeClassLoader = program.getUserCodeClassLoader(); final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader(); try { Thread.currentThread().setContextClassLoader(userCodeClassLoader); LOG.info( \"Starting program (detached: {})\", !configuration.getBoolean(DeploymentOptions.ATTACHED)); ContextEnvironment.setAsContext( executorServiceLoader, configuration, userCodeClassLoader, enforceSingleJobExecution, suppressSysout); StreamContextEnvironment.setAsContext( executorServiceLoader, configuration, userCodeClassLoader, enforceSingleJobExecution, suppressSysout); try { program.invokeInteractiveModeForExecution(); } finally { ContextEnvironment.unsetAsContext(); StreamContextEnvironment.unsetAsContext(); } } finally { Thread.currentThread().setContextClassLoader(contextClassLoader); }}org.apache.flink.client.program.PackagedProgram#invokeInteractiveModeForExecutionpublic void invokeInteractiveModeForExecution() throws ProgramInvocationException { FlinkSecurityManager.monitorUserSystemExitForCurrentThread(); try { callMainMethod(mainClass, args); } finally { FlinkSecurityManager.unmonitorUserSystemExitForCurrentThread(); }}mainMethod.invoke(null, (Object) args);开始调用用户的程序。最后都要调用env.execute()来执行job，比如StreamExecutionEnvironment.executepublic JobExecutionResult execute() throws Exception { return execute(getStreamGraph());}StreamGraphpublic StreamGraph getStreamGraph(boolean clearTransformations) { final StreamGraph streamGraph = getStreamGraphGenerator(transformations).generate(); if (clearTransformations) { transformations.clear(); } return streamGraph;}JobGraphfinal JobGraph jobGraph = PipelineExecutorUtils.getJobGraph(pipeline, configuration);application模式protected void runApplication(String[] args) throws Exception { LOG.info(\"Running 'run-application' command.\"); final Options commandOptions = CliFrontendParser.getRunCommandOptions(); final CommandLine commandLine = getCommandLine(commandOptions, args, true); if (commandLine.hasOption(HELP_OPTION.getOpt())) { CliFrontendParser.printHelpForRunApplication(customCommandLines); return; } final CustomCommandLine activeCommandLine = validateAndGetActiveCommandLine(checkNotNull(commandLine)); //生成ApplicationClusterDeployer final ApplicationDeployer deployer = new ApplicationClusterDeployer(clusterClientServiceLoader); final ProgramOptions programOptions; final Configuration effectiveConfiguration; // No need to set a jarFile path for Pyflink job. if (ProgramOptionsUtils.isPythonEntryPoint(commandLine)) { programOptions = ProgramOptionsUtils.createPythonProgramOptions(commandLine); effectiveConfiguration = getEffectiveConfiguration( activeCommandLine, commandLine, programOptions, Collections.emptyList()); } else { programOptions = new ProgramOptions(commandLine); programOptions.validate(); final URI uri = PackagedProgramUtils.resolveURI(programOptions.getJarFilePath()); effectiveConfiguration = getEffectiveConfiguration( activeCommandLine, commandLine, programOptions, Collections.singletonList(uri.toString())); } final ApplicationConfiguration applicationConfiguration = new ApplicationConfiguration( programOptions.getProgramArgs(), programOptions.getEntryPointClassName()); deployer.run(effectiveConfiguration, applicationConfiguration);}ApplicationClusterDeployer.runpublic &lt;ClusterID&gt; void run( final Configuration configuration, final ApplicationConfiguration applicationConfiguration)throws Exception { checkNotNull(configuration); checkNotNull(applicationConfiguration); LOG.info(\"Submitting application in 'Application Mode'.\"); final ClusterClientFactory&lt;ClusterID&gt; clientFactory = clientServiceLoader.getClusterClientFactory(configuration); try (final ClusterDescriptor&lt;ClusterID&gt; clusterDescriptor = clientFactory.createClusterDescriptor(configuration)) { final ClusterSpecification clusterSpecification = clientFactory.getClusterSpecification(configuration); clusterDescriptor.deployApplicationCluster( clusterSpecification, applicationConfiguration); }}clusterDescriptor两种实现KubernetesClusterDescriptor或者YarnClusterDescriptorYarnClusterDescriptor.deployApplicationClusterpublic ClusterClientProvider&lt;ApplicationId&gt; deployApplicationCluster( final ClusterSpecification clusterSpecification, final ApplicationConfiguration applicationConfiguration)throws ClusterDeploymentException { checkNotNull(clusterSpecification); checkNotNull(applicationConfiguration); final YarnDeploymentTarget deploymentTarget = YarnDeploymentTarget.fromConfig(flinkConfiguration); if (YarnDeploymentTarget.APPLICATION != deploymentTarget) { throw new ClusterDeploymentException( \"Couldn't deploy Yarn Application Cluster.\" + \" Expected deployment.target=\" + YarnDeploymentTarget.APPLICATION.getName() + \" but actual one was \\\"\" + deploymentTarget.getName() + \"\\\"\"); } applicationConfiguration.applyToConfiguration(flinkConfiguration); // No need to do pipelineJars validation if it is a PyFlink job. if (!(PackagedProgramUtils.isPython(applicationConfiguration.getApplicationClassName()) || PackagedProgramUtils.isPython(applicationConfiguration.getProgramArguments()))) { final List&lt;String&gt; pipelineJars = flinkConfiguration .getOptional(PipelineOptions.JARS) .orElse(Collections.emptyList()); Preconditions.checkArgument(pipelineJars.size() == 1, \"Should only have one jar\"); } try { //注意这里YarnApplicationClusterEntryPoint.class.getName()，这个是AM启动的入口 return deployInternal( clusterSpecification, \"Flink Application Cluster\", YarnApplicationClusterEntryPoint.class.getName(), null, false); } catch (Exception e) { throw new ClusterDeploymentException(\"Couldn't deploy Yarn Application Cluster\", e); }}YarnClusterDescriptor.deployInternal创建一个YarnClientApplication，包含最大资源通过startAppMaster向yarn集群提交启动AMprivate ClusterClientProvider&lt;ApplicationId&gt; deployInternal( ClusterSpecification clusterSpecification, String applicationName, String yarnClusterEntrypoint, @Nullable JobGraph jobGraph, boolean detached)throws Exception { final UserGroupInformation currentUser = UserGroupInformation.getCurrentUser(); if (HadoopUtils.isKerberosSecurityEnabled(currentUser)) { boolean useTicketCache = flinkConfiguration.getBoolean(SecurityOptions.KERBEROS_LOGIN_USETICKETCACHE); if (!HadoopUtils.areKerberosCredentialsValid(currentUser, useTicketCache)) { throw new RuntimeException( \"Hadoop security with Kerberos is enabled but the login user \" + \"does not have Kerberos credentials or delegation tokens!\"); } final boolean fetchToken = flinkConfiguration.getBoolean(SecurityOptions.KERBEROS_FETCH_DELEGATION_TOKEN); final boolean yarnAccessFSEnabled = !CollectionUtil.isNullOrEmpty( flinkConfiguration.get(YarnConfigOptions.YARN_ACCESS)); if (!fetchToken &amp;&amp; yarnAccessFSEnabled) { throw new IllegalConfigurationException( String.format( \"When %s is disabled, %s must be disabled as well.\", SecurityOptions.KERBEROS_FETCH_DELEGATION_TOKEN.key(), YarnConfigOptions.YARN_ACCESS.key())); } } isReadyForDeployment(clusterSpecification); // ------------------ Check if the specified queue exists -------------------- checkYarnQueues(yarnClient); // ------------------ Check if the YARN ClusterClient has the requested resources // -------------- //创建一个YarnClientApplication，返回最大MaximumResourceCapability,后边校验资源 // Create application via yarnClient final YarnClientApplication yarnApplication = yarnClient.createApplication(); final GetNewApplicationResponse appResponse = yarnApplication.getNewApplicationResponse(); Resource maxRes = appResponse.getMaximumResourceCapability(); final ClusterResourceDescription freeClusterMem; try { freeClusterMem = getCurrentFreeClusterResources(yarnClient); } catch (YarnException | IOException e) { failSessionDuringDeployment(yarnClient, yarnApplication); throw new YarnDeploymentException( \"Could not retrieve information about free cluster resources.\", e); } final int yarnMinAllocationMB = yarnConfiguration.getInt( YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB, YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB); if (yarnMinAllocationMB &lt;= 0) { throw new YarnDeploymentException( \"The minimum allocation memory \" + \"(\" + yarnMinAllocationMB + \" MB) configured via '\" + YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB + \"' should be greater than 0.\"); } final ClusterSpecification validClusterSpecification; try { validClusterSpecification = validateClusterResources( clusterSpecification, yarnMinAllocationMB, maxRes, freeClusterMem); } catch (YarnDeploymentException yde) { failSessionDuringDeployment(yarnClient, yarnApplication); throw yde; } LOG.info(\"Cluster specification: {}\", validClusterSpecification); final ClusterEntrypoint.ExecutionMode executionMode = detached ? ClusterEntrypoint.ExecutionMode.DETACHED : ClusterEntrypoint.ExecutionMode.NORMAL; flinkConfiguration.setString( ClusterEntrypoint.INTERNAL_CLUSTER_EXECUTION_MODE, executionMode.toString()); ApplicationReport report = startAppMaster( flinkConfiguration, applicationName, yarnClusterEntrypoint, jobGraph, yarnClient, yarnApplication, validClusterSpecification); // print the application id for user to cancel themselves. if (detached) { final ApplicationId yarnApplicationId = report.getApplicationId(); logDetachedClusterInformation(yarnApplicationId, LOG); } setClusterEntrypointInfoToConfig(report); return () -&gt; { try { return new RestClusterClient&lt;&gt;(flinkConfiguration, report.getApplicationId()); } catch (Exception e) { throw new RuntimeException(\"Error while creating RestClusterClient.\", e); } };}startAppMaster代码比较长主要是生成一个ContainerLaunchContext并包装成ApplicationSubmissionContext提交到yarn//达到一个ApplicationSubmissionContextApplicationSubmissionContext appContext = yarnApplication.getApplicationSubmissionContext();//创建ContainerLaunchContextfinal ContainerLaunchContext amContainer =setupApplicationMasterContainer(yarnClusterEntrypoint, hasKrb5, processSpec);//将amContainer包装成appContextappContext.setApplicationName(customApplicationName);appContext.setApplicationType(applicationType != null ? applicationType : \"Apache Flink\");appContext.setAMContainerSpec(amContainer);appContext.setResource(capability);//submit 一个applicationLOG.info(\"Submitting application master \" + appId);yarnClient.submitApplication(appContext);LOG.info(\"Waiting for the cluster to be allocated\");org.apache.hadoop.yarn.server.resourcemanager.ResourceManager.RMActiveServices.serviceInitResourceManager.this.masterService = ResourceManager.this.createApplicationMasterService();//创建ApplicationMasterLauncherthis.applicationMasterLauncher = ResourceManager.this.createAMLauncher();ApplicationMasterLauncher实现接口EventHandler 的handle方法public synchronized void handle(AMLauncherEvent appEvent) { AMLauncherEventType event = (AMLauncherEventType)appEvent.getType(); RMAppAttempt application = appEvent.getAppAttempt(); switch(event) { case LAUNCH: this.launch(application); break; case CLEANUP: this.cleanup(application); }}启动类YarnApplicationClusterEntryPoint" }, { "title": "Flink1.15 SLOT源码分析", "url": "/posts/slot/", "categories": "Flink1.15", "tags": "flink, Calcite, realtime", "date": "2022-08-09 00:00:00 +0000", "snippet": "Flink Slot管理JobMaster继承了RpcEndpoint，start的回调Onstartprotected void onStart() throws JobMasterException { try { startJobExecution(); } catch (Exception e) { final JobMasterException jobMasterException = new JobMasterException(\"Could not start the JobMaster.\", e); handleJobMasterError(jobMasterException); throw jobMasterException; }}JobMaster.startJobExecutionprivate void startJobExecution() throws Exception { validateRunsInMainThread(); //NettyShuffleMaster JobShuffleContext context = new JobShuffleContextImpl(jobGraph.getJobID(), this); shuffleMaster.registerJob(context); //启动jobMaster服务,管理tm,rm心跳 startJobMasterServices(); log.info( \"Starting execution of job '{}' ({}) under job master id {}.\", jobGraph.getName(), jobGraph.getJobID(), getFencingToken()); startScheduling();}JobMaster.startJobMasterServices启动JobMaster服务taskManagerHeartbeatManage与TM相关的心跳r管理等resourceManagerHeartbeatManager与RM相关的心跳管理等启动slotPoolService服务private void startJobMasterServices() throws Exception { try { //TM this.taskManagerHeartbeatManager = createTaskManagerHeartbeatManager(heartbeatServices); this.resourceManagerHeartbeatManager = createResourceManagerHeartbeatManager(heartbeatServices); // start the slot pool make sure the slot pool now accepts messages for this leader slotPoolService.start(getFencingToken(), getAddress(), getMainThreadExecutor()); // job is ready to go, try to establish connection with resource manager // - activate leader retrieval for the resource manager // - on notification of the leader, the connection will be established and // the slot pool will start requesting slots //Leader 服务 resourceManagerLeaderRetriever.start(new ResourceManagerLeaderListener()); } catch (Exception e) { handleStartJobMasterServicesError(e); }}ResourceManagerLeaderListener回调notifyLeaderAddressprivate class ResourceManagerLeaderListener implements LeaderRetrievalListener { @Override public void notifyLeaderAddress(final String leaderAddress, final UUID leaderSessionID) { //回调方法调用notifyOfNewResourceManagerLeader runAsync( () -&gt; notifyOfNewResourceManagerLeader( leaderAddress, ResourceManagerId.fromUuidOrNull(leaderSessionID))); } @Override public void handleError(final Exception exception) { handleJobMasterError( new Exception(\"Fatal error in the ResourceManager leader service\", exception)); }}JobMaster.notifyOfNewResourceManagerLeaderprivate void notifyOfNewResourceManagerLeader( final String newResourceManagerAddress, final ResourceManagerId resourceManagerId) { resourceManagerAddress = createResourceManagerAddress(newResourceManagerAddress, resourceManagerId); reconnectToResourceManager( new FlinkException( String.format( \"ResourceManager leader changed to new address %s\", resourceManagerAddress)));}private void reconnectToResourceManager(Exception cause) { closeResourceManagerConnection(cause); tryConnectToResourceManager();}private void tryConnectToResourceManager() { if (resourceManagerAddress != null) { connectToResourceManager(); }}private void connectToResourceManager() { assert (resourceManagerAddress != null); assert (resourceManagerConnection == null); assert (establishedResourceManagerConnection == null); log.info(\"Connecting to ResourceManager {}\", resourceManagerAddress); resourceManagerConnection = new ResourceManagerConnection( log, jobGraph.getJobID(), resourceId, getAddress(), getFencingToken(), resourceManagerAddress.getAddress(), resourceManagerAddress.getResourceManagerId(), futureExecutor); resourceManagerConnection.start();}JobMaster.startSchedulingprivate void startScheduling() { schedulerNG.startScheduling();}schedulerNG在中SchedulerBaseSchedulerBase.startSchedulingpublic final void startScheduling() { mainThreadExecutor.assertRunningInMainThread(); registerJobMetrics( jobManagerJobMetricGroup, executionGraph, this::getNumberOfRestarts, deploymentStateTimeMetrics, executionGraph::registerJobStatusListener, executionGraph.getStatusTimestamp(JobStatus.INITIALIZING), jobStatusMetricsSettings); operatorCoordinatorHandler.startAllOperatorCoordinators(); //DefaultScheduler startSchedulingInternal();}DefaultScheduler.startSchedulingInternal();protected void startSchedulingInternal() { log.info( \"Starting scheduling with scheduling strategy [{}]\", schedulingStrategy.getClass().getName()); transitionToRunning(); //schedulingStrategy schedulingStrategy.startScheduling();}PipelinedRegionSchedulingStrategy.startSchedulingpublic void startScheduling() { final Set&lt;SchedulingPipelinedRegion&gt; sourceRegions = IterableUtils.toStream(schedulingTopology.getAllPipelinedRegions()) .filter(this::isSourceRegion) .collect(Collectors.toSet()); maybeScheduleRegions(sourceRegions);}PipelinedRegionSchedulingStrategy.startSchedulingprivate void maybeScheduleRegions(final Set&lt;SchedulingPipelinedRegion&gt; regions) { //DefaultExecutionTopology final List&lt;SchedulingPipelinedRegion&gt; regionsSorted = SchedulingStrategyUtils.sortPipelinedRegionsInTopologicalOrder( schedulingTopology, regions); final Map&lt;ConsumedPartitionGroup, Boolean&gt; consumableStatusCache = new HashMap&lt;&gt;(); for (SchedulingPipelinedRegion region : regionsSorted) { maybeScheduleRegion(region, consumableStatusCache); }}//对单个SchedulingPipelinedRegion调度private void maybeScheduleRegion( final SchedulingPipelinedRegion region, final Map&lt;ConsumedPartitionGroup, Boolean&gt; consumableStatusCache) { if (!areRegionInputsAllConsumable(region, consumableStatusCache)) { return; } checkState( areRegionVerticesAllInCreatedState(region), \"BUG: trying to schedule a region which is not in CREATED state\"); final List&lt;ExecutionVertexDeploymentOption&gt; vertexDeploymentOptions = SchedulingStrategyUtils.createExecutionVertexDeploymentOptions( regionVerticesSorted.get(region), id -&gt; deploymentOption); //DefaultScheduler schedulerOperations.allocateSlotsAndDeploy(vertexDeploymentOptions);}DefaultScheduler.allocateSlotsAndDeploy大致可以分为两块，分配slots与想TM提交taskpublic void allocateSlotsAndDeploy( final List&lt;ExecutionVertexDeploymentOption&gt; executionVertexDeploymentOptions) { validateDeploymentOptions(executionVertexDeploymentOptions); final Map&lt;ExecutionVertexID, ExecutionVertexDeploymentOption&gt; deploymentOptionsByVertex = groupDeploymentOptionsByVertexId(executionVertexDeploymentOptions); final List&lt;ExecutionVertexID&gt; verticesToDeploy = executionVertexDeploymentOptions.stream() .map(ExecutionVertexDeploymentOption::getExecutionVertexId) .collect(Collectors.toList()); final Map&lt;ExecutionVertexID, ExecutionVertexVersion&gt; requiredVersionByVertex = executionVertexVersioner.recordVertexModifications(verticesToDeploy); transitionToScheduled(verticesToDeploy); //分配slots final List&lt;SlotExecutionVertexAssignment&gt; slotExecutionVertexAssignments = allocateSlots(executionVertexDeploymentOptions); final List&lt;DeploymentHandle&gt; deploymentHandles = createDeploymentHandles( requiredVersionByVertex, deploymentOptionsByVertex, slotExecutionVertexAssignments); //调用submitTask提交task waitForAllSlotsAndDeploy(deploymentHandles);}DefaultScheduler.allocateSlotsprivate List&lt;SlotExecutionVertexAssignment&gt; allocateSlots( final List&lt;ExecutionVertexDeploymentOption&gt; executionVertexDeploymentOptions) { return executionSlotAllocator.allocateSlotsFor( executionVertexDeploymentOptions.stream() .map(ExecutionVertexDeploymentOption::getExecutionVertexId) .collect(Collectors.toList()));}SlotSharingExecutionSlotAllocator.allocateSlotsForpublic List&lt;SlotExecutionVertexAssignment&gt; allocateSlotsFor( List&lt;ExecutionVertexID&gt; executionVertexIds) { SharedSlotProfileRetriever sharedSlotProfileRetriever = sharedSlotProfileRetrieverFactory.createFromBulk(new HashSet&lt;&gt;(executionVertexIds)); Map&lt;ExecutionSlotSharingGroup, List&lt;ExecutionVertexID&gt;&gt; executionsByGroup = executionVertexIds.stream() .collect( Collectors.groupingBy( slotSharingStrategy::getExecutionSlotSharingGroup)); Map&lt;ExecutionSlotSharingGroup, SharedSlot&gt; slots = executionsByGroup.keySet().stream() //SlotSharingExecutionSlotAllocator.getOrAllocateSharedSlot .map(group -&gt; getOrAllocateSharedSlot(group, sharedSlotProfileRetriever)) .collect( Collectors.toMap( SharedSlot::getExecutionSlotSharingGroup, Function.identity())); Map&lt;ExecutionVertexID, SlotExecutionVertexAssignment&gt; assignments = allocateLogicalSlotsFromSharedSlots(slots, executionsByGroup); // we need to pass the slots map to the createBulk method instead of using the allocator's // 'sharedSlots' // because if any physical slots have already failed, their shared slots have been removed // from the allocator's 'sharedSlots' by failed logical slots. SharingPhysicalSlotRequestBulk bulk = createBulk(slots, executionsByGroup); bulkChecker.schedulePendingRequestBulkTimeoutCheck(bulk, allocationTimeout); return executionVertexIds.stream().map(assignments::get).collect(Collectors.toList());}SlotSharingExecutionSlotAllocator.getOrAllocateSharedSlotprivate SharedSlot getOrAllocateSharedSlot( ExecutionSlotSharingGroup executionSlotSharingGroup, SharedSlotProfileRetriever sharedSlotProfileRetriever) { return sharedSlots.computeIfAbsent( executionSlotSharingGroup, group -&gt; { SlotRequestId physicalSlotRequestId = new SlotRequestId(); ResourceProfile physicalSlotResourceProfile = getPhysicalSlotResourceProfile(group); SlotProfile slotProfile = sharedSlotProfileRetriever.getSlotProfile( group, physicalSlotResourceProfile); PhysicalSlotRequest physicalSlotRequest = new PhysicalSlotRequest( physicalSlotRequestId, slotProfile, slotWillBeOccupiedIndefinitely); CompletableFuture&lt;PhysicalSlot&gt; physicalSlotFuture = slotProvider .allocatePhysicalSlot(physicalSlotRequest) .thenApply(PhysicalSlotRequest.Result::getPhysicalSlot); return new SharedSlot( physicalSlotRequestId, physicalSlotResourceProfile, group, physicalSlotFuture, slotWillBeOccupiedIndefinitely, this::releaseSharedSlot); });}PhysicalSlotProviderImpl.allocatePhysicalSlotpublic CompletableFuture&lt;PhysicalSlotRequest.Result&gt; allocatePhysicalSlot( PhysicalSlotRequest physicalSlotRequest) { SlotRequestId slotRequestId = physicalSlotRequest.getSlotRequestId(); SlotProfile slotProfile = physicalSlotRequest.getSlotProfile(); ResourceProfile resourceProfile = slotProfile.getPhysicalSlotResourceProfile(); LOG.debug( \"Received slot request [{}] with resource requirements: {}\", slotRequestId, resourceProfile); //尝试从分配 Optional&lt;PhysicalSlot&gt; availablePhysicalSlot = tryAllocateFromAvailable(slotRequestId, slotProfile); //请求新的slot CompletableFuture&lt;PhysicalSlot&gt; slotFuture; slotFuture = availablePhysicalSlot .map(CompletableFuture::completedFuture) .orElseGet( () -&gt; requestNewSlot( slotRequestId, resourceProfile, slotProfile.getPreferredAllocations(), physicalSlotRequest .willSlotBeOccupiedIndefinitely())); return slotFuture.thenApply( physicalSlot -&gt; new PhysicalSlotRequest.Result(slotRequestId, physicalSlot));}PhysicalSlotProviderImpl.requestNewSlotprivate CompletableFuture&lt;PhysicalSlot&gt; requestNewSlot( SlotRequestId slotRequestId, ResourceProfile resourceProfile, Collection&lt;AllocationID&gt; preferredAllocations, boolean willSlotBeOccupiedIndefinitely) { if (willSlotBeOccupiedIndefinitely) { return slotPool.requestNewAllocatedSlot( slotRequestId, resourceProfile, preferredAllocations, null); } else { return slotPool.requestNewAllocatedBatchSlot( slotRequestId, resourceProfile, preferredAllocations); }}DeclarativeSlotPoolBridge.requestNewAllocatedSlotDeclarativeSlotPoolBridge.requestNewAllocatedBatchSlot看requestNewAllocatedSlotpublic CompletableFuture&lt;PhysicalSlot&gt; requestNewAllocatedSlot( @Nonnull SlotRequestId slotRequestId, @Nonnull ResourceProfile resourceProfile, @Nonnull Collection&lt;AllocationID&gt; preferredAllocations, @Nullable Time timeout) { assertRunningInMainThread(); log.debug( \"Request new allocated slot with slot request id {} and resource profile {}\", slotRequestId, resourceProfile); final PendingRequest pendingRequest = PendingRequest.createNormalRequest( slotRequestId, resourceProfile, preferredAllocations); //调用 return internalRequestNewSlot(pendingRequest, timeout);}private CompletableFuture&lt;PhysicalSlot&gt; internalRequestNewSlot( PendingRequest pendingRequest, @Nullable Time timeout) { //这里处理pendingRequest返回 internalRequestNewAllocatedSlot(pendingRequest); //没配置超时直接返回 if (timeout == null) { return pendingRequest.getSlotFuture(); } else { return FutureUtils.orTimeout( pendingRequest.getSlotFuture(), timeout.toMilliseconds(), TimeUnit.MILLISECONDS, componentMainThreadExecutor) .whenComplete( (physicalSlot, throwable) -&gt; { if (throwable instanceof TimeoutException) { timeoutPendingSlotRequest(pendingRequest.getSlotRequestId()); } }); }}DeclarativeSlotPoolBridge.internalRequestNewAllocatedSlotprivate void internalRequestNewAllocatedSlot(PendingRequest pendingRequest) { pendingRequests.put(pendingRequest.getSlotRequestId(), pendingRequest); //DefaultDeclarativeSlotPool getDeclarativeSlotPool() .increaseResourceRequirementsBy( ResourceCounter.withResource(pendingRequest.getResourceProfile(), 1));}DefaultDeclarativeSlotPool.increaseResourceRequirementsByDefaultDeclarativeSlotPool.declareResourceRequirementspublic void increaseResourceRequirementsBy(ResourceCounter increment) { if (increment.isEmpty()) { return; } totalResourceRequirements = totalResourceRequirements.add(increment); declareResourceRequirements();}private void declareResourceRequirements() { final Collection&lt;ResourceRequirement&gt; resourceRequirements = getResourceRequirements(); LOG.debug( \"Declare new resource requirements for job {}.{}\\trequired resources: {}{}\\tacquired resources: {}\", jobId, System.lineSeparator(), resourceRequirements, System.lineSeparator(), fulfilledResourceRequirements); //这里的关键是notifyNewResourceRequirements notifyNewResourceRequirements.accept(resourceRequirements);}notifyNewResourceRequirements的是在DeclarativeSlotPoolService实例化的时候创建的declarativeSlotPoolFactory是DefaultDeclarativeSlotPoolFactorypublic DeclarativeSlotPoolService( JobID jobId, DeclarativeSlotPoolFactory declarativeSlotPoolFactory, Clock clock, Time idleSlotTimeout, Time rpcTimeout) { this.jobId = jobId; this.clock = clock; this.rpcTimeout = rpcTimeout; this.registeredTaskManagers = new HashSet&lt;&gt;(); this.declarativeSlotPool = declarativeSlotPoolFactory.create( jobId, this::declareResourceRequirements, idleSlotTimeout, rpcTimeout);}declareResourceRequirements方法,内部其其实是封装的resourceRequirementServiceConnectionManagerprivate void declareResourceRequirements(Collection&lt;ResourceRequirement&gt; resourceRequirements) { assertHasBeenStarted(); resourceRequirementServiceConnectionManager.declareResourceRequirements( ResourceRequirements.create(jobId, jobManagerAddress, resourceRequirements));}DefaultDeclareResourceRequirementServiceConnectionManager.declareResourceRequirementsDefaultDeclareResourceRequirementServiceConnectionManager.triggerResourceRequirementsSubmissionpublic void declareResourceRequirements(ResourceRequirements resourceRequirements) { synchronized (lock) { checkNotClosed(); if (isConnected()) { currentResourceRequirements = resourceRequirements; triggerResourceRequirementsSubmission( Duration.ofMillis(1L), Duration.ofMillis(10000L), currentResourceRequirements); } }}private void triggerResourceRequirementsSubmission( Duration sleepOnError, Duration maxSleepOnError, ResourceRequirements resourceRequirementsToSend) { FutureUtils.retryWithDelay( () -&gt; sendResourceRequirements(resourceRequirementsToSend), new ExponentialBackoffRetryStrategy( Integer.MAX_VALUE, sleepOnError, maxSleepOnError), throwable -&gt; !(throwable instanceof CancellationException), scheduledExecutor);}DefaultDeclareResourceRequirementServiceConnectionManager.sendResourceRequirementsprivate CompletableFuture&lt;Acknowledge&gt; sendResourceRequirements( ResourceRequirements resourceRequirementsToSend) { synchronized (lock) { if (isConnected()) { if (resourceRequirementsToSend == currentResourceRequirements) { return service.declareResourceRequirements(resourceRequirementsToSend); } else { LOG.debug(\"Newer resource requirements found. Stop sending old requirements.\"); return FutureUtils.completedExceptionally(new CancellationException()); } } else { LOG.debug( \"Stop sending resource requirements to ResourceManager because it is not connected.\"); return FutureUtils.completedExceptionally(new CancellationException()); } }}这里的service注意下是怎么来的呢，需要看下resourceRequirementServiceConnectionManager.connect，也就是resourceRequirementServiceConnectionManager通过注册的DeclarativeSlotPoolService.connectToResourceManagerpublic void connectToResourceManager(ResourceManagerGateway resourceManagerGateway) { assertHasBeenStarted(); //先注册service,即resourceManagerGateway.declareRequiredResources resourceRequirementServiceConnectionManager.connect( resourceRequirements -&gt; resourceManagerGateway.declareRequiredResources( jobMasterId, resourceRequirements, rpcTimeout)); declareResourceRequirements(declarativeSlotPool.getResourceRequirements());}resourceRequirementServiceConnectionManager是在DeclarativeSlotPoolService的start方法创建的resourceRequirementServiceConnectionManager是DefaultDeclareResourceRequirementServiceConnectionManagerDefaultDeclareResourceRequirementServiceConnectionManager继承自AbstractServiceConnectionManager实现了connect方法DeclarativeSlotPoolService.start()public final void start( JobMasterId jobMasterId, String address, ComponentMainThreadExecutor mainThreadExecutor)throws Exception { Preconditions.checkState( state == State.CREATED, \"The DeclarativeSlotPoolService can only be started once.\"); this.jobMasterId = Preconditions.checkNotNull(jobMasterId); this.jobManagerAddress = Preconditions.checkNotNull(address); //创建resourceRequirementServiceConnectionManager实例 this.resourceRequirementServiceConnectionManager = DefaultDeclareResourceRequirementServiceConnectionManager.create( mainThreadExecutor); onStart(mainThreadExecutor); state = State.STARTED;}AbstractServiceConnectionManager.connectpublic final void connect(S service) { synchronized (lock) { checkNotClosed(); this.service = service; }}所以这里是调用的是resourceManagerGateway.declareRequiredResources，即ResourceManager，是交给slotManager处理的public CompletableFuture&lt;Acknowledge&gt; declareRequiredResources( JobMasterId jobMasterId, ResourceRequirements resourceRequirements, Time timeout) { final JobID jobId = resourceRequirements.getJobId(); final JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId); if (null != jobManagerRegistration) { if (Objects.equals(jobMasterId, jobManagerRegistration.getJobMasterId())) { // slotManager.processResourceRequirements(resourceRequirements); return CompletableFuture.completedFuture(Acknowledge.get()); } else { return FutureUtils.completedExceptionally( new ResourceManagerException( \"The job leader's id \" + jobManagerRegistration.getJobMasterId() + \" does not match the received id \" + jobMasterId + '.')); } } else { return FutureUtils.completedExceptionally( new ResourceManagerException( \"Could not find registered job manager for job \" + jobId + '.')); }}DeclarativeSlotManager.processResourceRequirementspublic void processResourceRequirements(ResourceRequirements resourceRequirements) { checkInit(); if (resourceRequirements.getResourceRequirements().isEmpty() &amp;&amp; resourceTracker.isRequirementEmpty(resourceRequirements.getJobId())) { return; } else if (resourceRequirements.getResourceRequirements().isEmpty()) { LOG.info(\"Clearing resource requirements of job {}\", resourceRequirements.getJobId()); } else { LOG.info( \"Received resource requirements from job {}: {}\", resourceRequirements.getJobId(), resourceRequirements.getResourceRequirements()); } if (!resourceRequirements.getResourceRequirements().isEmpty()) { jobMasterTargetAddresses.put( resourceRequirements.getJobId(), resourceRequirements.getTargetAddress()); } resourceTracker.notifyResourceRequirements( resourceRequirements.getJobId(), resourceRequirements.getResourceRequirements()); //主要逻辑 checkResourceRequirements();}DeclarativeSlotManager.checkResourceRequirementsprivate void checkResourceRequirements() { final Map&lt;JobID, Collection&lt;ResourceRequirement&gt;&gt; missingResources = resourceTracker.getMissingResources(); if (missingResources.isEmpty()) { return; } final Map&lt;JobID, ResourceCounter&gt; unfulfilledRequirements = new LinkedHashMap&lt;&gt;(); for (Map.Entry&lt;JobID, Collection&lt;ResourceRequirement&gt;&gt; resourceRequirements : missingResources.entrySet()) { final JobID jobId = resourceRequirements.getKey(); //1.尝试从free slot分配 final ResourceCounter unfulfilledJobRequirements = tryAllocateSlotsForJob(jobId, resourceRequirements.getValue()); if (!unfulfilledJobRequirements.isEmpty()) { unfulfilledRequirements.put(jobId, unfulfilledJobRequirements); } } if (unfulfilledRequirements.isEmpty()) { return; } ResourceCounter pendingSlots = ResourceCounter.withResources( taskExecutorManager.getPendingTaskManagerSlots().stream() .collect( Collectors.groupingBy( PendingTaskManagerSlot::getResourceProfile, Collectors.summingInt(x -&gt; 1)))); //2.尝试从pendingSlot分配,如果需要启动新的taskExecutor for (Map.Entry&lt;JobID, ResourceCounter&gt; unfulfilledRequirement : unfulfilledRequirements.entrySet()) { pendingSlots = tryFulfillRequirementsWithPendingSlots( unfulfilledRequirement.getKey(), unfulfilledRequirement.getValue().getResourcesWithCount(), pendingSlots); }}直接分配资源DeclarativeSlotManager.tryAllocateSlotsForJobDeclarativeSlotManager.internalTryAllocateSlotsDeclarativeSlotManager.allocateSlotTaskExecutorGateway.requestSlotTaskExecutor.requestSlotTaskExecutor.allocateSlotForJobTaskExecutor.offerSlotsToJobManagerTaskExecutor.internalOfferSlotsToJobManagerjobMasterGateway.offerSlotsJobMaster.offerSlotsDeclarativeSlotPoolService.offerSlotsDefaultDeclarativeSlotPool.offerSlots启动taskExecutor流畅DeclarativeSlotManager.tryFulfillRequirementsWithPendingSlotsDeclarativeSlotManager.tryAllocateWorkerAndReserveSlottaskExecutorManager.allocateWorkerresourceActions.allocateResourceResourceManager.startNewWorker//application模式位于YarnApplicationClusterEntryPoint//YarnResourceManagerFactory继承自ActiveResourceManagerFactory//public class YarnResourceManagerFactory extends ActiveResourceManagerFactory&lt;YarnWorkerNode&gt; {private YarnApplicationClusterEntryPoint( final Configuration configuration, final PackagedProgram program) { super(configuration, program, YarnResourceManagerFactory.getInstance());}ActiveResourceManager.requestNewWorkerresourceManagerDriver.requestResourceYarnResourceManagerDriver.requestResourceresourceManagerClient.addContainerRequestAMRMClientAsync.CallbackHandler.onContainersAllocatedYarnResourceManagerDriver.onContainersOfPriorityAllocatedYarnResourceManagerDriver.startTaskExecutorInContainerAsyncYarnResourceManagerDriver.createTaskExecutorLaunchContextnodeManagerClient.startContainerAsync这里应该是交给yarn来调度了,而createTaskExecutorLaunchContext内部会封装启动命令这里的mainClass是YarnTaskExecutorRunnerUtils.createTaskExecutorContext( flinkConfig, yarnConfig, configuration, taskManagerParameters, taskManagerDynamicProperties, currDir, YarnTaskExecutorRunner.class, log);YarnTaskExecutorRunner的main入口public static void main(String[] args) { EnvironmentInformation.logEnvironmentInfo(LOG, \"YARN TaskExecutor runner\", args); SignalHandler.register(LOG); JvmShutdownSafeguard.installAsShutdownHook(LOG); runTaskManagerSecurely(args);}private static void runTaskManagerSecurely(String[] args) { Configuration configuration = null; try { LOG.debug(\"All environment variables: {}\", ENV); final String currDir = ENV.get(Environment.PWD.key()); LOG.info(\"Current working Directory: {}\", currDir); configuration = TaskManagerRunner.loadConfiguration(args); setupAndModifyConfiguration(configuration, currDir, ENV); } catch (Throwable t) { LOG.error(\"YARN TaskManager initialization failed.\", t); System.exit(INIT_ERROR_EXIT_CODE); } TaskManagerRunner.runTaskManagerProcessSecurely(Preconditions.checkNotNull(configuration));}TaskManagerRunner.runTaskManagerProcessSecurelyTaskManagerRunner.runTaskManagerexitCode =SecurityUtils.getInstalledContext().runSecured(() -&gt; runTaskManager(configuration, pluginManager));public static int runTaskManager(Configuration configuration, PluginManager pluginManager)throws Exception { final TaskManagerRunner taskManagerRunner; try { //创建并启动taskManagerRunner， //注意这里的TaskManagerRunner::createTaskExecutorService //跟后边taskExecutorServiceFactory.createTaskExecutor关联起来看 taskManagerRunner = new TaskManagerRunner( configuration, pluginManager, TaskManagerRunner::createTaskExecutorService); taskManagerRunner.start(); } catch (Exception exception) { throw new FlinkException(\"Failed to start the TaskManagerRunner.\", exception); } try { return taskManagerRunner.getTerminationFuture().get().getExitCode(); } catch (Throwable t) { throw new FlinkException( \"Unexpected failure during runtime of TaskManagerRunner.\", ExceptionUtils.stripExecutionException(t)); }}TaskManagerRunner::createTaskExecutorService创建TaskExecutor，包装成TaskExecutorToServiceAdapterpublic static TaskExecutorService createTaskExecutorService( Configuration configuration, ResourceID resourceID, RpcService rpcService, HighAvailabilityServices highAvailabilityServices, HeartbeatServices heartbeatServices, MetricRegistry metricRegistry, BlobCacheService blobCacheService, boolean localCommunicationOnly, ExternalResourceInfoProvider externalResourceInfoProvider, WorkingDirectory workingDirectory, FatalErrorHandler fatalErrorHandler)throws Exception { final TaskExecutor taskExecutor = startTaskManager( configuration, resourceID, rpcService, highAvailabilityServices, heartbeatServices, metricRegistry, blobCacheService, localCommunicationOnly, externalResourceInfoProvider, workingDirectory, fatalErrorHandler); return TaskExecutorToServiceAdapter.createFor(taskExecutor);}TaskManagerRunner的start方法taskExecutorService就是上边的TaskExecutorToServiceAdapter，就是包装的TaskExecutorpublic void start() throws Exception { synchronized (lock) { startTaskManagerRunnerServices(); // taskExecutorService.start(); }}TaskManagerRunner.startTaskManagerRunnerServices方法比较长,private void startTaskManagerRunnerServices() throws Exception { synchronized (lock) { rpcSystem = RpcSystem.load(configuration); this.executor = Executors.newScheduledThreadPool( Hardware.getNumberCPUCores(), new ExecutorThreadFactory(\"taskmanager-future\")); highAvailabilityServices = HighAvailabilityServicesUtils.createHighAvailabilityServices( configuration, executor, AddressResolution.NO_ADDRESS_RESOLUTION, rpcSystem, this); JMXService.startInstance(configuration.getString(JMXServerOptions.JMX_SERVER_PORT)); rpcService = createRpcService(configuration, highAvailabilityServices, rpcSystem); this.resourceId = getTaskManagerResourceID( configuration, rpcService.getAddress(), rpcService.getPort()); this.workingDirectory = ClusterEntrypointUtils.createTaskManagerWorkingDirectory( configuration, resourceId); LOG.info(\"Using working directory: {}\", workingDirectory); HeartbeatServices heartbeatServices = HeartbeatServices.fromConfiguration(configuration); metricRegistry = new MetricRegistryImpl( MetricRegistryConfiguration.fromConfiguration( configuration, rpcSystem.getMaximumMessageSizeInBytes(configuration)), ReporterSetup.fromConfiguration(configuration, pluginManager)); final RpcService metricQueryServiceRpcService = MetricUtils.startRemoteMetricsRpcService( configuration, rpcService.getAddress(), configuration.getString(TaskManagerOptions.BIND_HOST), rpcSystem); metricRegistry.startQueryService(metricQueryServiceRpcService, resourceId.unwrap()); blobCacheService = BlobUtils.createBlobCacheService( configuration, Reference.borrowed(workingDirectory.unwrap().getBlobStorageDirectory()), highAvailabilityServices.createBlobStore(), null); final ExternalResourceInfoProvider externalResourceInfoProvider = ExternalResourceUtils.createStaticExternalResourceInfoProviderFromConfig( configuration, pluginManager); taskExecutorService = taskExecutorServiceFactory.createTaskExecutor( this.configuration, this.resourceId.unwrap(), rpcService, highAvailabilityServices, heartbeatServices, metricRegistry, blobCacheService, false, externalResourceInfoProvider, workingDirectory.unwrap(), this); handleUnexpectedTaskExecutorServiceTermination(); MemoryLogger.startIfConfigured( LOG, configuration, terminationFuture.thenAccept(ignored -&gt; {})); }}taskExecutorService.start();TaskExecutor也是一个RpcEndpoint，start()之后会回调它的onStart()方法；直接看TaskExecutor的Onstart就好了public void onStart() throws Exception { try { startTaskExecutorServices(); } catch (Throwable t) { final TaskManagerException exception = new TaskManagerException( String.format(\"Could not start the TaskExecutor %s\", getAddress()), t); onFatalError(exception); throw exception; } startRegistrationTimeout();}TaskExecutor.onStart()–&gt;TaskExecutor.startTaskExecutorServicesprivate void startTaskExecutorServices() throws Exception { try { // start by connecting to the ResourceManager resourceManagerLeaderRetriever.start(new ResourceManagerLeaderListener()); // tell the task slot table who's responsible for the task slot actions taskSlotTable.start(new SlotActionsImpl(), getMainThreadExecutor()); // start the job leader service jobLeaderService.start( getAddress(), getRpcService(), haServices, new JobLeaderListenerImpl()); fileCache = new FileCache( taskManagerConfiguration.getTmpDirectories(), blobCacheService.getPermanentBlobService()); } catch (Exception e) { handleStartTaskExecutorServicesException(e); }}ResourceManagerLeaderListener回调方法notifyOfNewResourceManagerLeaderprivate final class ResourceManagerLeaderListener implements LeaderRetrievalListener { @Override public void notifyLeaderAddress(final String leaderAddress, final UUID leaderSessionID) { runAsync( () -&gt; notifyOfNewResourceManagerLeader( leaderAddress, ResourceManagerId.fromUuidOrNull(leaderSessionID))); } @Override public void handleError(Exception exception) { onFatalError(exception); }}reconnectToResourceManager()tryConnectToResourceManager()connectToResourceManager()启动一个resourceManagerConnection（TaskExecutorToResourceManagerConnection）private void connectToResourceManager() { assert (resourceManagerAddress != null); assert (establishedResourceManagerConnection == null); assert (resourceManagerConnection == null); log.info(\"Connecting to ResourceManager {}.\", resourceManagerAddress); final TaskExecutorRegistration taskExecutorRegistration = new TaskExecutorRegistration( getAddress(), getResourceID(), unresolvedTaskManagerLocation.getDataPort(), hardwareDescription, taskManagerConfiguration.getDefaultSlotResourceProfile(), taskManagerConfiguration.getTotalResourceProfile()); resourceManagerConnection = new TaskExecutorToResourceManagerConnection( log, getRpcService(), taskManagerConfiguration.getRetryingRegistrationConfiguration(), resourceManagerAddress.getAddress(), resourceManagerAddress.getResourceManagerId(), getMainThreadExecutor(), new ResourceManagerRegistrationListener(), taskExecutorRegistration); //启动TaskExecutorToResourceManagerConnection resourceManagerConnection.start();}resourceManagerConnection启动后向RM注册public void start() { checkState(!closed, \"The RPC connection is already closed\"); checkState( !isConnected() &amp;&amp; pendingRegistration == null, \"The RPC connection is already started\"); final RetryingRegistration&lt;F, G, S, R&gt; newRegistration = createNewRegistration(); if (REGISTRATION_UPDATER.compareAndSet(this, null, newRegistration)) { //向RM注册 newRegistration.startRegistration(); } else { // concurrent start operation newRegistration.cancel(); }}rpc调用RM注册TaskExecutorRetryingRegistration.startRegistration()RetryingRegistration.register()ResourceManagerRegistration.invokeRegistration()protected CompletableFuture&lt;RegistrationResponse&gt; invokeRegistration( ResourceManagerGateway resourceManager, ResourceManagerId fencingToken, long timeoutMillis)throws Exception { Time timeout = Time.milliseconds(timeoutMillis); //rpc调用RM注册TaskExecutor return resourceManager.registerTaskExecutor(taskExecutorRegistration, timeout);}如何生成RetryingRegistration呢private RetryingRegistration&lt;F, G, S, R&gt; createNewRegistration() { RetryingRegistration&lt;F, G, S, R&gt; newRegistration = checkNotNull(generateRegistration()); CompletableFuture&lt;RetryingRegistration.RetryingRegistrationResult&lt;G, S, R&gt;&gt; future = newRegistration.getFuture(); //虽然generateRegistration看起来啥都没干,但是包装了一个CompleteFuture,需要关注该Future后续处理 //尤其是onRegistrationSuccess future.whenCompleteAsync( (RetryingRegistration.RetryingRegistrationResult&lt;G, S, R&gt; result, Throwable failure) -&gt; { if (failure != null) { if (failure instanceof CancellationException) { // we ignore cancellation exceptions because they originate from // cancelling // the RetryingRegistration log.debug( \"Retrying registration towards {} was cancelled.\", targetAddress); } else { // this future should only ever fail if there is a bug, not if the // registration is declined onRegistrationFailure(failure); } } else { if (result.isSuccess()) { targetGateway = result.getGateway(); //ResourceManagerConnection onRegistrationSuccess(result.getSuccess()); } else if (result.isRejection()) { onRegistrationRejection(result.getRejection()); } else { throw new IllegalArgumentException( String.format( \"Unknown retrying registration response: %s.\", result)); } } }, executor); return newRegistration;}JobMaster.ResourceManagerConnection跟task注册一样调用invokeRegistration注册protected RetryingRegistration&lt;ResourceManagerId,ResourceManagerGateway,JobMasterRegistrationSuccess,RegistrationResponse.Rejection&gt;generateRegistration() { return new RetryingRegistration&lt; ResourceManagerId, ResourceManagerGateway, JobMasterRegistrationSuccess, RegistrationResponse.Rejection&gt;( log, getRpcService(), \"ResourceManager\", ResourceManagerGateway.class, getTargetAddress(), getTargetLeaderId(), jobMasterConfiguration.getRetryingRegistrationConfiguration()) { @Override protected CompletableFuture&lt;RegistrationResponse&gt; invokeRegistration( ResourceManagerGateway gateway, ResourceManagerId fencingToken, long timeoutMillis) { Time timeout = Time.milliseconds(timeoutMillis); //注册JobManager return gateway.registerJobManager( jobMasterId, jobManagerResourceID, jobManagerRpcAddress, jobID, timeout); } };}//注册成功回调protected void onRegistrationSuccess(final JobMasterRegistrationSuccess success) { runAsync( () -&gt; { // filter out outdated connections //noinspection ObjectEquality if (this == resourceManagerConnection) { establishResourceManagerConnection(success); } });}jobMaster通过slotPool向RM申请slotprivate void establishResourceManagerConnection(final JobMasterRegistrationSuccess success) { final ResourceManagerId resourceManagerId = success.getResourceManagerId(); // verify the response with current connection if (resourceManagerConnection != null &amp;&amp; Objects.equals( resourceManagerConnection.getTargetLeaderId(), resourceManagerId)) { log.info( \"JobManager successfully registered at ResourceManager, leader id: {}.\", resourceManagerId); final ResourceManagerGateway resourceManagerGateway = resourceManagerConnection.getTargetGateway(); final ResourceID resourceManagerResourceId = success.getResourceManagerResourceId(); establishedResourceManagerConnection = new EstablishedResourceManagerConnection( resourceManagerGateway, resourceManagerResourceId); //通过slotPool向RM申请slot slotPool.connectToResourceManager(resourceManagerGateway); resourceManagerHeartbeatManager.monitorTarget( resourceManagerResourceId, new HeartbeatTarget&lt;Void&gt;() { @Override public void receiveHeartbeat(ResourceID resourceID, Void payload) { resourceManagerGateway.heartbeatFromJobManager(resourceID); } @Override public void requestHeartbeat(ResourceID resourceID, Void payload) { // request heartbeat will never be called on the job manager side } }); } else { log.debug( \"Ignoring resource manager connection to {} because it's duplicated or outdated.\", resourceManagerId); }}" }, { "title": "Flink1.15 Task源码分析", "url": "/posts/submitTask/", "categories": "Flink1.15", "tags": "flink, realtime", "date": "2022-08-02 00:00:00 +0000", "snippet": "DefaultScheduler.allocateSlotsAndDeploypublic void allocateSlotsAndDeploy( final List&lt;ExecutionVertexDeploymentOption&gt; executionVertexDeploymentOptions) { validateDeploymentOptions(executionVertexDeploymentOptions); final Map&lt;ExecutionVertexID, ExecutionVertexDeploymentOption&gt; deploymentOptionsByVertex = groupDeploymentOptionsByVertexId(executionVertexDeploymentOptions); final List&lt;ExecutionVertexID&gt; verticesToDeploy = executionVertexDeploymentOptions.stream() .map(ExecutionVertexDeploymentOption::getExecutionVertexId) .collect(Collectors.toList()); final Map&lt;ExecutionVertexID, ExecutionVertexVersion&gt; requiredVersionByVertex = executionVertexVersioner.recordVertexModifications(verticesToDeploy); transitionToScheduled(verticesToDeploy); //分配slots final List&lt;SlotExecutionVertexAssignment&gt; slotExecutionVertexAssignments = allocateSlots(executionVertexDeploymentOptions); final List&lt;DeploymentHandle&gt; deploymentHandles = createDeploymentHandles( requiredVersionByVertex, deploymentOptionsByVertex, slotExecutionVertexAssignments); //调用submitTask提交task waitForAllSlotsAndDeploy(deploymentHandles);}DefaultScheduler.waitForAllSlotsAndDeployprivate void waitForAllSlotsAndDeploy(final List&lt;DeploymentHandle&gt; deploymentHandles) { FutureUtils.assertNoException( assignAllResourcesAndRegisterProducedPartitions(deploymentHandles) .handle(deployAll(deploymentHandles)));}DefaultScheduler.deployAllprivate BiFunction&lt;Void, Throwable, Void&gt; deployAll( final List&lt;DeploymentHandle&gt; deploymentHandles) { return (ignored, throwable) -&gt; { propagateIfNonNull(throwable); for (final DeploymentHandle deploymentHandle : deploymentHandles) { final SlotExecutionVertexAssignment slotExecutionVertexAssignment = deploymentHandle.getSlotExecutionVertexAssignment(); final CompletableFuture&lt;LogicalSlot&gt; slotAssigned = slotExecutionVertexAssignment.getLogicalSlotFuture(); checkState(slotAssigned.isDone()); //命名deployOrHandleError FutureUtils.assertNoException( slotAssigned.handle(deployOrHandleError(deploymentHandle))); } return null; };}DefaultScheduler.deployOrHandleErrorprivate BiFunction&lt;Object, Throwable, Void&gt; deployOrHandleError( final DeploymentHandle deploymentHandle) { final ExecutionVertexVersion requiredVertexVersion = deploymentHandle.getRequiredVertexVersion(); final ExecutionVertexID executionVertexId = requiredVertexVersion.getExecutionVertexId(); return (ignored, throwable) -&gt; { if (executionVertexVersioner.isModified(requiredVertexVersion)) { log.debug( \"Refusing to deploy execution vertex {} because this deployment was \" + \"superseded by another deployment\", executionVertexId); return null; } if (throwable == null) { deployTaskSafe(executionVertexId); } else { handleTaskDeploymentFailure(executionVertexId, throwable); } return null; };}DefaultScheduler.deployTaskSafe依据executionVertexId获取到executionVertexprivate void deployTaskSafe(final ExecutionVertexID executionVertexId) { try { final ExecutionVertex executionVertex = getExecutionVertex(executionVertexId); executionVertexOperations.deploy(executionVertex); } catch (Throwable e) { handleTaskDeploymentFailure(executionVertexId, e); }}//依据JobVertexId和SubtaskIndex从executionGraph获取ExecutionVertexpublic ExecutionVertex getExecutionVertex(final ExecutionVertexID executionVertexId) { return executionGraph .getAllVertices() .get(executionVertexId.getJobVertexId()) .getTaskVertices()[executionVertexId.getSubtaskIndex()];}DefaultExecutionVertexOperations内部实际调用的executionVertex.deploy()public class DefaultExecutionVertexOperations implements ExecutionVertexOperations { @Override public void deploy(final ExecutionVertex executionVertex) throws JobException { executionVertex.deploy(); } @Override public CompletableFuture&lt;?&gt; cancel(final ExecutionVertex executionVertex) { return executionVertex.cancel(); } @Override public void markFailed(final ExecutionVertex executionVertex, final Throwable cause) { executionVertex.markFailed(cause); }}ExecutionVertex.deploy()public void deploy() throws JobException { //这里的currentExecution是Execution currentExecution.deploy();}Execution.deploy();经过slot以及状态校验后，提交给TMfinal TaskDeploymentDescriptor deployment =TaskDeploymentDescriptorFactory.fromExecutionVertex(vertex, attemptNumber).createDeploymentDescriptor( slot.getAllocationId(), taskRestore, producedPartitions.values());// null taskRestore to let it be GC'edtaskRestore = null;final TaskManagerGateway taskManagerGateway = slot.getTaskManagerGateway();final ComponentMainThreadExecutor jobMasterMainThreadExecutor =vertex.getExecutionGraphAccessor().getJobMasterMainThreadExecutor();getVertex().notifyPendingDeployment(this);// We run the submission in the future executor so that the serialization of large TDDs// does not block// the main thread and sync back to the main thread once submission is completed.//RpcTaskManagerGatewayCompletableFuture.supplyAsync( () -&gt; taskManagerGateway.submitTask(deployment, rpcTimeout), executor).thenCompose(Function.identity()).whenCompleteAsync( (ack, failure) -&gt; { if (failure == null) { vertex.notifyCompletedDeployment(this); } else { final Throwable actualFailure = ExceptionUtils.stripCompletionException(failure); if (actualFailure instanceof TimeoutException) { String taskname = vertex.getTaskNameWithSubtaskIndex() + \" (\" + attemptId + ')'; markFailed( new Exception( \"Cannot deploy task \" + taskname + \" - TaskManager (\" + getAssignedResourceLocation() + \") not responding after a rpcTimeout of \" + rpcTimeout, actualFailure)); } else { markFailed(actualFailure); } } }, jobMasterMainThreadExecutor);RpcTaskManagerGateway.submitTaskpublic CompletableFuture&lt;Acknowledge&gt; submitTask(TaskDeploymentDescriptor tdd, Time timeout) { return taskExecutorGateway.submitTask(tdd, jobMasterId, timeout);}TaskExecutorGatewayDecoratorBase.submitTaskpublic CompletableFuture&lt;Acknowledge&gt; submitTask( TaskDeploymentDescriptor tdd, JobMasterId jobMasterId, Time timeout) { return originalGateway.submitTask(tdd, jobMasterId, timeout);}TaskExecutor.submitTaskTask task =new Task();try { //判断下是否分配了slot，且slot是否存活 taskAdded = taskSlotTable.addTask(task);} catch (SlotNotFoundException | SlotNotActiveException e) { throw new TaskSubmissionException(\"Could not submit task.\", e);} ///如果taskSlotTable添加任务成功,则启动task，if (taskAdded) { task.startTaskThread(); setupResultPartitionBookkeeping( tdd.getJobId(), tdd.getProducedPartitions(), task.getTerminationFuture()); return CompletableFuture.completedFuture(Acknowledge.get());} else { final String message = \"TaskManager already contains a task for id \" + task.getExecutionId() + '.'; log.debug(message); throw new TaskSubmissionException(message);}Task.startTaskThread()这里的executingThread实际上是封装的Task// finally, create the executing thread, but do not start itexecutingThread = new Thread(TASK_THREADS_GROUP, this, taskNameWithSubtask);public void startTaskThread() { executingThread.start();}所以逻辑还是在Task的run（）方法public void run() { try { doRun(); } finally { terminationFuture.complete(executionState); }}Task.doRun的代码有点长，主要逻辑try { // now load and instantiate the task's invokable code invokable = loadAndInstantiateInvokable( userCodeClassLoader.asClassLoader(), nameOfInvokableClass, env);} finally { FlinkSecurityManager.unmonitorUserSystemExitForCurrentThread();}// ----------------------------------------------------------------// actual task core work// ----------------------------------------------------------------// we must make strictly sure that the invokable is accessible to the cancel() call// by the time we switched to running.this.invokable = invokable;restoreAndInvoke(invokable);Task.restoreAndInvoke 如其名主要两步finalInvokable::restore和finalInvokable::invokeprivate void restoreAndInvoke(TaskInvokable finalInvokable) throws Exception { try { // switch to the INITIALIZING state, if that fails, we have been canceled/failed in the // meantime if (!transitionState(ExecutionState.DEPLOYING, ExecutionState.INITIALIZING)) { throw new CancelTaskException(); } taskManagerActions.updateTaskExecutionState( new TaskExecutionState(executionId, ExecutionState.INITIALIZING)); // make sure the user code classloader is accessible thread-locally executingThread.setContextClassLoader(userCodeClassLoader.asClassLoader()); runWithSystemExitMonitoring(finalInvokable::restore); if (!transitionState(ExecutionState.INITIALIZING, ExecutionState.RUNNING)) { throw new CancelTaskException(); } // notify everyone that we switched to running taskManagerActions.updateTaskExecutionState( new TaskExecutionState(executionId, ExecutionState.RUNNING)); runWithSystemExitMonitoring(finalInvokable::invoke); } catch (Throwable throwable) { try { runWithSystemExitMonitoring(() -&gt; finalInvokable.cleanUp(throwable)); } catch (Throwable cleanUpThrowable) { throwable.addSuppressed(cleanUpThrowable); } throw throwable; } runWithSystemExitMonitoring(() -&gt; finalInvokable.cleanUp(null));}StreamTask.restorepublic final void restore() throws Exception { restoreInternal();}StreamTask.invokepublic final void invoke() throws Exception { // Allow invoking method 'invoke' without having to call 'restore' before it. if (!isRunning) { LOG.debug(\"Restoring during invoke will be called.\"); restoreInternal(); } // final check to exit early before starting to run ensureNotCanceled(); scheduleBufferDebloater(); // let the task do its work runMailboxLoop(); // if this left the run() method cleanly despite the fact that this was canceled, // make sure the \"clean shutdown\" is not attempted ensureNotCanceled(); afterInvoke();}//public void runMailboxLoop() throws Exception { mailboxProcessor.runMailboxLoop();}mailboxProcessor.runMailboxLoop()public void runMailboxLoop() throws Exception { suspended = !mailboxLoopRunning; final TaskMailbox localMailbox = mailbox; checkState( localMailbox.isMailboxThread(), \"Method must be executed by declared mailbox thread!\"); assert localMailbox.getState() == TaskMailbox.State.OPEN : \"Mailbox must be opened!\"; final MailboxController defaultActionContext = new MailboxController(this); while (isNextLoopPossible()) { // The blocking `processMail` call will not return until default action is available. processMail(localMailbox, false); if (isNextLoopPossible()) { mailboxDefaultAction.runDefaultAction( defaultActionContext); // lock is acquired inside default action as needed } }}mailboxDefaultAction是MailboxProcessor构造函数参数public MailboxProcessor( MailboxDefaultAction mailboxDefaultAction, TaskMailbox mailbox, StreamTaskActionExecutor actionExecutor) { this.mailboxDefaultAction = Preconditions.checkNotNull(mailboxDefaultAction); this.actionExecutor = Preconditions.checkNotNull(actionExecutor); this.mailbox = Preconditions.checkNotNull(mailbox); this.mailboxLoopRunning = true; this.suspendedDefaultAction = null;}this.mailboxProcessor =new MailboxProcessor(this::processInput, mailbox, actionExecutor);也就是mailboxDefaultAction是StreamTask.processInputprotected void processInput(MailboxDefaultAction.Controller controller) throws Exception { DataInputStatus status = inputProcessor.processInput();}StreamMultipleInputProcessor.processInputStreamOneInputProcessor.processInputpublic DataInputStatus processInput() throws Exception { DataInputStatus status = input.emitNext(output); if (status == DataInputStatus.END_OF_DATA) { endOfInputAware.endInput(input.getInputIndex() + 1); output = new FinishedDataOutput&lt;&gt;(); } else if (status == DataInputStatus.END_OF_RECOVERY) { if (input instanceof RecoverableStreamTaskInput) { input = ((RecoverableStreamTaskInput&lt;IN&gt;) input).finishRecovery(); } return DataInputStatus.MORE_AVAILABLE; } return status;}AbstractStreamTaskNetworkInput.emitNext()public DataInputStatus emitNext(DataOutput&lt;T&gt; output) throws Exception { while (true) { // get the stream element from the deserializer if (currentRecordDeserializer != null) { RecordDeserializer.DeserializationResult result; try { result = currentRecordDeserializer.getNextRecord(deserializationDelegate); } catch (IOException e) { throw new IOException( String.format(\"Can't get next record for channel %s\", lastChannel), e); } if (result.isBufferConsumed()) { currentRecordDeserializer = null; } if (result.isFullRecord()) { processElement(deserializationDelegate.getInstance(), output); return DataInputStatus.MORE_AVAILABLE; } } Optional&lt;BufferOrEvent&gt; bufferOrEvent = checkpointedInputGate.pollNext(); if (bufferOrEvent.isPresent()) { // return to the mailbox after receiving a checkpoint barrier to avoid processing of // data after the barrier before checkpoint is performed for unaligned checkpoint // mode if (bufferOrEvent.get().isBuffer()) { processBuffer(bufferOrEvent.get()); } else { return processEvent(bufferOrEvent.get()); } } else { if (checkpointedInputGate.isFinished()) { checkState( checkpointedInputGate.getAvailableFuture().isDone(), \"Finished BarrierHandler should be available\"); return DataInputStatus.END_OF_INPUT; } return DataInputStatus.NOTHING_AVAILABLE; } }}" }, { "title": "Flink1.15 CKP InputData&OutPutData源码分析", "url": "/posts/InputData&OutputData/", "categories": "Flink1.15", "tags": "flink, realtime", "date": "2022-07-28 00:00:00 +0000", "snippet": "AlternatingCollectingBarriers.alignmentTimeoutpublic BarrierHandlerState alignmentTimeout( Controller controller, CheckpointBarrier checkpointBarrier)throws IOException, CheckpointException { state.prioritizeAllAnnouncements(); CheckpointBarrier unalignedBarrier = checkpointBarrier.asUnaligned(); //初始化ckp controller.initInputsCheckpoint(unalignedBarrier); for (CheckpointableInput input : state.getInputs()) { input.checkpointStarted(unalignedBarrier); } controller.triggerGlobalCheckpoint(unalignedBarrier); //转换位Collecting return new AlternatingCollectingBarriersUnaligned(true, state);}AlternatingWaitingForFirstBarrierUnaligned.barrierReceivedpublic BarrierHandlerState barrierReceived( Controller controller, InputChannelInfo channelInfo, CheckpointBarrier checkpointBarrier, boolean markChannelBlocked)throws CheckpointException, IOException { // we received an out of order aligned barrier, we should book keep this channel as blocked, // as it is being blocked by the credit-based network if (markChannelBlocked &amp;&amp; !checkpointBarrier.getCheckpointOptions().isUnalignedCheckpoint()) { channelState.blockChannel(channelInfo); } CheckpointBarrier unalignedBarrier = checkpointBarrier.asUnaligned(); //初始化 controller.initInputsCheckpoint(unalignedBarrier); for (CheckpointableInput input : channelState.getInputs()) { input.checkpointStarted(unalignedBarrier); } //出发ckp controller.triggerGlobalCheckpoint(unalignedBarrier); if (controller.allBarriersReceived()) { for (CheckpointableInput input : channelState.getInputs()) { input.checkpointStopped(unalignedBarrier.getId()); } return stopCheckpoint(); } return new AlternatingCollectingBarriersUnaligned(alternating, channelState);}public void initInputsCheckpoint(CheckpointBarrier checkpointBarrier)throws CheckpointException { checkState(subTaskCheckpointCoordinator != null); long barrierId = checkpointBarrier.getId(); subTaskCheckpointCoordinator.initInputsCheckpoint( barrierId, checkpointBarrier.getCheckpointOptions());}//SubtaskCheckpointCoordinatorImplpublic void initInputsCheckpoint(long id, CheckpointOptions checkpointOptions)throws CheckpointException { //非对齐模式 if (checkpointOptions.isUnalignedCheckpoint()) { channelStateWriter.start(id, checkpointOptions); prepareInflightDataSnapshot(id); }}prepareInflightDataSnapshot主要是将将上游数据添加到inputData,见StreamTask//prepareInputSnapshot这个是StreamTask实例化就生成的，也就是构造方法里private void prepareInflightDataSnapshot(long checkpointId) throws CheckpointException { prepareInputSnapshot .apply(channelStateWriter, checkpointId) .whenComplete( (unused, ex) -&gt; { if (ex != null) { channelStateWriter.abort( checkpointId, ex, false /* result is needed and cleaned by getWriteResult */); } else { channelStateWriter.finishInput(checkpointId); } });}StreamTask//StreamTask 实例化subtaskCheckpointCoordinatorthis.subtaskCheckpointCoordinator =new SubtaskCheckpointCoordinatorImpl( checkpointStorageAccess, getName(), actionExecutor, getCancelables(), getAsyncOperationsThreadPool(), environment, this, configuration.isUnalignedCheckpointsEnabled(), configuration .getConfiguration() .get( ExecutionCheckpointingOptions .ENABLE_CHECKPOINTS_AFTER_TASKS_FINISH), this::prepareInputSnapshot);//StreamTaskprivate CompletableFuture&lt;Void&gt; prepareInputSnapshot( ChannelStateWriter channelStateWriter, long checkpointId) throws CheckpointException { if (inputProcessor == null) { return FutureUtils.completedVoidFuture(); } return inputProcessor.prepareSnapshot(channelStateWriter, checkpointId);}StreamMultipleInputProcessor.prepareSnapshotStreamOneInputProcessor.prepareSnapshotStreamTaskNetworkInput.prepareSnapshotchannelStateWriter.addInputData//StreamTaskNetworkInputpublic CompletableFuture&lt;Void&gt; prepareSnapshot( ChannelStateWriter channelStateWriter, long checkpointId) throws CheckpointException { for (Map.Entry&lt; InputChannelInfo, SpillingAdaptiveSpanningRecordDeserializer&lt; DeserializationDelegate&lt;StreamElement&gt;&gt;&gt; e : recordDeserializers.entrySet()) { try { // channelStateWriter.addInputData( checkpointId, e.getKey(), ChannelStateWriter.SEQUENCE_NUMBER_UNKNOWN, e.getValue().getUnconsumedBuffer()); } catch (IOException ioException) { throw new CheckpointException(CheckpointFailureReason.IO_EXCEPTION, ioException); } } return checkpointedInputGate.getAllBarriersReceivedFuture(checkpointId);}向下游广播checkpointEventSubtaskCheckpointCoordinatorImpl,这里broadcastEvent跟channelStateWriter.finishOutput连起来看看注释是说broadcastEvent已经将数据写到output data了//SubtaskCheckpointCoordinatorImpl// Step (2): Send the checkpoint barrier downstreamoperatorChain.broadcastEvent( new CheckpointBarrier(metadata.getCheckpointId(), metadata.getTimestamp(), options), options.isUnalignedCheckpoint());// Step (3): Prepare to spill the in-flight buffers for input and outputif (options.isUnalignedCheckpoint()) { // output data already written while broadcasting event channelStateWriter.finishOutput(metadata.getCheckpointId());}//OperatorChainpublic void broadcastEvent(AbstractEvent event, boolean isPriorityEvent) throws IOException { for (RecordWriterOutput&lt;?&gt; streamOutput : streamOutputs) { streamOutput.broadcastEvent(event, isPriorityEvent); }}//RecordWriterOutputpublic void broadcastEvent(AbstractEvent event, boolean isPriorityEvent) throws IOException { if (isPriorityEvent &amp;&amp; event instanceof CheckpointBarrier &amp;&amp; !supportsUnalignedCheckpoints) { final CheckpointBarrier barrier = (CheckpointBarrier) event; event = barrier.withOptions(barrier.getCheckpointOptions().withUnalignedUnsupported()); isPriorityEvent = false; } recordWriter.broadcastEvent(event, isPriorityEvent);}//RecordWriterpublic void broadcastEvent(AbstractEvent event, boolean isPriorityEvent) throws IOException { targetPartition.broadcastEvent(event, isPriorityEvent); if (flushAlways) { flushAll(); }}targetPartition可以式pipeline,比如BufferWritingResultPartitionpublic void broadcastEvent(AbstractEvent event, boolean isPriorityEvent) throws IOException { checkInProduceState(); finishBroadcastBufferBuilder(); finishUnicastBufferBuilders(); try (BufferConsumer eventBufferConsumer = EventSerializer.toBufferConsumer(event, isPriorityEvent)) { totalWrittenBytes += ((long) eventBufferConsumer.getWrittenBytes() * numSubpartitions); for (ResultSubpartition subpartition : subpartitions) { // Retain the buffer so that it can be recycled by each channel of targetPartition subpartition.add(eventBufferConsumer.copy(), 0); } }}//PipelinedSubpartitionpublic void addRecovered(BufferConsumer bufferConsumer) throws IOException { NetworkActionsLogger.traceRecover( \"PipelinedSubpartition#addRecovered\", bufferConsumer, parent.getOwningTaskName(), subpartitionInfo); if (add(bufferConsumer, Integer.MIN_VALUE) == -1) { throw new IOException(\"Buffer consumer couldn't be added to ResultSubpartition\"); }}//PipelinedSubpartitionpublic int add(BufferConsumer bufferConsumer, int partialRecordLength) { return add(bufferConsumer, partialRecordLength, false);}//PipelinedSubpartitionprivate int add(BufferConsumer bufferConsumer, int partialRecordLength, boolean finish) { checkNotNull(bufferConsumer); final boolean notifyDataAvailable; int prioritySequenceNumber = -1; int newBufferSize; synchronized (buffers) { if (isFinished || isReleased) { bufferConsumer.close(); return -1; } //注意这里addBuffer // Add the bufferConsumer and update the stats if (addBuffer(bufferConsumer, partialRecordLength)) { prioritySequenceNumber = sequenceNumber; } updateStatistics(bufferConsumer); increaseBuffersInBacklog(bufferConsumer); notifyDataAvailable = finish || shouldNotifyDataAvailable(); isFinished |= finish; newBufferSize = bufferSize; } if (prioritySequenceNumber != -1) { notifyPriorityEvent(prioritySequenceNumber); } if (notifyDataAvailable) { notifyDataAvailable(); } return newBufferSize;}看注释addBuffer里处理bufferConsumerprivate boolean addBuffer(BufferConsumer bufferConsumer, int partialRecordLength) { assert Thread.holdsLock(buffers); //优先级类型，非对齐模式 if (bufferConsumer.getDataType().hasPriority()) { return processPriorityBuffer(bufferConsumer, partialRecordLength); } buffers.add(new BufferConsumerWithPartialRecordLength(bufferConsumer, partialRecordLength)); return false;}解析barrier时间，手机buffers内部数据，inflightBuffers写入outputDataprivate boolean processPriorityBuffer(BufferConsumer bufferConsumer, int partialRecordLength) { buffers.addPriorityElement( new BufferConsumerWithPartialRecordLength(bufferConsumer, partialRecordLength)); final int numPriorityElements = buffers.getNumPriorityElements(); //解析CheckpointBarrier CheckpointBarrier barrier = parseCheckpointBarrier(bufferConsumer); if (barrier != null) { checkState( barrier.getCheckpointOptions().isUnalignedCheckpoint(), \"Only unaligned checkpoints should be priority events\"); final Iterator&lt;BufferConsumerWithPartialRecordLength&gt; iterator = buffers.iterator(); Iterators.advance(iterator, numPriorityElements); List&lt;Buffer&gt; inflightBuffers = new ArrayList&lt;&gt;(); //迭代buffers，即BufferConsumer while (iterator.hasNext()) { BufferConsumer buffer = iterator.next().getBufferConsumer(); if (buffer.isBuffer()) { //如果式buffer,则加入inflightBuffers try (BufferConsumer bc = buffer.copy()) { inflightBuffers.add(bc.build()); } } } if (!inflightBuffers.isEmpty()) { //将inflightBuffers下入outputData channelStateWriter.addOutputData( barrier.getId(), subpartitionInfo, ChannelStateWriter.SEQUENCE_NUMBER_UNKNOWN, inflightBuffers.toArray(new Buffer[0])); } } return numPriorityElements == 1 &amp;&amp; !isBlocked; // if subpartition is blocked then downstream doesn't expect any // notifications}" }, { "title": "Flink1.15 CheckPoint restore源码分析", "url": "/posts/ckp_restore/", "categories": "Flink1.15", "tags": "flink, realtime", "date": "2022-07-26 00:00:00 +0000", "snippet": "当所有task成功后，执行completePendingCheckpoint()操作 将PendingCheckpoint 转成CompletedCheckpoint，并将CheckpointMetadata持久化 更新completedCheckpointStore 通知其他算子ack,执行commit```//CheckpointCoordinatorprivate void completePendingCheckpoint(PendingCheckpoint pendingCheckpoint)throws CheckpointException { final long checkpointId = pendingCheckpoint.getCheckpointID(); final CompletedCheckpoint completedCheckpoint; final CompletedCheckpoint lastSubsumed; final CheckpointProperties props = pendingCheckpoint.getProps(); completedCheckpointStore.getSharedStateRegistry().checkpointCompleted(checkpointId); try { //将PendingCheckpoint 转成CompletedCheckpoint completedCheckpoint = finalizeCheckpoint(pendingCheckpoint); // the pending checkpoint must be discarded after the finalization Preconditions.checkState(pendingCheckpoint.isDisposed() &amp;&amp; completedCheckpoint != null); //更新到completedCheckpointStore, //ZooKeeperStateHandleStore if (!props.isSavepoint()) { lastSubsumed = addCompletedCheckpointToStoreAndSubsumeOldest( checkpointId, completedCheckpoint, pendingCheckpoint.getCheckpointPlan().getTasksToCommitTo()); } else { lastSubsumed = null; } reportCompletedCheckpoint(completedCheckpoint); } finally { pendingCheckpoints.remove(checkpointId); //异步ack scheduleTriggerRequest(); } //ack--&gt;sendAcknowledgeMessages--&gt;notifyCheckpointComplete cleanupAfterCompletedCheckpoint( pendingCheckpoint, checkpointId, completedCheckpoint, lastSubsumed, props); } finalizeCheckpoint主要将PendingCheckpoint 转成CompletedCheckpoint，并持久化ckp元数据信息public CompletedCheckpoint finalizeCheckpoint( CheckpointsCleaner checkpointsCleaner, Runnable postCleanup, Executor executor)throws IOException {synchronized (lock) { checkState(!isDisposed(), \"checkpoint is discarded\"); checkState( isFullyAcknowledged(), \"Pending checkpoint has not been fully acknowledged yet\"); // make sure we fulfill the promise with an exception if something fails try { //填充operatorStates checkpointPlan.fulfillFinishedTaskStatus(operatorStates); //元数据信息 // write out the metadata final CheckpointMetadata savepoint = new CheckpointMetadata(checkpointId, operatorStates.values(), masterStates); final CompletedCheckpointStorageLocation finalizedLocation; //持久化到文件,注意返回位置信息finalizedLocation try (CheckpointMetadataOutputStream out = targetLocation.createMetadataOutputStream()) { Checkpoints.storeCheckpointMetadata(savepoint, out); finalizedLocation = out.closeAndFinalizeCheckpoint(); } //包括ckp元数据信息位置finalizedLocation，统计信息stats CompletedCheckpoint completed = new CompletedCheckpoint( jobId, checkpointId, checkpointTimestamp, System.currentTimeMillis(), operatorStates, masterStates, props, finalizedLocation, toCompletedCheckpointStats(finalizedLocation)); onCompletionPromise.complete(completed); // mark this pending checkpoint as disposed, but do NOT drop the state dispose(false, checkpointsCleaner, postCleanup, executor); return completed; } catch (Throwable t) { onCompletionPromise.completeExceptionally(t); ExceptionUtils.rethrowIOException(t); return null; // silence the compiler }} } ``` addCompletedCheckpointToStoreAndSubsumeOldest 更新completedCheckpointStore&lt;br /&gt;completedCheckpointStore的默认实现DefaultCompletedCheckpointStore，存储到zk&lt;br /&gt;还有一个是StandaloneCompletedCheckpointStore，主要是JM的内存 ``` private CompletedCheckpoint addCompletedCheckpointToStoreAndSubsumeOldest(long checkpointId,CompletedCheckpoint completedCheckpoint,List&lt;ExecutionVertex&gt; tasksToAbort) throws CheckpointException {try { final CompletedCheckpoint subsumedCheckpoint = completedCheckpointStore.addCheckpointAndSubsumeOldestOne( completedCheckpoint, checkpointsCleaner, this::scheduleTriggerRequest); // reset the force full snapshot flag, we should've completed at least one full // snapshot by now this.forceFullSnapshot = false; return subsumedCheckpoint;} catch (Exception exception) { if (exception instanceof PossibleInconsistentStateException) { LOG.warn( \"An error occurred while writing checkpoint {} to the underlying metadata\" + \" store. Flink was not able to determine whether the metadata was\" + \" successfully persisted. The corresponding state located at '{}'\" + \" won't be discarded and needs to be cleaned up manually.\", completedCheckpoint.getCheckpointID(), completedCheckpoint.getExternalPointer()); } else { // we failed to store the completed checkpoint. Let's clean up checkpointsCleaner.cleanCheckpointOnFailedStoring(completedCheckpoint, executor); } reportFailedCheckpoint(checkpointId, exception); sendAbortedMessages(tasksToAbort, checkpointId, completedCheckpoint.getTimestamp()); throw new CheckpointException( \"Could not complete the pending checkpoint \" + checkpointId + '.', CheckpointFailureReason.FINALIZE_CHECKPOINT_FAILURE, exception);} } ``` HA支持zookeeper或者k8s,对应两种实现ZooKeeperStateHandleStore或者KubernetesStateHandleStore ``` //DefaultCompletedCheckpointStore public CompletedCheckpoint addCheckpointAndSubsumeOldestOne(final CompletedCheckpoint checkpoint,CheckpointsCleaner checkpointsCleaner,Runnable postCleanup) throws Exception {Preconditions.checkState(running.get(), \"Checkpoint store has already been shutdown.\");checkNotNull(checkpoint, \"Checkpoint\");final String path =completedCheckpointStoreUtil.checkpointIDToName(checkpoint.getCheckpointID());//HA支持zookeeper或者k8s,对应两种实现ZooKeeperStateHandleStore或者KubernetesStateHandleStore// Now add the new one. If it fails, we don't want to lose existing data.checkpointStateHandleStore.addAndLock(path, checkpoint);completedCheckpoints.addLast(checkpoint);Optional&lt;CompletedCheckpoint&gt; subsume =CheckpointSubsumeHelper.subsume( completedCheckpoints, maxNumberOfCheckpointsToRetain, completedCheckpoint -&gt; tryRemoveCompletedCheckpoint( completedCheckpoint, completedCheckpoint.shouldBeDiscardedOnSubsume(), checkpointsCleaner, postCleanup));unregisterUnusedState(completedCheckpoints);if (subsume.isPresent()) { LOG.debug(\"Added {} to {} without any older checkpoint to subsume.\", checkpoint, path);} else { LOG.debug(\"Added {} to {} and subsume {}.\", checkpoint, path, subsume);}return subsume.orElse(null); } ``` ZooKeeperStateHandleStore ``` public RetrievableStateHandle&lt;T&gt; addAndLock(String pathInZooKeeper, T state) throws PossibleInconsistentStateException, Exception {checkNotNull(pathInZooKeeper, \"Path in ZooKeeper\");checkNotNull(state, \"State\");final String path = normalizePath(pathInZooKeeper);final Optional&lt;Stat&gt; maybeStat = getStat(path);if (maybeStat.isPresent()) { if (isNotMarkedForDeletion(maybeStat.get())) { throw new AlreadyExistException( String.format(\"ZooKeeper node %s already exists.\", path)); } Preconditions.checkState( releaseAndTryRemove(path), \"The state is marked for deletion and, therefore, should be deletable.\");}这里store是FileSystemStateStorageHelperfinal RetrievableStateHandle&lt;T&gt; storeHandle = storage.store(state);final byte[] serializedStoreHandle = serializeOrDiscard(storeHandle);try { writeStoreHandleTransactionally(path, serializedStoreHandle); return storeHandle;} catch (KeeperException.NodeExistsException e) { // Transactions are not idempotent in the curator version we're currently using, so it // is actually possible that we've re-tried a transaction that has already succeeded. // We've ensured that the node hasn't been present prior executing the transaction, so // we can assume that this is a result of the retry mechanism. return storeHandle;} catch (Exception e) { if (indicatesPossiblyInconsistentState(e)) { throw new PossibleInconsistentStateException(e); } // In case of any other failure, discard the state and rethrow the exception. storeHandle.discardState(); throw e;} } ``` FileSystemStateStorageHelper ``` public RetrievableStateHandle&lt;T&gt; store(T state) throws Exception {Exception latestException = null;for (int attempt = 0; attempt &lt; 10; attempt++) { Path filePath = getNewFilePath(); //写文件 try (FSDataOutputStream outStream = fs.create(filePath, FileSystem.WriteMode.NO_OVERWRITE)) { InstantiationUtil.serializeObject(outStream, state); return new RetrievableStreamStateHandle&lt;T&gt;(filePath, outStream.getPos()); } catch (Exception e) { latestException = e; }}throw new Exception(\"Could not open output stream for state backend\", latestException); } ``` 恢复 ``` //创建 completedCheckpointStore this.completedCheckpointStore = SchedulerUtils.createCompletedCheckpointStoreIfCheckpointingIsEnabled(jobGraph,jobMasterConfiguration,checkNotNull(checkpointRecoveryFactory),ioExecutor,log); //创建与 this.executionGraph = createAndRestoreExecutionGraph(completedCheckpointStore,checkpointsCleaner,checkpointIdCounter,initializationTimestamp,mainThreadExecutor,jobStatusListener,vertexParallelismStore); ``` DefaultExecutionGraphFactory&lt;br /&gt;如果checkpointCoordinator存在则尝试从Checkpoint恢复&lt;br /&gt;如果ckp没有，则尝试从savepoint恢复 ``` public ExecutionGraph createAndRestoreExecutionGraph(JobGraph jobGraph,CompletedCheckpointStore completedCheckpointStore,CheckpointsCleaner checkpointsCleaner,CheckpointIDCounter checkpointIdCounter,TaskDeploymentDescriptorFactory.PartitionLocationConstraint partitionLocationConstraint,long initializationTimestamp,VertexAttemptNumberStore vertexAttemptNumberStore,VertexParallelismStore vertexParallelismStore,ExecutionStateUpdateListener executionStateUpdateListener,Logger log) throws Exception {ExecutionDeploymentListener executionDeploymentListener =new ExecutionDeploymentTrackerDeploymentListenerAdapter(executionDeploymentTracker);ExecutionStateUpdateListener combinedExecutionStateUpdateListener =(execution, previousState, newState) -&gt; { executionStateUpdateListener.onStateUpdate(execution, previousState, newState); if (newState.isTerminal()) { executionDeploymentTracker.stopTrackingDeploymentOf(execution); }};final ExecutionGraph newExecutionGraph =DefaultExecutionGraphBuilder.buildGraph( jobGraph, configuration, futureExecutor, ioExecutor, userCodeClassLoader, completedCheckpointStore, checkpointsCleaner, checkpointIdCounter, rpcTimeout, blobWriter, log, shuffleMaster, jobMasterPartitionTracker, partitionLocationConstraint, executionDeploymentListener, combinedExecutionStateUpdateListener, initializationTimestamp, vertexAttemptNumberStore, vertexParallelismStore, checkpointStatsTrackerFactory, isDynamicGraph);final CheckpointCoordinator checkpointCoordinator =newExecutionGraph.getCheckpointCoordinator();//如果checkpointCoordinator存在则尝试从Checkpoint恢复if (checkpointCoordinator != null) { // check whether we find a valid checkpoint if (!checkpointCoordinator.restoreInitialCheckpointIfPresent( new HashSet&lt;&gt;(newExecutionGraph.getAllVertices().values()))) { // check whether we can restore from a savepoint tryRestoreExecutionGraphFromSavepoint( newExecutionGraph, jobGraph.getSavepointRestoreSettings()); }}return newExecutionGraph; } ```" }, { "title": "Flink1.15 CheckPoint源码分析", "url": "/posts/ckp/", "categories": "Flink1.15", "tags": "flink, realtime", "date": "2022-07-18 00:00:00 +0000", "snippet": "Checkpoint流程CheckpointedInputGate.pollNext(1.10)1，拉取数据的时候先从BufferStorage拉去，如果由则消费，否则从inputGate拉去2， 对齐模式，如果正在对齐barrier,则当前channel会阻塞，先将消息加入CachedBufferStoragepublic Optional&lt;BufferOrEvent&gt; pollNext() throws Exception { while (true) { // process buffered BufferOrEvents before grabbing new ones //首先从CachedBufferStorage取数据，没有则从inputGate获取next Optional&lt;BufferOrEvent&gt; next; if (bufferStorage.isEmpty()) { next = inputGate.pollNext(); } else { // TODO: FLINK-12536 for non credit-based flow control, getNext method is blocking next = bufferStorage.pollNext(); if (!next.isPresent()) { return pollNext(); } } if (!next.isPresent()) { return handleEmptyBuffer(); } BufferOrEvent bufferOrEvent = next.get(); //barrier对齐,当前channel阻塞,将bufferOrEvent加入CachedBufferStorage if (barrierHandler.isBlocked(offsetChannelIndex(bufferOrEvent.getChannelIndex()))) { // if the channel is blocked, we just store the BufferOrEvent //channel阻塞后,先放入bufferStorage bufferStorage.add(bufferOrEvent); //如果bufferStorage满了,对齐模式抛出CheckpointException,清空bufferStorage if (bufferStorage.isFull()) { barrierHandler.checkpointSizeLimitExceeded(bufferStorage.getMaxBufferedBytes()); bufferStorage.rollOver(); } } else if (bufferOrEvent.isBuffer()) { return next; } else if (bufferOrEvent.getEvent().getClass() == CheckpointBarrier.class) { CheckpointBarrier checkpointBarrier = (CheckpointBarrier) bufferOrEvent.getEvent(); if (!endOfInputGate) { // process barriers only if there is a chance of the checkpoint completing //处理Barrier if (barrierHandler.processBarrier(checkpointBarrier, offsetChannelIndex(bufferOrEvent.getChannelIndex()), bufferStorage.getPendingBytes())) { bufferStorage.rollOver(); } } } else if (bufferOrEvent.getEvent().getClass() == CancelCheckpointMarker.class) { //处理CancelCheckpointMarker if (barrierHandler.processCancellationBarrier((CancelCheckpointMarker) bufferOrEvent.getEvent())) { bufferStorage.rollOver(); } } else { if (bufferOrEvent.getEvent().getClass() == EndOfPartitionEvent.class) { //处理EndOfPartitionEvent if (barrierHandler.processEndOfPartition()) { bufferStorage.rollOver(); } } return next; } }}BufferStorage类型,EXACTLY_ONCE模式是CachedBufferStorageprivate static BufferStorage createBufferStorage( CheckpointingMode checkpointMode, IOManager ioManager, int pageSize, Configuration taskManagerConfig, String taskName) { switch (checkpointMode) { case EXACTLY_ONCE: { long maxAlign = taskManagerConfig.getLong(TaskManagerOptions.TASK_CHECKPOINT_ALIGNMENT_BYTES_LIMIT); if (!(maxAlign == -1 || maxAlign &gt; 0)) { throw new IllegalConfigurationException( TaskManagerOptions.TASK_CHECKPOINT_ALIGNMENT_BYTES_LIMIT.key() + \" must be positive or -1 (infinite)\"); } //EXACTLY_ONCE 模式CachedBufferStorage return new CachedBufferStorage(pageSize, maxAlign, taskName); } case AT_LEAST_ONCE: return new EmptyBufferStorage(); default: throw new UnsupportedOperationException(\"Unrecognized Checkpointing Mode: \" + checkpointMode); }}}CheckpointedInputGate(&gt;1.10)public Optional&lt;BufferOrEvent&gt; pollNext() throws Exception { while (true) { Optional&lt;BufferOrEvent&gt; next = inputGate.pollNext(); if (!next.isPresent()) { return handleEmptyBuffer(); } BufferOrEvent bufferOrEvent = next.get(); //对齐模式,这里可能是blocked,会阻塞Channel继续消费数据，老版本用bufferStore缓存数据 checkState(!barrierHandler.isBlocked(bufferOrEvent.getChannelInfo())); //Buffer 数据 if (bufferOrEvent.isBuffer()) { return next; } else if (bufferOrEvent.getEvent().getClass() == CheckpointBarrier.class) {//处理CheckpointBarrier CheckpointBarrier checkpointBarrier = (CheckpointBarrier) bufferOrEvent.getEvent(); barrierHandler.processBarrier(checkpointBarrier, bufferOrEvent.getChannelInfo()); return next; } else if (bufferOrEvent.getEvent().getClass() == CancelCheckpointMarker.class) {//处理CancelCheckpointMarker barrierHandler.processCancellationBarrier( (CancelCheckpointMarker) bufferOrEvent.getEvent()); } else { if (bufferOrEvent.getEvent().getClass() == EndOfPartitionEvent.class) {//处理EndOfPartitionEvent barrierHandler.processEndOfPartition(); } return next; } }}对齐CheckpointBarrierAlignerCheckpointBarrierAligner.processBarrier中： 当前算子的上游只有一个inputchannel，更新currentCheckpointId，直接触发notifyCheckpoint 如果上游是多个通道channel2.1 如果当前正在进行checkpoint 2.1.1 如果barrierId &gt; currentCheckpointId 说明是新来barrier， 直接skip之前的ckp，开始新一轮对齐 2.1.2 如果barrierId == currentCheckpointId，说明是当前正在进行ckp的 barrier,直接设置当前channel为 block,阻塞消费 2.1.3 如果barrierId &lt; currentCheckpointId，说明是是老的ckp,无视这个barrier, 让通道继续消费通道 2.2 当前本轮checkpoint的第一个barrier，新来的barrier的Id(barrierId )与当前正在进行currentCheckpointId大，更新currentCheckpointId, 设置通道为block，不能继续消费消息 2.3 如果新来的barrierId &lt;currentCheckpointId 或者numBarriersReceived==0(被取消) 则让通道重新继续消费 最后判断如果收到的Barrier数量+已关闭的通道数量=总通道数，说明已经收到所有的Barrier了，开始执行CheckpointBarrierHandler.notifyCheckpointpublic void processBarrier(CheckpointBarrier receivedBarrier, InputChannelInfo channelInfo)throws Exception { final long barrierId = receivedBarrier.getId(); // fast path for single channel cases if (totalNumberOfInputChannels == 1) {//单个通道 resumeConsumption(channelInfo);//通知通道继续消费消息 if (barrierId &gt; currentCheckpointId) {//如果是一个新的checkpoint,则执行notifyCheckpoint // new checkpoint currentCheckpointId = barrierId;//更新currentCheckpointId notifyCheckpoint(receivedBarrier, latestAlignmentDurationNanos); } return; } // -- general code path for multiple input channels -- //正在进行chp,numBarriersReceived &gt; 0,多个inputchannel if (isCheckpointPending()) { // this is only true if some alignment is already progress and was not canceled //2.1.2 当前checkpointId,设置当前channel为block, if (barrierId == currentCheckpointId) { // regular case onBarrier(channelInfo); } else if (barrierId &gt; currentCheckpointId) { // 2.1.1 大于当前currentCheckpointId,说明是一个新的，直接skip当前ckp,因为之前的ckp还没完成 // we did not complete the current checkpoint, another started before LOG.warn( \"{}: Received checkpoint barrier for checkpoint {} before completing current checkpoint {}. \" + \"Skipping current checkpoint.\", taskName, barrierId, currentCheckpointId); //broadcast事件CancelCheckpointMarker // let the task know we are not completing this notifyAbort( currentCheckpointId, new CheckpointException( \"Barrier id: \" + barrierId, CheckpointFailureReason.CHECKPOINT_DECLINED_SUBSUMED)); // abort the current checkpoint releaseBlocksAndResetBarriers(); //开启一个新的ckp // begin a new checkpoint beginNewAlignment(barrierId, channelInfo, receivedBarrier.getTimestamp()); } else { // 2.1.3 比当前ckpId小,说明是之前的ckpId,直接唤醒重新消费 // ignore trailing barrier from an earlier checkpoint (obsolete now) resumeConsumption(channelInfo); } } else if (barrierId &gt; currentCheckpointId) { // first barrier of a new checkpoint //2.2 收到的barrierId比当前检查点id(currentCheckpointId)大,新的ckp beginNewAlignment(barrierId, channelInfo, receivedBarrier.getTimestamp()); } else { // either the current checkpoint was canceled (numBarriers == 0) or // this barrier is from an old subsumed checkpoint // 2.3 当前批次的ckp被取消了或者是一个跟早的ckp,直接换新重复消费 resumeConsumption(channelInfo);// } //已经收到Barriers总数+已经关闭的通道数=总通道数 // check if we have all barriers - since canceled checkpoints always have zero barriers // this can only happen on a non canceled checkpoint if (numBarriersReceived + numClosedChannels == totalNumberOfInputChannels) { // actually trigger checkpoint if (LOG.isDebugEnabled()) { LOG.debug( \"{}: Received all barriers, triggering checkpoint {} at {}.\", taskName, receivedBarrier.getId(), receivedBarrier.getTimestamp()); } releaseBlocksAndResetBarriers(); notifyCheckpoint(receivedBarrier, latestAlignmentDurationNanos); }}" }, { "title": "Flink1.15 InputChannel源码分析", "url": "/posts/inputchannel/", "categories": "Flink1.15", "tags": "flink, realtime", "date": "2022-07-14 00:00:00 +0000", "snippet": "this.subtaskCheckpointCoordinator = new SubtaskCheckpointCoordinatorImpl(checkpointStorageAccess, this.getName(), actionExecutor, this.getCancelables(), this.getAsyncOperationsThreadPool(), environment, this, this.configuration.isUnalignedCheckpointsEnabled(), (Boolean)this.configuration.getConfiguration().get(ExecutionCheckpointingOptions.ENABLE_CHECKPOINTS_AFTER_TASKS_FINISH), this::prepareInputSnapshot);private CompletableFuture&lt;Void&gt; prepareInputSnapshot(ChannelStateWriter channelStateWriter, long checkpointId) throws CheckpointException { return this.inputProcessor == null ? FutureUtils.completedVoidFuture() : this.inputProcessor.prepareSnapshot(channelStateWriter, checkpointId);}//StreamOneInputProcessorpublic CompletableFuture&lt;Void&gt; prepareSnapshot(ChannelStateWriter channelStateWriter, long checkpointId) throws IOException { return this.input.prepareSnapshot(channelStateWriter, checkpointId);}//StreamTwoInputProcessorpublic CompletableFuture&lt;Void&gt; prepareSnapshot(ChannelStateWriter channelStateWriter, long checkpointId) throws IOException { return CompletableFuture.allOf(this.processor1.prepareSnapshot(channelStateWriter, checkpointId), this.processor2.prepareSnapshot(channelStateWriter, checkpointId));}//StreamMultipleInputProcessorpublic CompletableFuture&lt;Void&gt; prepareSnapshot(ChannelStateWriter channelStateWriter, long checkpointId) throws IOException { CompletableFuture&lt;?&gt;[] inputFutures = new CompletableFuture[this.inputProcessors.length]; for(int index = 0; index &lt; inputFutures.length; ++index) { inputFutures[index] = this.inputProcessors[index].prepareSnapshot(channelStateWriter, checkpointId); } return CompletableFuture.allOf(inputFutures);}Task中创建SingleInputGate// consumed intermediate result partitionsfinal IndexedInputGate[] gates =shuffleEnvironment.createInputGates(taskShuffleContext, this, inputGateDeploymentDescriptors).toArray(new IndexedInputGate[0]);this.inputGates = new IndexedInputGate[gates.length];int counter = 0;for (IndexedInputGate gate : gates) { inputGates[counter++] = new InputGateWithMetrics( gate, metrics.getIOMetricGroup().getNumBytesInCounter());}//NettyShuffleEnvironmentpublic List&lt;SingleInputGate&gt; createInputGates( ShuffleIOOwnerContext ownerContext, PartitionProducerStateProvider partitionProducerStateProvider, List&lt;InputGateDeploymentDescriptor&gt; inputGateDeploymentDescriptors) { synchronized (lock) { Preconditions.checkState( !isClosed, \"The NettyShuffleEnvironment has already been shut down.\"); MetricGroup networkInputGroup = ownerContext.getInputGroup(); @SuppressWarnings(\"deprecation\") InputChannelMetrics inputChannelMetrics = new InputChannelMetrics(networkInputGroup, ownerContext.getParentGroup()); SingleInputGate[] inputGates = new SingleInputGate[inputGateDeploymentDescriptors.size()]; for (int gateIndex = 0; gateIndex &lt; inputGates.length; gateIndex++) { final InputGateDeploymentDescriptor igdd = inputGateDeploymentDescriptors.get(gateIndex); SingleInputGate inputGate = singleInputGateFactory.create( ownerContext.getOwnerName(), gateIndex, igdd, partitionProducerStateProvider, inputChannelMetrics); InputGateID id = new InputGateID( igdd.getConsumedResultId(), ownerContext.getExecutionAttemptID()); inputGatesById.put(id, inputGate); inputGate.getCloseFuture().thenRun(() -&gt; inputGatesById.remove(id)); inputGates[gateIndex] = inputGate; } registerInputMetrics(config.isNetworkDetailedMetrics(), networkInputGroup, inputGates); return Arrays.asList(inputGates); }}" }, { "title": "Azkaban", "url": "/posts/Azkaban/", "categories": "", "tags": "", "date": "2022-07-06 00:00:00 +0000", "snippet": "azkaban-webProjectManagerServlethandleMultiformPost(req, resp, params, session);//protected void handleMultiformPost(final HttpServletRequest req, final HttpServletResponse resp, final Map&lt;String, Object&gt; params, final Session session)throws ServletException, IOException { // Looks like a duplicate, but this is a move away from the regular // multiform post + redirect // to a more ajax like command. if (params.containsKey(\"ajax\")) { final String action = (String) params.get(\"ajax\"); final HashMap&lt;String, String&gt; ret = new HashMap&lt;&gt;(); if (API_UPLOAD.equals(action)) { ajaxHandleUpload(req, resp, ret, params, session); } this.writeJSON(resp, ret); } else if (params.containsKey(\"action\")) { final String action = (String) params.get(\"action\"); if (API_UPLOAD.equals(action)) { handleUpload(req, resp, params, session);// } }}handleUpload内部比较简单，主要调用ajaxHandleUploadajaxHandleUpload主要式读取上传流中的数据在本地生成临时文件上传 private void ajaxHandleUpload(final HttpServletRequest req, final HttpServletResponse resp, final Map&lt;String, String&gt; ret, final Map&lt;String, Object&gt; multipart, final Session session)throws ServletException, IOException {//生成本地临时文件 final File archiveFile = new File(tempDir, name); out = new BufferedOutputStream(new FileOutputStream(archiveFile)); IOUtils.copy(item.getInputStream(), out); out.close(); //projectManager内部主要: //解压zip文件，验证依赖任务等 //通过AzkabanProjectLoader生成project flow等信心 //最后持久化：上传文件，持久化project,flow final Map&lt;String, ValidationReport&gt; reports = this.projectManager .uploadProject(project, archiveFile, lowercaseExtension, user, props, uploaderIPAddr);}AzkabanProjectLoaderpublic Map&lt;String, ValidationReport&gt; uploadProject(final Project project, final File archive, final String fileType, final User uploader, final Props additionalProps, final String uploaderIPAddr)throws ProjectManagerException, ExecutorManagerException { //两种实现方式DirectoryFlowLoader或者DirectoryYamlFlowLoader loader = this.flowLoaderFactory.createFlowLoader(folder); //解析以及依赖等创建flow等 reports.put(DIRECTORY_FLOW_REPORT_KEY, loader.loadProjectFlow(project, folder)); // Upload the project to DB and storage. final File startupDependenciesOrNull = isThinProject ? startupDependencies : null; persistProject(project, loader, archive, folder, startupDependenciesOrNull, uploader, uploaderIPAddr);}loadProjectFlow//DirectoryFlowLoader.javapublic ValidationReport loadProjectFlow(final Project project, final File projectDir) { this.propsList = new ArrayList&lt;&gt;(); this.flowPropsList = new ArrayList&lt;&gt;(); this.jobPropsMap = new HashMap&lt;&gt;(); this.nodeMap = new HashMap&lt;&gt;(); this.duplicateJobs = new HashSet&lt;&gt;(); this.nodeDependencies = new HashMap&lt;&gt;(); this.rootNodes = new HashSet&lt;&gt;(); this.flowDependencies = new HashMap&lt;&gt;(); // Load all the props files and create the Node objects loadProjectFromDir(projectDir.getPath(), projectDir, null); // Create edges and find missing dependencies resolveDependencies(); // Create the flows. buildFlowsFromDependencies(); // Resolve embedded flows resolveEmbeddedFlows(); FlowLoaderUtils.checkJobProperties(project.getId(), this.props, this.jobPropsMap, this.errors); return FlowLoaderUtils.generateFlowLoaderReport(this.errors);}persistProjectprivate void persistProject(final Project project, final FlowLoader loader, final File archive, final File projectDir, final File startupDependencies, final User uploader, final String uploaderIPAddr) throws ProjectManagerException { synchronized (project) { final int newProjectVersion = this.projectLoader.getLatestProjectVersion(project) + 1; final Map&lt;String, Flow&gt; flows = loader.getFlowMap(); for (final Flow flow : flows.values()) { flow.setProjectId(project.getId()); flow.setVersion(newProjectVersion); } //上传文件到hdfs/db this.projectStorageManager.uploadProject(project, newProjectVersion, archive, startupDependencies, uploader, uploaderIPAddr); //插入flow到表：project_flows log.info(\"Uploading flow to db for project \" + archive.getName()); this.projectLoader.uploadFlows(project, newProjectVersion, flows.values()); project.setFlows(flows); // Set the project version before upload of project files happens so that the files use // new version. project.setVersion(newProjectVersion); if (loader instanceof DirectoryFlowLoader) { final DirectoryFlowLoader directoryFlowLoader = (DirectoryFlowLoader) loader; log.info(\"Uploading Job properties\");//insert/更新project_properties表 this.projectLoader.uploadProjectProperties(project, new ArrayList&lt;&gt;( directoryFlowLoader.getJobPropsMap().values())); log.info(\"Uploading Props properties\"); this.projectLoader.uploadProjectProperties(project, directoryFlowLoader.getPropsList()); } else if (loader instanceof DirectoryYamlFlowLoader) { //yaml格递归调用上传文件，插入flow等 uploadFlowFilesRecursively(projectDir, project, newProjectVersion); } else { throw new ProjectManagerException(\"Invalid type of flow loader.\"); } // CAUTION : Always change the project version as the last item to make // sure all the project related files are uploaded. log.info(\"Changing project versions for project \" + archive.getName()); this.projectLoader.changeProjectVersion(project, newProjectVersion, uploader.getUserId()); this.projectLoader.postEvent(project, EventType.UPLOADED, uploader.getUserId(), \"Uploaded project files zip \" + archive.getName()); }}调度getTriggerManager().start();加载所有 public void start() throws TriggerManagerException { try { // expect loader to return valid triggers final List&lt;Trigger&gt; triggers = this.triggerLoader.loadTriggers(); for (final Trigger t : triggers) { this.runnerThread.addTrigger(t); triggerIdMap.put(t.getTriggerId(), t); } } catch (final Exception e) { logger.error(e); throw new TriggerManagerException(e); } this.runnerThread.start(); }runnerThread是TriggerScannerThreadpublic void run() { try { checkAllTriggers(); } catch (final Exception e) {}}checkAllTriggers如果是READY状态则执行onTriggerTrigger或onTriggerPauseprivate void checkAllTriggers() throws TriggerManagerException { // sweep through the rest of them for (final Trigger t : this.triggers) { try { TriggerManager.this.scannerStage = \"Checking for trigger \" + t.getTriggerId(); if (t.getStatus().equals(TriggerStatus.READY)) { /** * Prior to this change, expiration condition should never be called though * we have some related code here. ExpireCondition used the same BasicTimeChecker * as triggerCondition do. As a consequence, we need to figure out a way to distinguish * the previous ExpireCondition and this commit's ExpireCondition. */ if (t.getExpireCondition().getExpression().contains(\"EndTimeChecker\") &amp;&amp; t .expireConditionMet()) { onTriggerPause(t); } else if (t.triggerConditionMet()) { onTriggerTrigger(t);//出发 } } if (t.getStatus().equals(TriggerStatus.EXPIRED) &amp;&amp; t.getSource().equals(\"azkaban\")) { removeTrigger(t); } else { t.updateNextCheckTime();//更新下一次调度的时间 } } catch (final Throwable th) { //skip this trigger, moving on to the next one logger.error(\"Failed to process trigger with id : \" + t, th); } }}onTriggerTrigger这里如果是执行任务 action是ExecuteFlowAction，顺便更新triggers表信息private void onTriggerTrigger(final Trigger t) throws TriggerManagerException { final List&lt;TriggerAction&gt; actions = t.getTriggerActions(); for (final TriggerAction action : actions) { try { logger.info(\"Doing trigger actions \" + action.getDescription() + \" for \" + t); action.doAction();//这里是ExecuteFlowAction } catch (final ExecutorManagerException e) { if (e.getReason() == ExecutorManagerException.Reason.SkippedExecution) { logger.info(\"Skipped action [\" + action.getDescription() + \"] for [\" + t + \"] because: \" + e.getMessage()); } else { logger.error(\"Failed to do action [\" + action.getDescription() + \"] for [\" + t + \"]\", e); } } catch (final Throwable th) { logger.error(\"Failed to do action [\" + action.getDescription() + \"] for [\" + t + \"]\", th); } } if (t.isResetOnTrigger()) { t.resetTriggerConditions(); } else { logger.info(\"NextCheckTime did not change. Setting status to expired for trigger\" + t.getTriggerId()); t.setStatus(TriggerStatus.EXPIRED); } try { //更新triggers信息 TriggerManager.this.triggerLoader.updateTrigger(t); } catch (final TriggerLoaderException e) { throw new TriggerManagerException(e); }}public void doAction() throws Exception { //缓存查找project,flow 用来构造ExecutableFlow final Project project = FlowUtils.getProject(projectManager, this.projectId); final Flow flow = FlowUtils.getFlow(project, this.flowName); //生成ExecutableFlow final ExecutableFlow exflow = FlowUtils.createExecutableFlow(project, flow); //提交给executorManager logger.info(\"Invoking flow \" + project.getName() + \".\" + this.flowName); executorManagerAdapter.submitExecutableFlow(exflow, this.submitUser); logger.info(\"Invoked flow \" + project.getName() + \".\" + this.flowName);ExecuteFlowAction.doAction()}executorManager直接提交给队列queuedFlowspublic String submitExecutableFlow(final ExecutableFlow exflow, final String userId)throws ExecutorManagerException { //flow队列queuedFlows this.queuedFlows.enqueue(exflow, reference);}消费者QueueProcessorThread,其run主要调用processQueuedFlows来处理flowprivate void processQueuedFlows(final long activeExecutorsRefreshWindow, final int maxContinuousFlowProcessed) throws InterruptedException,ExecutorManagerException { final ExecutionReference reference = ExecutorManager.this.runningCandidate.getFirst(); final ExecutableFlow exflow = ExecutorManager.this.runningCandidate.getSecond(); exflow.setUpdateTime(currentTime); // process flow with current snapshot of activeExecutors //选择最佳的一个Executor提交任务,包含host,port等信息 selectExecutorAndDispatchFlow(reference, exflow);}//private void selectExecutorAndDispatchFlow(final ExecutionReference reference, final ExecutableFlow exflow)throws ExecutorManagerException { //从可用的Executor选择一个提交 final Executor selectedExecutor = selectExecutor(exflow, remainingExecutors); //dispatch下发任务到selectedExecutor dispatch(reference, exflow, selectedExecutor);}//private void dispatch(final ExecutionReference reference, final ExecutableFlow exflow, final Executor choosenExecutor) throws ExecutorManagerException { //ExecutorApiGateway内部负责远程调用,这里提交EXECUTE_ACTION请求 this.apiGateway.callWithExecutable(exflow, choosenExecutor, ConnectorParams.EXECUTE_ACTION);}通过http方式提交给Executor serverprivate String callForJsonString(final String host, final int port, final String path, final DispatchMethod dispatchMethod, final Optional&lt;Integer&gt; httpTimeout, List&lt;Pair&lt;String, String&gt;&gt; paramList) throws IOException { if (paramList == null) { paramList = new ArrayList&lt;&gt;(); } @SuppressWarnings(\"unchecked\") final URI uri = apiClient.buildExecutorUri(host, port, path, true, dispatchMethod); return this.apiClient.doPost(uri, dispatchMethod, httpTimeout, paramList);}exec-server 直接看servlet如何处理EXECUTE_ACTIONif (action.equals(ConnectorParams.EXECUTE_ACTION)) { handleAjaxExecute(req, respMap, execid);}//FlowRunnerManagerprivate void handleAjaxExecute(final HttpServletRequest req, final Map&lt;String, Object&gt; respMap, final int execId) { try { this.flowRunnerManager.submitFlow(execId); } catch (final ExecutorManagerException e) { logger.error(e.getMessage(), e); respMap.put(ConnectorParams.RESPONSE_ERROR, e.getMessage()); }}//FlowRunnerManagerpublic void submitFlow(final int execId) throws ExecutorManagerException { if (isAlreadyRunning(execId)) { return; } //创建FlowRunner final FlowRunner runner = createFlowRunner(execId); // Check again. if (isAlreadyRunning(execId)) { return; } submitFlowRunner(runner);}//把FlowRunner提交给线程池TrackingThreadPool处理private void submitFlowRunner(final FlowRunner runner) throws ExecutorManagerException { this.runningFlows.put(runner.getExecutionId(), runner); try { // The executorService already has a queue. // The submit method below actually returns an instance of FutureTask, // which implements interface RunnableFuture, which extends both // Runnable and Future interfaces final Future&lt;?&gt; future = this.executorService.submit(runner);//提交给线程池 // keep track of this future this.submittedFlows.put(future, runner.getExecutionId()); // update the last submitted time. this.lastFlowSubmittedDate = System.currentTimeMillis(); } catch (final RejectedExecutionException re) { this.runningFlows.remove(runner.getExecutionId()); final StringBuffer errorMsg = new StringBuffer( \"Azkaban executor can't execute any more flows. \"); if (this.executorService.isShutdown()) { errorMsg.append(\"The executor is being shut down.\"); } throw new ExecutorManagerException(errorMsg.toString(), re); }}由此看来FlowRunner必然是一个，看起run处理逻辑public void run() { //先做一些初始化工作 setupFlowExecution(); this.flow.setStartTime(System.currentTimeMillis()); this.logger.info(\"Updating initial flow directory.\"); updateFlow(); this.logger.info(\"Fetching job and shared properties.\"); if (!FlowLoaderUtils.isAzkabanFlowVersion20(this.flow.getAzkabanFlowVersion())) { loadAllProperties(); } this.fireEventListeners( Event.create(this, EventType.FLOW_STARTED, new EventData(this.getExecutableFlow()))); //执行任务的地方 runFlow(); //如果一场，修改状态为FAILED this.flow.setStatus(Status.FAILED); //更新下时间等 this.flow.setEndTime(System.currentTimeMillis()); this.logger.info(\"Setting end time for flow \" + this.execId + \" to \" + System.currentTimeMillis()); closeLogger(); updateFlow();}看下READY状态的怎么处理，主要看是不是ExecutableFlowBase节点，如果是则找出startNode 依次执行if (nextNodeStatus == Status.READY) { if (node instanceof ExecutableFlowBase) { final ExecutableFlowBase flow = ((ExecutableFlowBase) node); this.logger.info(\"Running flow '\" + flow.getNestedId() + \"'.\"); flow.setStatus(Status.RUNNING); // don't overwrite start time of root flows if (flow.getStartTime() &lt;= 0) { flow.setStartTime(System.currentTimeMillis()); } prepareJobProperties(flow); //依次执行所有node for (final String startNodeId : ((ExecutableFlowBase) node).getStartNodes()) { final ExecutableNode startNode = flow.getExecutableNode(startNodeId); runReadyJob(startNode); } } else { //执行Node runExecutableNode(node); }}runExecutableNode才是执行节点任务的private void runExecutableNode(final ExecutableNode node) throws IOException { //azkaban.execapp.JobRunner final JobRunner runner = createJobRunner(node); this.logger.info(\"Submitting job '\" + node.getNestedId() + \"' to run.\"); try { // Job starts to queue runner.setTimeInQueue(System.currentTimeMillis()); this.executorService.submit(runner);//提交JobRunner给线程池 this.activeJobRunners.add(runner); } catch (final RejectedExecutionException e) { this.logger.error(e); } }跟上边FlowRunner类似直接看run方法public void run() { try { doRun(); } catch (final Exception e) { serverLogger.error(\"Unexpected exception\", e); throw e; } finally { Thread.currentThread().setContextClassLoader(this.threadClassLoader); }}doRun的核心是runJob() //生成jobif (prepareJob()) { //运行具体的job runJob();}runJob里执行具体的任务，这里的job具体实现主要有HadoopHiveJob,HadoopSparkJob等private Status runJob() { try { this.job.run();//这里的job具体实现主要有HadoopHiveJob,HadoopSparkJob等 finalStatus = this.node.getStatus(); } catch (final Throwable e) { // }}" }, { "title": "RocketMQ 消费消息", "url": "/posts/RocketMQ%E6%B6%88%E8%B4%B9%E6%B6%88%E6%81%AF/", "categories": "rocketmq", "tags": "rocketmq", "date": "2022-07-01 00:00:00 +0000", "snippet": "//PullMessageProcessor.javaprivate RemotingCommand processRequest(final Channel channel, RemotingCommand request, boolean brokerAllowSuspend)throws RemotingCommandException { //从DefaultMessageStore获取消息 final GetMessageResult getMessageResult = this.brokerController.getMessageStore().getMessage(requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId(), requestHeader.getQueueOffset(), requestHeader.getMaxMsgNums(), messageFilter);}从DefaultMessageStore获取消息public GetMessageResult getMessage(final String group, final String topic, final int queueId, final long offset, final int maxMsgNums, final MessageFilter messageFilter) { //定位ConsumeQueue ConsumeQueue consumeQueue = findConsumeQueue(topic, queueId); //从commitlog读取攒批次知道 SelectMappedBufferResult selectResult = this.commitLog.getMessage(offsetPy, sizePy); if (null == selectResult) { if (getResult.getBufferTotalSize() == 0) { status = GetMessageStatus.MESSAGE_WAS_REMOVING; } nextPhyFileStartOffset = this.commitLog.rollNextFile(offsetPy); continue; } //追加到getResult getResult.addMessage(selectResult);}getMessageResult获取到数据后响应给comsumer//TransferMsgByHeap默认true,先拷贝到堆内存ByteBufferif (this.brokerController.getBrokerConfig().isTransferMsgByHeap()) { final long beginTimeMills = this.brokerController.getMessageStore().now(); final byte[] r = this.readGetMessageResult(getMessageResult, requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId()); this.brokerController.getBrokerStatsManager().incGroupGetLatency(requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId(), (int) (this.brokerController.getMessageStore().now() - beginTimeMills)); response.setBody(r);} else { try {//zero copy 从文件中直接mmap映射获取,直接发送 FileRegion fileRegion = new ManyMessageTransfer(response.encodeHeader(getMessageResult.getBufferTotalSize()), getMessageResult); channel.writeAndFlush(fileRegion).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { getMessageResult.release(); if (!future.isSuccess()) { log.error(\"transfer many message by pagecache failed, {}\", channel.remoteAddress(), future.cause()); } } }); } catch (Throwable e) { log.error(\"transfer many message by pagecache exception\", e); getMessageResult.release(); } response = null;}堆内存private byte[] readGetMessageResult(final GetMessageResult getMessageResult, final String group, final String topic, final int queueId) { final ByteBuffer byteBuffer = ByteBuffer.allocate(getMessageResult.getBufferTotalSize());//分配ByteBuffer long storeTimestamp = 0; try { List&lt;ByteBuffer&gt; messageBufferList = getMessageResult.getMessageBufferList(); for (ByteBuffer bb : messageBufferList) { byteBuffer.put(bb); int sysFlag = bb.getInt(MessageDecoder.SYSFLAG_POSITION); // bornhost has the IPv4 ip if the MessageSysFlag.BORNHOST_V6_FLAG bit of sysFlag is 0 // IPv4 host = ip(4 byte) + port(4 byte); IPv6 host = ip(16 byte) + port(4 byte) int bornhostLength = (sysFlag &amp; MessageSysFlag.BORNHOST_V6_FLAG) == 0 ? 8 : 20; int msgStoreTimePos = 4 // 1 TOTALSIZE + 4 // 2 MAGICCODE + 4 // 3 BODYCRC + 4 // 4 QUEUEID + 4 // 5 FLAG + 8 // 6 QUEUEOFFSET + 8 // 7 PHYSICALOFFSET + 4 // 8 SYSFLAG + 8 // 9 BORNTIMESTAMP + bornhostLength; // 10 BORNHOST storeTimestamp = bb.getLong(msgStoreTimePos); } } finally { getMessageResult.release(); } this.brokerController.getBrokerStatsManager().recordDiskFallBehindTime(group, topic, queueId, this.brokerController.getMessageStore().now() - storeTimestamp); return byteBuffer.array();}" }, { "title": "RocketMQ DLeger", "url": "/posts/RockerMQ_DLeger/", "categories": "rocketmq", "tags": "rocketmq", "date": "2022-06-30 00:00:00 +0000", "snippet": "启动BrokerStartup//main方法启动入口public static void main(String[] args) { start(createBrokerController(args));}public static BrokerController start(BrokerController controller) { try { controller.start();//启动BrokerController String tip = \"The broker[\" + controller.getBrokerConfig().getBrokerName() + \", \" + controller.getBrokerAddr() + \"] boot success. serializeType=\" + RemotingCommand.getSerializeTypeConfigInThisServer(); if (null != controller.getBrokerConfig().getNamesrvAddr()) { tip += \" and name server is \" + controller.getBrokerConfig().getNamesrvAddr(); } log.info(tip); System.out.printf(\"%s%n\", tip); return controller; } catch (Throwable e) { e.printStackTrace(); System.exit(-1); } return null;}createBrokerController会实例化一个BrokerController，并初始化final BrokerController controller = new BrokerController( brokerConfig, nettyServerConfig, nettyClientConfig, messageStoreConfig);// remember all configs to prevent discardcontroller.getConfiguration().registerConfig(properties);boolean initResult = controller.initialize();//完成BrokerController初始化工作在BrokerController初始化阶段会实例化DefaultMessageStore,DefaultMessageStore直接与CommitLog关联public boolean initialize() throws CloneNotSupportedException { try { //实例化messageStore //如果开启DLeger,会实例化一个DLedgerCommitLog，关联DLedgerServer,否则使用原CommitLog this.messageStore = new DefaultMessageStore(this.messageStoreConfig, this.brokerStatsManager, this.messageArrivingListener, this.brokerConfig); //如果开启了DLeger，需要添加roleChangeHandler if (messageStoreConfig.isEnableDLegerCommitLog()) { DLedgerRoleChangeHandler roleChangeHandler = new DLedgerRoleChangeHandler(this, (DefaultMessageStore) messageStore); ((DLedgerCommitLog)((DefaultMessageStore) messageStore).getCommitLog()).getdLedgerServer().getdLedgerLeaderElector().addRoleChangeHandler(roleChangeHandler); } this.brokerStats = new BrokerStats((DefaultMessageStore) this.messageStore); //load plugin MessageStorePluginContext context = new MessageStorePluginContext(messageStoreConfig, brokerStatsManager, messageArrivingListener, brokerConfig); this.messageStore = MessageStoreFactory.build(context, this.messageStore); this.messageStore.getDispatcherList().addFirst(new CommitLogDispatcherCalcBitMap(this.brokerConfig, this.consumerFilterManager)); } catch (IOException e) { result = false; log.error(\"Failed to initialize\", e); }}DefaultMessageStore这里会实例化commitLog，如果开启DLedger，则是DLedgerCommitLogpublic DefaultMessageStore(final MessageStoreConfig messageStoreConfig, final BrokerStatsManager brokerStatsManager, final MessageArrivingListener messageArrivingListener, final BrokerConfig brokerConfig) throws IOException { //开启 DLedger，则使用DLedgerCommitLog if (messageStoreConfig.isEnableDLegerCommitLog()) { this.commitLog = new DLedgerCommitLog(this); } else { this.commitLog = new CommitLog(this); }}DLedgerCommitLog内部有一个DLedgerServerpublic DLedgerCommitLog(final DefaultMessageStore defaultMessageStore) { super(defaultMessageStore); dLedgerConfig = new DLedgerConfig(); dLedgerConfig.setEnableDiskForceClean(defaultMessageStore.getMessageStoreConfig().isCleanFileForciblyEnable()); dLedgerConfig.setStoreType(DLedgerConfig.FILE); dLedgerConfig.setSelfId(defaultMessageStore.getMessageStoreConfig().getdLegerSelfId()); dLedgerConfig.setGroup(defaultMessageStore.getMessageStoreConfig().getdLegerGroup()); dLedgerConfig.setPeers(defaultMessageStore.getMessageStoreConfig().getdLegerPeers()); dLedgerConfig.setStoreBaseDir(defaultMessageStore.getMessageStoreConfig().getStorePathRootDir()); dLedgerConfig.setMappedFileSizeForEntryData(defaultMessageStore.getMessageStoreConfig().getMappedFileSizeCommitLog()); dLedgerConfig.setDeleteWhen(defaultMessageStore.getMessageStoreConfig().getDeleteWhen()); dLedgerConfig.setFileReservedHours(defaultMessageStore.getMessageStoreConfig().getFileReservedTime() + 1); id = Integer.valueOf(dLedgerConfig.getSelfId().substring(1)) + 1; //实例化DLedgerServer dLedgerServer = new DLedgerServer(dLedgerConfig); dLedgerFileStore = (DLedgerMmapFileStore) dLedgerServer.getdLedgerStore(); DLedgerMmapFileStore.AppendHook appendHook = (entry, buffer, bodyOffset) -&gt; { assert bodyOffset == DLedgerEntry.BODY_OFFSET; buffer.position(buffer.position() + bodyOffset + MessageDecoder.PHY_POS_POSITION); buffer.putLong(entry.getPos() + bodyOffset); }; dLedgerFileStore.addAppendHook(appendHook); dLedgerFileList = dLedgerFileStore.getDataFileList(); this.messageSerializer = new MessageSerializer(defaultMessageStore.getMessageStoreConfig().getMaxMessageSize());}DLedgerServer就是开源项目DLedger中的了public DLedgerServer(DLedgerConfig dLedgerConfig) { this.dLedgerConfig = dLedgerConfig; this.memberState = new MemberState(dLedgerConfig);//状态，candidate,currTerm,currVoteFor等 this.dLedgerStore = createDLedgerStore(dLedgerConfig.getStoreType(), this.dLedgerConfig, this.memberState); dLedgerRpcService = new DLedgerRpcNettyService(this); dLedgerEntryPusher = new DLedgerEntryPusher(dLedgerConfig, memberState, dLedgerStore, dLedgerRpcService); dLedgerLeaderElector = new DLedgerLeaderElector(dLedgerConfig, memberState, dLedgerRpcService);}controller.start()启动过程中最终也会启动DLedgerServer public void startup() { this.dLedgerStore.startup(); this.dLedgerRpcService.startup(); this.dLedgerEntryPusher.startup(); this.dLedgerLeaderElector.startup();//领导选举 }dLedgerLeaderElector领导选举public DLedgerLeaderElector(DLedgerConfig dLedgerConfig, MemberState memberState, DLedgerRpcService dLedgerRpcService) { this.dLedgerConfig = dLedgerConfig; this.memberState = memberState; this.dLedgerRpcService = dLedgerRpcService; refreshIntervals(dLedgerConfig);}public void startup() { stateMaintainer.start();//raft选举循环 for (RoleChangeHandler roleChangeHandler : roleChangeHandlers) { roleChangeHandler.startup(); }}ShutdownAbleThread是线程实现类，最终调用StateMaintainer的doWork方法public class StateMaintainer extends ShutdownAbleThread { public StateMaintainer(String name, Logger logger) { super(name, logger); } @Override public void doWork() { try { if (DLedgerLeaderElector.this.dLedgerConfig.isEnableLeaderElector()) { DLedgerLeaderElector.this.refreshIntervals(dLedgerConfig); DLedgerLeaderElector.this.maintainState(); } sleep(10); } catch (Throwable t) { DLedgerLeaderElector.logger.error(\"Error in heartbeat\", t); } }}maintainState内典型的raft角色private void maintainState() throws Exception { if (memberState.isLeader()) { maintainAsLeader(); } else if (memberState.isFollower()) { maintainAsFollower(); } else { maintainAsCandidate(); }}初始状态Candidate走maintainAsCandidate，发起投投票private List&lt;CompletableFuture&lt;VoteResponse&gt;&gt; voteForQuorumResponses(long term, long ledgerEndTerm, long ledgerEndIndex) throws Exception { List&lt;CompletableFuture&lt;VoteResponse&gt;&gt; responses = new ArrayList&lt;&gt;(); for (String id : memberState.getPeerMap().keySet()) { VoteRequest voteRequest = new VoteRequest(); voteRequest.setGroup(memberState.getGroup()); voteRequest.setLedgerEndIndex(ledgerEndIndex); voteRequest.setLedgerEndTerm(ledgerEndTerm); voteRequest.setLeaderId(memberState.getSelfId()); voteRequest.setTerm(term); voteRequest.setRemoteId(id); CompletableFuture&lt;VoteResponse&gt; voteResponse; if (memberState.getSelfId().equals(id)) { voteResponse = handleVote(voteRequest, true);//投给自己，无需rpc远程调用 } else { //async voteResponse = dLedgerRpcService.vote(voteRequest);//rpc异步投给其他节点id } responses.add(voteResponse); } return responses;}经过投票后，如果获得多数投票，则转换为Leaderif (parseResult == VoteResponse.ParseResult.PASSED) { logger.info(\"[{}] [VOTE_RESULT] has been elected to be the leader in term {}\", memberState.getSelfId(), term); changeRoleToLeader(term);}" }, { "title": "RocketMQ 消息存储", "url": "/posts/RockerMQ%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8/", "categories": "rocketmq", "tags": "rocketmq", "date": "2022-06-29 00:00:00 +0000", "snippet": "BrokerController初始化的时候实例化一个DefaultMessageStore，并且负责load文件//BrokerController.initialize()this.messageStore =new DefaultMessageStore(this.messageStoreConfig, this.brokerStatsManager, this.messageArrivingListener, this.brokerConfig);//加载result = result &amp;&amp; this.messageStore.load();加载//DefaultMessageStore.loadpublic boolean load() { boolean result = true; try { boolean lastExitOK = !this.isTempFileExist(); log.info(\"last shutdown {}\", lastExitOK ? \"normally\" : \"abnormally\"); if (null != scheduleMessageService) { result = result &amp;&amp; this.scheduleMessageService.load(); } // load Commit Log 加载commitlog result = result &amp;&amp; this.commitLog.load(); // load Consume Queue 加载Consume Queue result = result &amp;&amp; this.loadConsumeQueue(); if (result) { this.storeCheckpoint = new StoreCheckpoint(StorePathConfigHelper.getStoreCheckpoint(this.messageStoreConfig.getStorePathRootDir())); //加载 IndexFile this.indexService.load(lastExitOK); this.recover(lastExitOK); log.info(\"load over, and the max phy offset = {}\", this.getMaxPhyOffset()); } } catch (Exception e) { log.error(\"load exception\", e); result = false; } if (!result) { this.allocateMappedFileService.shutdown(); } return result;}commitlog加载，主要是mappedFileQueue负责管理的，一个mappedFileQueue持有多个MappedFile//MappedFileQueue.loadpublic boolean load() { boolean result = this.mappedFileQueue.load(); log.info(\"load commit log \" + (result ? \"OK\" : \"Failed\")); return result;}//public boolean load() { File dir = new File(this.storePath); File[] files = dir.listFiles(); //遍历目录下所有的文件,生成MappedFile集合mappedFiles if (files != null) { // ascending order Arrays.sort(files); for (File file : files) { if (file.length() != this.mappedFileSize) { log.warn(file + \"\\t\" + file.length() + \" length not matched message store config value, please check it manually\"); return false; } try { MappedFile mappedFile = new MappedFile(file.getPath(), mappedFileSize); mappedFile.setWrotePosition(this.mappedFileSize); mappedFile.setFlushedPosition(this.mappedFileSize); mappedFile.setCommittedPosition(this.mappedFileSize); this.mappedFiles.add(mappedFile); log.info(\"load \" + file.getPath() + \" OK\"); } catch (IOException e) { log.error(\"load file \" + file + \" error\", e); return false; } } } return true;}mappedFiles这个是一个CopyOnWriteArrayListprivate final CopyOnWriteArrayList&lt;MappedFile&gt; mappedFiles = new CopyOnWriteArrayList&lt;MappedFile&gt;();MappedFile 对应一个具体的文件public MappedFile(final String fileName, final int fileSize) throws IOException { init(fileName, fileSize);}public void init(final String fileName, final int fileSize, final TransientStorePool transientStorePool) throws IOException { init(fileName, fileSize); this.writeBuffer = transientStorePool.borrowBuffer();//堆外内存 this.transientStorePool = transientStorePool;}//文件内存映射fileChannel.mapprivate void init(final String fileName, final int fileSize) throws IOException { this.fileName = fileName; this.fileSize = fileSize; this.file = new File(fileName); this.fileFromOffset = Long.parseLong(this.file.getName()); boolean ok = false; ensureDirOK(this.file.getParent()); try { this.fileChannel = new RandomAccessFile(this.file, \"rw\").getChannel(); //文件内存映射mappedByteBuffer this.mappedByteBuffer = this.fileChannel.map(MapMode.READ_WRITE, 0, fileSize); TOTAL_MAPPED_VIRTUAL_MEMORY.addAndGet(fileSize); TOTAL_MAPPED_FILES.incrementAndGet(); ok = true; } catch (FileNotFoundException e) { log.error(\"Failed to create file \" + this.fileName, e); throw e; } catch (IOException e) { log.error(\"Failed to map file \" + this.fileName, e); throw e; } finally { if (!ok &amp;&amp; this.fileChannel != null) { this.fileChannel.close(); } }}broker端put大致流程SendMessageProcessor.processRequestSendMessageProcessor.asyncProcessRequestSendMessageProcessor.asyncSendBatchMessage/asyncSendMessageDefaultMessageStore.asyncPutMessageCommitLog.asyncPutMessageCommitLog 的asyncPutMessagepublic CompletableFuture&lt;PutMessageResult&gt; asyncPutMessage(final MessageExtBrokerInner msg) { //从mappedFileQueue获取最新的一个MappedFile MappedFile mappedFile = this.mappedFileQueue.getLastMappedFile(); //如果没有获取到或者文件满了,则重新创建一个 if (null == mappedFile || mappedFile.isFull()) { mappedFile = this.mappedFileQueue.getLastMappedFile(0); // Mark: NewFile may be cause noise } //追加到最新的MappedFile result = mappedFile.appendMessage(msg, this.appendMessageCallback); //提交刷盘请求 CompletableFuture&lt;PutMessageStatus&gt; flushResultFuture = submitFlushRequest(result, putMessageResult, msg); // CompletableFuture&lt;PutMessageStatus&gt; replicaResultFuture = submitReplicaRequest(result, putMessageResult, msg);}MappedFile填充最新的message,这里并没有强制刷盘获取byteBuffer，两种类型writeBuffer、mappedByteBuffer用来public AppendMessageResult appendMessagesInner(final MessageExt messageExt, final AppendMessageCallback cb) { assert messageExt != null; assert cb != null; int currentPos = this.wrotePosition.get(); if (currentPos &lt; this.fileSize) { ByteBuffer byteBuffer = writeBuffer != null ? writeBuffer.slice() : this.mappedByteBuffer.slice();//堆外内存或者文件内存映射 byteBuffer.position(currentPos); AppendMessageResult result; //doAppend只是用messageExt填充byteBuffer，没有强制刷盘,还在内存中 if (messageExt instanceof MessageExtBrokerInner) { result = cb.doAppend(this.getFileFromOffset(), byteBuffer, this.fileSize - currentPos, (MessageExtBrokerInner) messageExt); } else if (messageExt instanceof MessageExtBatch) { result = cb.doAppend(this.getFileFromOffset(), byteBuffer, this.fileSize - currentPos, (MessageExtBatch) messageExt); } else { return new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR); } this.wrotePosition.addAndGet(result.getWroteBytes()); this.storeTimestamp = result.getStoreTimestamp(); return result; } log.error(\"MappedFile.appendMessage return null, wrotePosition: {} fileSize: {}\", currentPos, this.fileSize); return new AppendMessageResult(AppendMessageStatus.UNKNOWN_ERROR);}堆外内存ByteBuffer： this.writeBuffer = transientStorePool.borrowBuffer();//堆外内存物理文件对应的内存映射Buffer this.fileChannel = new RandomAccessFile(this.file, \"rw\").getChannel(); //文件内存映射mappedByteBuffer this.mappedByteBuffer = this.fileChannel.map(MapMode.READ_WRITE, 0, fileSize);那么到底何时刷盘呢，有两种方式同步或者异步public enum FlushDiskType { SYNC_FLUSH, ASYNC_FLUSH}if (FlushDiskType.SYNC_FLUSH == defaultMessageStore.getMessageStoreConfig().getFlushDiskType()) { this.flushCommitLogService = new GroupCommitService();} else { this.flushCommitLogService = new FlushRealTimeService();}如果是同步刷盘Commitlog将消息appendMessage到MappedFile后会调用submitFlushRequestpublic CompletableFuture&lt;PutMessageStatus&gt; submitFlushRequest(AppendMessageResult result, PutMessageResult putMessageResult, MessageExt messageExt) { // Synchronization flush 同步模式直接交给GroupCommitService if (FlushDiskType.SYNC_FLUSH == this.defaultMessageStore.getMessageStoreConfig().getFlushDiskType()) { final GroupCommitService service = (GroupCommitService) this.flushCommitLogService; if (messageExt.isWaitStoreMsgOK()) { GroupCommitRequest request = new GroupCommitRequest(result.getWroteOffset() + result.getWroteBytes(), this.defaultMessageStore.getMessageStoreConfig().getSyncFlushTimeout()); service.putRequest(request); return request.future(); } else { service.wakeup(); return CompletableFuture.completedFuture(PutMessageStatus.PUT_OK); } } // Asynchronous flush else { //异步刷盘策略唤醒commitLogService,具体实现FlushRealTimeService if (!this.defaultMessageStore.getMessageStoreConfig().isTransientStorePoolEnable()) { flushCommitLogService.wakeup(); } else { commitLogService.wakeup(); } return CompletableFuture.completedFuture(PutMessageStatus.PUT_OK); }}GroupCommitService先放到队列//GroupTransferServicepublic synchronized void putRequest(final CommitLog.GroupCommitRequest request) { synchronized (this.requestsWrite) { this.requestsWrite.add(request);//放入队列requestsWrite } this.wakeup();}//唤醒消费public void wakeup() { if (hasNotified.compareAndSet(false, true)) { waitPoint.countDown(); // notify }}消费在run 方法public void run() { CommitLog.log.info(this.getServiceName() + \" service started\"); while (!this.isStopped()) { try { this.waitForRunning(10);//swapRequests交换数据requestsWrite--&gt;requestsRead this.doCommit();//读取requestsRead的数据执行flush操作 } catch (Exception e) { CommitLog.log.warn(this.getServiceName() + \" service has exception. \", e); } } // Under normal circumstances shutdown, wait for the arrival of the // request, and then flush try { Thread.sleep(10); } catch (InterruptedException e) { CommitLog.log.warn(\"GroupCommitService Exception, \", e); } synchronized (this) { this.swapRequests(); } this.doCommit(); CommitLog.log.info(this.getServiceName() + \" service end\");} //requestsWrite给requestsReadprivate void swapRequests() { List&lt;GroupCommitRequest&gt; tmp = this.requestsWrite; this.requestsWrite = this.requestsRead; this.requestsRead = tmp;}doCommit主要读取requestsRead数据,最终调用CommitLog.this.mappedFileQueue.flush(0) 来进行刷盘private void doCommit() { synchronized (this.requestsRead) { if (!this.requestsRead.isEmpty()) { for (GroupCommitRequest req : this.requestsRead) { // There may be a message in the next file, so a maximum of // two times the flush boolean flushOK = false; for (int i = 0; i &lt; 2 &amp;&amp; !flushOK; i++) { flushOK = CommitLog.this.mappedFileQueue.getFlushedWhere() &gt;= req.getNextOffset(); // if (!flushOK) { CommitLog.this.mappedFileQueue.flush(0);//消息同步flush } } req.wakeupCustomer(flushOK ? PutMessageStatus.PUT_OK : PutMessageStatus.FLUSH_DISK_TIMEOUT); } long storeTimestamp = CommitLog.this.mappedFileQueue.getStoreTimestamp(); if (storeTimestamp &gt; 0) { CommitLog.this.defaultMessageStore.getStoreCheckpoint().setPhysicMsgTimestamp(storeTimestamp); } this.requestsRead.clear(); } else { // Because of individual messages is set to not sync flush, it // will come to this process CommitLog.this.mappedFileQueue.flush(0);//消息同步 } }}异步刷盘 分两种情况正常情况下使用：FlushRealTimeService如果开启内存缓冲池transientStorePool则会使用CommitRealTimeServiceif (FlushDiskType.SYNC_FLUSH == defaultMessageStore.getMessageStoreConfig().getFlushDiskType()) { this.flushCommitLogService = new GroupCommitService(); //mmap模式同步} else { this.flushCommitLogService = new FlushRealTimeService();//mmap模式异步}this.commitLogService = new CommitRealTimeService();//内存缓冲池时间使用如果开启，在获取最新的MappedFile文件的时候,通过来AllocateMappedFileService异步创建,AllocateMappedFileService继承自ServiceThread，其run方法会调用mmapOperation,在mmapOperation中创建mappedFile//AllocateMappedFileService.mmapOperationif (messageStore.getMessageStoreConfig().isTransientStorePoolEnable()) {//开启内存缓冲池 //缓冲池 try { mappedFile = ServiceLoader.load(MappedFile.class).iterator().next(); mappedFile.init(req.getFilePath(), req.getFileSize(), messageStore.getTransientStorePool()); } catch (RuntimeException e) { log.warn(\"Use default implementation.\"); mappedFile = new MappedFile(req.getFilePath(), req.getFileSize(), messageStore.getTransientStorePool());// }} else { mappedFile = new MappedFile(req.getFilePath(), req.getFileSize());//mmap方式}常规异步刷盘FlushRealTimeService在run方法周期性的进行刷盘操作，主要逻辑：while (!this.isStopped()) { //休眠策略 使用Thread.sleep 还是CountDownLatch2.await boolean flushCommitLogTimed = CommitLog.this.defaultMessageStore.getMessageStoreConfig().isFlushCommitLogTimed(); //刷盘周期,默认: 500ms int interval = CommitLog.this.defaultMessageStore.getMessageStoreConfig().getFlushIntervalCommitLog(); //每次刷盘至少要刷多少页内容，默认每次要刷4页，每页大小为4k int flushPhysicQueueLeastPages = CommitLog.this.defaultMessageStore.getMessageStoreConfig().getFlushCommitLogLeastPages(); //最大时间间隔10s int flushPhysicQueueThoroughInterval = CommitLog.this.defaultMessageStore.getMessageStoreConfig().getFlushCommitLogThoroughInterval(); boolean printFlushProgress = false; // Print flush progress long currentTimeMillis = System.currentTimeMillis(); //当前距离上次刷盘时间间隔 if (currentTimeMillis &gt;= (this.lastFlushTimestamp + flushPhysicQueueThoroughInterval)) { this.lastFlushTimestamp = currentTimeMillis; flushPhysicQueueLeastPages = 0;//超时全部需要flush了 printFlushProgress = (printTimes++ % 10) == 0; } try { //休眠策略 if (flushCommitLogTimed) { Thread.sleep(interval); } else { this.waitForRunning(interval); } if (printFlushProgress) { this.printFlushProgress(); } long begin = System.currentTimeMillis(); //执行刷盘操作 CommitLog.this.mappedFileQueue.flush(flushPhysicQueueLeastPages); long storeTimestamp = CommitLog.this.mappedFileQueue.getStoreTimestamp(); if (storeTimestamp &gt; 0) { CommitLog.this.defaultMessageStore.getStoreCheckpoint().setPhysicMsgTimestamp(storeTimestamp); } long past = System.currentTimeMillis() - begin; if (past &gt; 500) { log.info(\"Flush data to disk costs {} ms\", past); } } catch (Throwable e) { CommitLog.log.warn(this.getServiceName() + \" service has exception. \", e); this.printFlushProgress(); }}CommitRealTimeService调用方法MappedFileQueue#commit执行数据提交到磁盘工作,commit没有执行force操作强制刷盘一旦有数据被commit，就会唤醒flushCommitLogService执行刷盘操作while (!this.isStopped()) { //提交到FileChannel的时间间隔，在TransientStorePool打开的情况下使用，默认200ms int interval = CommitLog.this.defaultMessageStore.getMessageStoreConfig().getCommitIntervalCommitLog(); //每次提交至少多少个page(默认是4个) int commitDataLeastPages = CommitLog.this.defaultMessageStore.getMessageStoreConfig().getCommitCommitLogLeastPages(); //提交完成间隔时间 int commitDataThoroughInterval = CommitLog.this.defaultMessageStore.getMessageStoreConfig().getCommitCommitLogThoroughInterval(); long begin = System.currentTimeMillis(); if (begin &gt;= (this.lastCommitTimestamp + commitDataThoroughInterval)) { this.lastCommitTimestamp = begin; commitDataLeastPages = 0; } try { //有数据commited返回false boolean result = CommitLog.this.mappedFileQueue.commit(commitDataLeastPages); long end = System.currentTimeMillis(); if (!result) { this.lastCommitTimestamp = end; // result = false means some data committed. //now wake up flush thread. flushCommitLogService.wakeup();//唤醒flushCommitLogService执行刷盘 } if (end - begin &gt; 500) { log.info(\"Commit data to file costs {} ms\", end - begin); } this.waitForRunning(interval); } catch (Throwable e) { CommitLog.log.error(this.getServiceName() + \" service has exception. \", e); }}" }, { "title": "BadgerDB 写入流程", "url": "/posts/badger%E5%86%99%E5%85%A5%E6%B5%81%E7%A8%8B/", "categories": "badger", "tags": "badger，kv", "date": "2022-06-20 00:00:00 +0000", "snippet": "入口写的入口是update,通过key/value对写入值err := db.Update(func(txn *badger.Txn) error { err := txn.Set([]byte(\"answer\"), []byte(\"42\")) return err})也可以有线new一个Entry，再通过txn.SetEntryerr := db.Update(func(txn *badger.Txn) error { e := badger.NewEntry([]byte(\"answer\"), []byte(\"42\")) err := txn.SetEntry(e) return err})这两其实一样的func (txn *Txn) Set(key, val []byte) error {\treturn txn.SetEntry(NewEntry(key, val))}func (txn *Txn) SetEntry(e *Entry) error {\treturn txn.modify(e)}注意看db.Updatefunc (db *DB) Update(fn func(txn *Txn) error) error {\tif db.IsClosed() {\t\treturn ErrDBClosed\t}\tif db.opt.managedTxns {\t\tpanic(\"Update can only be used with managedDB=false.\")\t}\ttxn := db.NewTransaction(true)\tdefer txn.Discard() //fn为上边的func,即set(SetEntry/Set)操作,当然也可以是其他的如:Txn.Delete()\tif err := fn(txn); err != nil {\t\treturn err\t}\treturn txn.Commit()}txn.modify(e) 主要一堆校验，直接丢给pendingWrites缓存了func (txn *Txn) modify(e *Entry) error {\tswitch {\tcase !txn.update:\t\treturn ErrReadOnlyTxn\tcase txn.discarded:\t\treturn ErrDiscardedTxn\tcase len(e.Key) == 0:\t\treturn ErrEmptyKey\tcase bytes.HasPrefix(e.Key, badgerPrefix):\t\treturn ErrInvalidKey\tcase len(e.Key) &gt; maxKeySize:\t\t// Key length can't be more than uint16, as determined by table::header. To\t\t// keep things safe and allow badger move prefix and a timestamp suffix, let's\t\t// cut it down to 65000, instead of using 65536.\t\treturn exceedsSize(\"Key\", maxKeySize, e.Key)\tcase int64(len(e.Value)) &gt; txn.db.opt.ValueLogFileSize:\t\treturn exceedsSize(\"Value\", txn.db.opt.ValueLogFileSize, e.Value)\tcase txn.db.opt.InMemory &amp;&amp; int64(len(e.Value)) &gt; txn.db.valueThreshold():\t\treturn exceedsSize(\"Value\", txn.db.valueThreshold(), e.Value)\t}\tif err := txn.db.isBanned(e.Key); err != nil {\t\treturn err\t}\tif err := txn.checkSize(e); err != nil {\t\treturn err\t}\t// The txn.conflictKeys is used for conflict detection. If conflict detection\t// is disabled, we don't need to store key hashes in this map.\tif txn.db.opt.DetectConflicts {\t\tfp := z.MemHash(e.Key) // Avoid dealing with byte arrays.\t\ttxn.conflictKeys[fp] = struct{}{}\t}\t// If a duplicate entry was inserted in managed mode, move it to the duplicate writes slice.\t// Add the entry to duplicateWrites only if both the entries have different versions. For\t// same versions, we will overwrite the existing entry.\tif oldEntry, ok := txn.pendingWrites[string(e.Key)]; ok &amp;&amp; oldEntry.version != e.version {\t\ttxn.duplicateWrites = append(txn.duplicateWrites, oldEntry)\t}\ttxn.pendingWrites[string(e.Key)] = e//pendingWrites缓存\treturn nil}所以变更应该txn.Commit()里边func (txn *Txn) Commit() error {\t// txn.conflictKeys can be zero if conflict detection is turned off. So we\t// should check txn.pendingWrites.\tif len(txn.pendingWrites) == 0 {\t\treturn nil // Nothing to do.\t}\t// Precheck before discarding txn.\tif err := txn.commitPrecheck(); err != nil {\t\treturn err\t}\tdefer txn.Discard()\ttxnCb, err := txn.commitAndSend()//send 这里golang,肯定是channel了\tif err != nil {\t\treturn err\t}\t// If batchSet failed, LSM would not have been updated. So, no need to rollback anything.\t// TODO: What if some of the txns successfully make it to value log, but others fail.\t// Nothing gets updated to LSM, until a restart happens.\treturn txnCb()}跟进去发现这个也没有直接写文件的操作,这个是典型的go channel处理方式,这个函数主要处理冲突检测，设置版本号以及entry元数据等func (txn *Txn) commitAndSend() (func() error, error) {\torc := txn.db.orc\t// Ensure that the order in which we get the commit timestamp is the same as\t// the order in which we push these updates to the write channel. So, we\t// acquire a writeChLock before getting a commit timestamp, and only release\t// it after pushing the entries to it.\torc.writeChLock.Lock()\tdefer orc.writeChLock.Unlock()\t//冲突检测\tcommitTs, conflict := orc.newCommitTs(txn)\tif conflict {\t\treturn nil, ErrConflict\t}\tkeepTogether := true\tsetVersion := func(e *Entry) {\t\tif e.version == 0 {\t\t\te.version = commitTs\t\t} else {\t\t\tkeepTogether = false\t\t}\t}\t//设置version\tfor _, e := range txn.pendingWrites {\t\tsetVersion(e)\t}\t// The duplicateWrites slice will be non-empty only if there are duplicate\t// entries with different versions.\tfor _, e := range txn.duplicateWrites {\t\tsetVersion(e)\t}\tentries := make([]*Entry, 0, len(txn.pendingWrites)+len(txn.duplicateWrites)+1)\t//组装entry数据\tprocessEntry := func(e *Entry) {\t\t// Suffix the keys with commit ts, so the key versions are sorted in\t\t// descending order of commit timestamp.\t\te.Key = y.KeyWithTs(e.Key, e.version)\t\t// Add bitTxn only if these entries are part of a transaction. We\t\t// support SetEntryAt(..) in managed mode which means a single\t\t// transaction can have entries with different timestamps. If entries\t\t// in a single transaction have different timestamps, we don't add the\t\t// transaction markers.\t\tif keepTogether {\t\t\te.meta |= bitTxn\t\t}\t\tentries = append(entries, e)\t}\t// The following debug information is what led to determining the cause of\t// bank txn violation bug, and it took a whole bunch of effort to narrow it\t// down to here. So, keep this around for at least a couple of months.\t// var b strings.Builder\t// fmt.Fprintf(&amp;b, \"Read: %d. Commit: %d. reads: %v. writes: %v. Keys: \",\t// \ttxn.readTs, commitTs, txn.reads, txn.conflictKeys)\tfor _, e := range txn.pendingWrites {\t\tprocessEntry(e)\t}\tfor _, e := range txn.duplicateWrites {\t\tprocessEntry(e)\t}\tif keepTogether {\t\t// CommitTs should not be zero if we're inserting transaction markers.\t\ty.AssertTrue(commitTs != 0)\t\te := &amp;Entry{\t\t\tKey: y.KeyWithTs(txnKey, commitTs),\t\t\tValue: []byte(strconv.FormatUint(commitTs, 10)),\t\t\tmeta: bitFinTxn,\t\t}\t\tentries = append(entries, e)\t}\treq, err := txn.db.sendToWriteCh(entries)//发送给writeCh\tif err != nil {\t\torc.doneCommit(commitTs)\t\treturn nil, err\t}\tret := func() error {\t\terr := req.Wait()\t\t// Wait before marking commitTs as done.\t\t// We can't defer doneCommit above, because it is being called from a\t\t// callback here.\t\torc.doneCommit(commitTs)\t\treturn err\t}\treturn ret, nil}最后塞给db.writeChfunc (db *DB) sendToWriteCh(entries []*Entry) (*request, error) {\tif atomic.LoadInt32(&amp;db.blockWrites) == 1 {\t\treturn nil, ErrBlockedWrites\t}\tvar count, size int64\tfor _, e := range entries {\t\tsize += e.estimateSizeAndSetThreshold(db.valueThreshold())\t\tcount++\t}\t//批次大小检测\tif count &gt;= db.opt.maxBatchCount || size &gt;= db.opt.maxBatchSize {\t\treturn nil, ErrTxnTooBig\t}\t// We can only service one request because we need each txn to be stored in a contiguous section.\t// Txns should not interleave among other txns or rewrites.\treq := requestPool.Get().(*request)\treq.reset()\treq.Entries = entries\treq.Wg.Add(1)\treq.IncrRef() // for db write\tdb.writeCh &lt;- req // Handled in doWrites.//塞给writeCh\ty.NumPutsAdd(db.opt.MetricsEnabled, int64(len(entries)))\treturn req, nil}下半部分，注意db.open的时候会起几个Goroutine\tgo db.doWrites(db.closers.writes)\tgo db.handleHandovers(db.closers.writes)doWrites负责select writeCh，并处理写请求func (db *DB) doWrites(lc *z.Closer) {\tdefer lc.Done()\tpendingCh := make(chan struct{}, 1)\twriteRequests := func(reqs []*request) {\t\tif err := db.writeRequests(reqs); err != nil {//主要处理写请求逻辑\t\t\tdb.opt.Errorf(\"writeRequests: %v\", err)\t\t}\t\t&lt;-pendingCh\t}\t// This variable tracks the number of pending writes.\treqLen := new(expvar.Int)\ty.PendingWritesSet(db.opt.MetricsEnabled, db.opt.Dir, reqLen)\treqs := make([]*request, 0, 10)\tfor {\t\tvar r *request\t\tselect {\t\tcase r = &lt;-db.writeCh://原来的writeCh\t\tcase &lt;-lc.HasBeenClosed():\t\t\tgoto closedCase\t\t}\t\tfor {\t\t\treqs = append(reqs, r)\t\t\treqLen.Set(int64(len(reqs)))\t\t\tif len(reqs) &gt;= 3*kvWriteChCapacity {\t\t\t\tpendingCh &lt;- struct{}{} // blocking.\t\t\t\tgoto writeCase\t\t\t}\t\t\tselect {\t\t\t// Either push to pending, or continue to pick from writeCh.\t\t\tcase r = &lt;-db.writeCh:\t\t\tcase pendingCh &lt;- struct{}{}:\t\t\t\tgoto writeCase//处理写逻辑，回收重置reqs, go writeRequests(reqs)\t\t\tcase &lt;-lc.HasBeenClosed():\t\t\t\tgoto closedCase\t\t\t}\t\t}\tclosedCase:\t\t// All the pending request are drained.\t\t// Don't close the writeCh, because it has be used in several places.\t\tfor {\t\t\tselect {\t\t\tcase r = &lt;-db.writeCh:\t\t\t\treqs = append(reqs, r)\t\t\tdefault:\t\t\t\tpendingCh &lt;- struct{}{} // Push to pending before doing a write.\t\t\t\twriteRequests(reqs)\t\t\t\treturn\t\t\t}\t\t}\twriteCase:\t\tgo writeRequests(reqs)\t\treqs = make([]*request, 0, 10)\t\treqLen.Set(0)\t}}db.writeRequests(reqs)这里才会实际写，包括vlog,LSM等// writeRequests is called serially by only one goroutine.func (db *DB) writeRequests(reqs []*request) error {\tif len(reqs) == 0 {\t\treturn nil\t}\tdone := func(err error) {\t\tfor _, r := range reqs {\t\t\tr.Err = err\t\t\tr.Wg.Done()\t\t}\t}\tdb.opt.Debugf(\"writeRequests called. Writing to value log\")\t//先写vlog\terr := db.vlog.write(reqs)\tif err != nil {\t\tdone(err)\t\treturn err\t}\tdb.opt.Debugf(\"Sending updates to subscribers\")\tdb.pub.sendUpdates(reqs)\tdb.opt.Debugf(\"Writing to memtable\")\tvar count int\tfor _, b := range reqs {\t\tif len(b.Entries) == 0 {\t\t\tcontinue\t\t}\t\tcount += len(b.Entries)\t\tvar i uint64\t\tvar err error\t\tfor err = db.ensureRoomForWrite(); err == errNoRoom; err = db.ensureRoomForWrite() {\t\t\ti++\t\t\tif i%100 == 0 {\t\t\t\tdb.opt.Debugf(\"Making room for writes\")\t\t\t}\t\t\t// We need to poll a bit because both hasRoomForWrite and the flusher need access to s.imm.\t\t\t// When flushChan is full and you are blocked there, and the flusher is trying to update s.imm,\t\t\t// you will get a deadlock.\t\t\ttime.Sleep(10 * time.Millisecond)\t\t}\t\tif err != nil {\t\t\tdone(err)\t\t\treturn y.Wrap(err, \"writeRequests\")\t\t}\t\t//写LSM\t\tif err := db.writeToLSM(b); err != nil {\t\t\tdone(err)\t\t\treturn y.Wrap(err, \"writeRequests\")\t\t}\t}\tdone(nil)\tdb.opt.Debugf(\"%d entries written\", count)\treturn nil}" }, { "title": "Etcd 删除", "url": "/posts/etcd_%E5%88%A0%E9%99%A4/", "categories": "distributed", "tags": "etcd", "date": "2022-06-17 00:00:00 +0000", "snippet": "删除Tombstone,与put差异func (tw *storeTxnWrite) delete(key []byte) {\tibytes := newRevBytes()\tidxRev := revision{main: tw.beginRev + 1, sub: int64(len(tw.changes))}\trevToBytes(idxRev, ibytes)\t//boltdb 的key追加一个Tombstone标志\tibytes = appendMarkTombstone(tw.storeTxnRead.s.lg, ibytes)\tkv := mvccpb.KeyValue{Key: key}\td, err := kv.Marshal()\tif err != nil {\t\ttw.storeTxnRead.s.lg.Fatal(\t\t\t\"failed to marshal mvccpb.KeyValue\",\t\t\tzap.Error(err),\t\t)\t}\ttw.tx.UnsafeSeqPut(keyBucketName, ibytes, d)//删除操作, boltdb kv 使用包含Tombstone再put一次\terr = tw.s.kvindex.Tombstone(key, idxRev)//删除索引 treeIndex,实际是操作\tif err != nil {\t\ttw.storeTxnRead.s.lg.Fatal(\t\t\t\"failed to tombstone an existing key\",\t\t\tzap.String(\"key\", string(key)),\t\t\tzap.Error(err),\t\t)\t}\ttw.changes = append(tw.changes, kv)\titem := lease.LeaseItem{Key: string(key)}\tleaseID := tw.s.le.GetLease(item)\tif leaseID != lease.NoLease {\t\terr = tw.s.le.Detach(leaseID, []lease.LeaseItem{item})\t\tif err != nil {\t\t\ttw.storeTxnRead.s.lg.Error(\t\t\t\t\"failed to detach old lease from a key\",\t\t\t\tzap.Error(err),\t\t\t)\t\t}\t}}追加Tombstone标志’t’markTombstone byte = 't'// appendMarkTombstone appends tombstone mark to normal revision bytes.func appendMarkTombstone(lg *zap.Logger, b []byte) []byte {\tif len(b) != revBytesLen {\t\tlg.Panic(\t\t\t\"cannot append tombstone mark to non-normal revision bytes\",\t\t\tzap.Int(\"expected-revision-bytes-size\", revBytesLen),\t\t\tzap.Int(\"given-revision-bytes-size\", len(b)),\t\t)\t}\treturn append(b, markTombstone)}" }, { "title": "BadgerDB GC流程", "url": "/posts/badger_gc%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/", "categories": "badger", "tags": "badger，kv", "date": "2022-06-17 00:00:00 +0000", "snippet": "GC入口RunValueLogGC，供用户显示调用，唯一参数discardRatio，表示func (db *DB) RunValueLogGC(discardRatio float64) error {\tif db.opt.InMemory {\t\treturn ErrGCInMemoryMode\t}\tif discardRatio &gt;= 1.0 || discardRatio &lt;= 0.0 {\t\treturn ErrInvalidRequest\t}\t// Pick a log file and run GC\treturn db.vlog.runGC(discardRatio)}主要两步：1.选择vlog文件2.执行GC,vlog重写rewritefunc (vlog *valueLog) runGC(discardRatio float64) error {\tselect {\tcase vlog.garbageCh &lt;- struct{}{}:\t\t// Pick a log file for GC.\t\tdefer func() {\t\t\t&lt;-vlog.garbageCh\t\t}()\t\t//pick 需要进行GC的文件\t\tlf := vlog.pickLog(discardRatio)\t\tif lf == nil {\t\t\treturn ErrNoRewrite\t\t}\t\t//GC rewrite\t\treturn vlog.doRunGC(lf)\tdefault:\t\treturn ErrRejected\t}}picklog的依据是discarded &lt; discardRatio ，与较老的版本比较已经去掉了随机选取文件func (vlog *valueLog) pickLog(discardRatio float64) *logFile {\tvlog.filesLock.RLock()\tdefer vlog.filesLock.RUnlock()LOOP:\t// Pick a candidate that contains the largest amount of discardable data\tfid, discard := vlog.discardStats.MaxDiscard()\t// MaxDiscard will return fid=0 if it doesn't have any discard data. The\t// vlog files start from 1.\tif fid == 0 {\t\tfor fid = vlog.nextGCFid; fid &lt; vlog.maxFid; fid++ {\t\t\tlf := vlog.filesMap[fid]\t\t\tif lf == nil {\t\t\t\tcontinue\t\t\t}\t\t\t//计算文件的discarded,这里返回的是个百分比\t\t\tdiscarded, err := vlog.calculateDiscardStat(lf)\t\t\tif err != nil || discarded &lt; discardRatio {\t\t\t\tcontinue\t\t\t}\t\t\tvlog.nextGCFid = fid + 1\t\t\treturn lf\t\t}\t\t// reset the counter so next time we will start from the start\t\tvlog.nextGCFid = 0\t\treturn nil\t}\tlf, ok := vlog.filesMap[fid]\t// This file was deleted but it's discard stats increased because of compactions. The file\t// doesn't exist so we don't need to do anything. Skip it and retry.\tif !ok {\t\tvlog.discardStats.Update(fid, -1)\t\tgoto LOOP\t}\t// We have a valid file.\tfi, err := lf.Fd.Stat()\tif err != nil {\t\tvlog.opt.Errorf(\"Unable to get stats for value log fid: %d err: %+v\", fi, err)\t\treturn nil\t}\t//判断依据discardRatio*Size&gt;=discard\tif thr := discardRatio * float64(fi.Size()); float64(discard) &lt; thr {\t\tvlog.opt.Debugf(\"Discard: %d less than threshold: %.0f for file: %s\",\t\t\tdiscard, thr, fi.Name())\t\treturn nil\t}\tmaxFid := atomic.LoadUint32(&amp;vlog.maxFid)\tif fid &lt; maxFid {\t\tvlog.opt.Infof(\"Found value log max discard fid: %d discard: %d\\n\", fid, discard)\t\tlf, ok := vlog.filesMap[fid]\t\ty.AssertTrue(ok)\t\treturn lf\t}\t// Don't randomly pick any value log file.\treturn nil}discarded的计算calculateDiscardStatfunc (vlog *valueLog) calculateDiscardStat(f *logFile) (discardedRatio float64, err error) {\tvlog.filesLock.RLock()\tfor _, fid := range vlog.filesToBeDeleted {\t\tif fid == f.fid {\t\t\tvlog.filesLock.RUnlock()\t\t\treturn 0, errors.Errorf(\"value log file already marked for deletion fid: %d\", fid)\t\t}\t}\tmaxFid := vlog.maxFid\ty.AssertTruef(uint32(f.fid) &lt; maxFid, \"fid to calculateDiscardStat: %d. Current max fid: %d\", f.fid, maxFid)\tvlog.filesLock.RUnlock()\ty.AssertTrue(vlog.db != nil)\tvar discarded, count int\tfe := func(e Entry) error {\t\tcount++\t\tts := vlog.db.orc.readTs()\t\tkey := y.ParseKey(e.Key)\t\tvs, err := vlog.db.get(y.KeyWithTs(key, ts))\t\tif err != nil {\t\t\treturn err\t\t}\t\t//判断是否discard\t\tif discardEntry(e, vs, vlog.db) {\t\t\tdiscarded++\t\t}\t\treturn nil\t}\t//遍历计算discarded和count\t_, err = f.iterate(vlog.opt.ReadOnly, 0, func(e Entry, vp valuePointer) error {\t\treturn fe(e)\t})\tif err != nil {\t\treturn 0, err\t}\t//最后计算百分比\treturn float64(discarded) / float64(count), nil}discard判断/* * 1.已删除或者过期 * 2.value是vptr * 3.tnx entry */func discardEntry(e Entry, vs y.ValueStruct, db *DB) bool {\tif vs.Version != y.ParseTs(e.Key) {\t\t// Version not found. Discard.\t\treturn true\t}\tif isDeletedOrExpired(vs.Meta, vs.ExpiresAt) {\t\treturn true\t}\tif (vs.Meta &amp; bitValuePointer) == 0 {\t\t// Key also stores the value in LSM. Discard.\t\treturn true\t}\tif (vs.Meta &amp; bitFinTxn) &gt; 0 {\t\t// Just a txn finish entry. Discard.\t\treturn true\t}\treturn false}何时更新呢levelsController.doCompact()–&gt;levelsController.runCompactDef()–&gt;levelsController.compactBuildTables–&gt;levelsController.subcompact()//levelsController.subcompact()s.kv.vlog.updateDiscardStats(discardStats)func (vlog *valueLog) updateDiscardStats(stats map[uint32]int64) {\tif vlog.opt.InMemory {\t\treturn\t}\tfor fid, discard := range stats {\t\tvlog.discardStats.Update(fid, discard)\t}}" }, { "title": "raft线性一致性读", "url": "/posts/raft_linearizable-read/", "categories": "raft", "tags": "go, raft", "date": "2022-02-08 00:00:00 +0000", "snippet": "ReadIndexLease Read" }, { "title": "dolphinscheduler调度系统源码", "url": "/posts/ds_smaster_work/", "categories": "Java", "tags": "Java, File, tools，OOM", "date": "2022-01-17 00:00:00 +0000", "snippet": "1.架构设计1.老版本master将任务直接写入zk,Work通过抢占式从zk获取任务，work与master无直接通信交互 2.新版master与work直接通信，master通过rpc远程调用将任务下发给work执行1.1 老版(1.2.1为例)架构1.2 新版(2.x github dev)架构2.任务分发2.1 老版任务分发2.1.1 master将任务提交给zk//ProcessDao.javapublic Boolean submitTaskToQueue(TaskInstance taskInstance) { try{ if(taskInstance.isSubProcess()){ return true; } if(taskInstance.getState().typeIsFinished()){ logger.info(String.format(\"submit to task queue, but task [%s] state [%s] is already finished. \", taskInstance.getName(), taskInstance.getState().toString())); return true; } // task cannot submit when running if(taskInstance.getState() == ExecutionStatus.RUNNING_EXEUTION){ logger.info(String.format(\"submit to task queue, but task [%s] state already be running. \", taskInstance.getName())); return true; } if(checkTaskExistsInTaskQueue(taskInstance)){ logger.info(String.format(\"submit to task queue, but task [%s] already exists in the queue.\", taskInstance.getName())); return true; } logger.info(\"task ready to queue: {}\" , taskInstance); boolean insertQueueResult = taskQueue.add(DOLPHINSCHEDULER_TASKS_QUEUE, taskZkInfo(taskInstance)); logger.info(String.format(\"master insert into queue success, task : %s\", taskInstance.getName()) ); return insertQueueResult; }catch (Exception e){ logger.error(\"submit task to queue Exception: \", e); logger.error(\"task queue error : %s\", JSONUtils.toJson(taskInstance)); return false; }}//TaskQueueZkImpl.java@Overridepublic boolean add(String key, String value){ try { String taskIdPath = getTasksPath(key) + Constants.SINGLE_SLASH + value; zookeeperOperator.persist(taskIdPath, value); return true; } catch (Exception e) { logger.error(\"add task to tasks queue exception\",e); return false; }}2.1.2 work从zk获取任务//FetchTaskThread.java@Overridepublic void run() { logger.info(\"worker start fetch tasks...\"); while (Stopper.isRunning()){ InterProcessMutex mutex = null; String currentTaskQueueStr = null; try { //......省略部分代码...... //whether have tasks, if no tasks , no need lock //get all tasks List&lt;String&gt; tasksQueueList = taskQueue.getAllTasks(Constants.DOLPHINSCHEDULER_TASKS_QUEUE); if (CollectionUtils.isEmpty(tasksQueueList)){ Thread.sleep(Constants.SLEEP_TIME_MILLIS); continue; } // creating distributed locks, lock path /dolphinscheduler/lock/worker mutex = zkWorkerClient.acquireZkLock(zkWorkerClient.getZkClient(), zkWorkerClient.getWorkerLockPath()); // task instance id str List&lt;String&gt; taskQueueStrArr = taskQueue.poll(Constants.DOLPHINSCHEDULER_TASKS_QUEUE, taskNum); //......省略部分代码...... // submit task workerExecService.submit(new TaskScheduleThread(taskInstance, processDao)); // remove node from zk removeNodeFromTaskQueue(taskQueueStr); } }catch (Exception e){ processErrorTask(currentTaskQueueStr); logger.error(\"fetch task thread failure\" ,e); }finally { AbstractZKClient.releaseMutex(mutex); } }}//TaskQueueZkImpl@Overridepublic List&lt;String&gt; poll(String key, int tasksNum) { try{ List&lt;String&gt; list = zookeeperOperator.getChildrenKeys(getTasksPath(key)); if(list != null &amp;&amp; list.size() &gt; 0){}//......省略部分代码......}2.2 新版任务分发2.2.1 master任务分发//CommonTaskProcessor.javapublic boolean dispatchTask() { try { if (taskUpdateQueue == null) { this.initQueue(); } if (taskInstance.getState().typeIsFinished()) { logger.info(String.format(\"submit task , but task [%s] state [%s] is already finished. \", taskInstance.getName(), taskInstance.getState().toString())); return true; } // task cannot be submitted because its execution state is RUNNING or DELAY. if (taskInstance.getState() == ExecutionStatus.RUNNING_EXECUTION || taskInstance.getState() == ExecutionStatus.DELAY_EXECUTION) { logger.info(\"submit task, but the status of the task {} is already running or delayed.\", taskInstance.getName()); return true; } logger.info(\"task ready to submit: {}\", taskInstance); TaskPriority taskPriority = new TaskPriority(processInstance.getProcessInstancePriority().getCode(), processInstance.getId(), taskInstance.getProcessInstancePriority().getCode(), taskInstance.getId(), org.apache.dolphinscheduler.common.Constants.DEFAULT_WORKER_GROUP); TaskExecutionContext taskExecutionContext = getTaskExecutionContext(taskInstance); taskPriority.setTaskExecutionContext(taskExecutionContext); taskUpdateQueue.put(taskPriority); logger.info(String.format(\"master submit success, task : %s\", taskInstance.getName())); return true; } catch (Exception e) { logger.error(\"submit task error\", e); return false; }}//TaskPriorityQueueImpl@Overridepublic void put(TaskPriority taskPriorityInfo) throws TaskPriorityQueueException { queue.put(taskPriorityInfo);}//TaskPriorityQueueConsumerprivate List&lt;TaskPriority&gt; batchDispatch(int fetchTaskNum) throws TaskPriorityQueueException, InterruptedException { List&lt;TaskPriority&gt; failedDispatchTasks = new ArrayList&lt;&gt;(); CountDownLatch latch = new CountDownLatch(fetchTaskNum); for (int i = 0; i &lt; fetchTaskNum; i++) { TaskPriority taskPriority = taskPriorityQueue.poll(Constants.SLEEP_TIME_MILLIS, TimeUnit.MILLISECONDS); if (Objects.isNull(taskPriority)) { latch.countDown(); continue; } consumerThreadPoolExecutor.submit(() -&gt; { boolean dispatchResult = this.dispatchTask(taskPriority); if (!dispatchResult) { failedDispatchTasks.add(taskPriority); } latch.countDown(); }); } latch.await(); return failedDispatchTasks;}//TaskPriorityQueueImplprotected boolean dispatchTask(TaskPriority taskPriority) { boolean result = false; try { TaskExecutionContext context = taskPriority.getTaskExecutionContext(); ExecutionContext executionContext = new ExecutionContext(context.toCommand(), ExecutorType.WORKER, context.getWorkerGroup()); if (isTaskNeedToCheck(taskPriority)) { if (taskInstanceIsFinalState(taskPriority.getTaskId())) { // when task finish, ignore this task, there is no need to dispatch anymore return true; } } result = dispatcher.dispatch(executionContext); } catch (ExecuteException e) { logger.error(\"dispatch error: {}\", e.getMessage(), e); } return result;}再看下这个dispatcher(ExecutorDispatcher),最终会选个一个host通过nettyRemotingClient发送给远程的work执行任务public Boolean dispatch(final ExecutionContext context) throws ExecuteException { /** * get executor manager */ ExecutorManager&lt;Boolean&gt; executorManager = this.executorManagers.get(context.getExecutorType()); if(executorManager == null){ throw new ExecuteException(\"no ExecutorManager for type : \" + context.getExecutorType()); } /** * host select */ Host host = hostManager.select(context); if (StringUtils.isEmpty(host.getAddress())) { throw new ExecuteException(String.format(\"fail to execute : %s due to no suitable worker, \" + \"current task needs worker group %s to execute\", context.getCommand(),context.getWorkerGroup())); } context.setHost(host); executorManager.beforeExecute(context); try { /** * task execute */ return executorManager.execute(context); } finally { executorManager.afterExecute(context); }}2.2.2 work获取执行任务新版的work端处理倒是挺简单的,直接看TaskExecuteProcessor就好了，毕竟再网上一层就是netty的处理机制了,NettyServerHandler//TaskExecuteProcessor.javapublic void process(Channel channel, Command command) { //......省略部分代码...... this.doAck(taskExecutionContext); // submit task to manager if (!workerManager.offer(new TaskExecuteThread(taskExecutionContext, taskCallbackService, alertClientService, taskPluginManager))) { logger.info(\"submit task to manager error, queue is full, queue size is {}\", workerManager.getDelayQueueSize()); }}//WorkerManagerThread.javapublic boolean offer(TaskExecuteThread taskExecuteThread) { return workerExecuteQueue.offer(taskExecuteThread);}//WorkerManagerThread.javapublic void run() { Thread.currentThread().setName(\"Worker-Execute-Manager-Thread\"); TaskExecuteThread taskExecuteThread; while (Stopper.isRunning()) { try { taskExecuteThread = workerExecuteQueue.take(); workerExecService.submit(taskExecuteThread); } catch (Exception e) { logger.error(\"An unexpected interrupt is happened, \" + \"the exception will be ignored and this thread will continue to run\", e); } }}看下TaskExecuteThread，关键也是run()方法```public void run() { //……省略部分代码…… task = taskChannel.createTask(taskRequest);// task initthis.task.init();//init varPoolthis.task.getParameters().setVarPool(taskExecutionContext.getVarPool());// task handlethis.task.handle();// task result processif (this.task.getNeedAlert()) { sendAlert(this.task.getTaskAlertInfo());} //......省略部分代码...... } 这里的task已经是最终的任务，主要实现有ShellTask,SqlTask,HttpTask,PythonTask,DataXTask,SeaTunnelTask等link图片来源" }, { "title": "RocketMQ 最大消费次数maxReconsumeTimes", "url": "/posts/rocketMQ_max_maxReconsumeTimes/", "categories": "rocketmq", "tags": "rocketmq", "date": "2021-12-30 00:00:00 +0000", "snippet": "默认事务消息最大次数transactionCheckMax=15，以及间隔时间transactionCheckInterval=60*1000 /** * The maximum number of times the message was checked, if exceed this value, this message will be discarded. */ @ImportantField private int transactionCheckMax = 15; /** * Transaction message check interval. */ @ImportantField private long transactionCheckInterval = 60 * 1000;最大消费次数首先看下普通消息与顺序消息有何不同consumer.start()--&gt;this.defaultMQPushConsumerImpl.start()不同的消费这对应不同的Service: ConsumeMessageOrderlyService和ConsumeMessageConcurrentlyService//if (this.getMessageListenerInner() instanceof MessageListenerOrderly) { this.consumeOrderly = true; this.consumeMessageService = new ConsumeMessageOrderlyService(this, (MessageListenerOrderly) this.getMessageListenerInner());} else if (this.getMessageListenerInner() instanceof MessageListenerConcurrently) { this.consumeOrderly = false; this.consumeMessageService = new ConsumeMessageConcurrentlyService(this, (MessageListenerConcurrently) this.getMessageListenerInner());}this.consumeMessageService.start()结论：1,不论是顺序消息还是普通消息，最大消费次数都是maxReconsumeTimes 2，二者使用的getMaxReconsumeTimes()方法必然不同, 3，ConsumeMessageConcurrentlyService使用的是DefaultMQPushConsumerImpl的getMaxReconsumeTimes() 4，ConsumeMessageOrderlyService 使用的是自己内部的getMaxReconsumeTimes() 5, 从3，4看起来是挺奇怪的一个设计，按理这个既然是两种不同的实现，为何不都放ConsumeMessageService，然后各自实现自己的getMaxReconsumeTimes()呢 6，默认情况下maxReconsumeTimes都是-1, 但是普通消息其实maxReconsumeTimes=16; 而且顺序消息maxReconsumeTimes= Integer.MAX_VALUE，也就是无限次 7,如果达到maxReconsumeTimes次消息后，就真的不能再消费到了吗？其实还有DLQ看下两个getMaxReconsumeTimes()的实现首先是ConsumeMessageOrderlyService，这里很明显，如果不配置默认值是-1，也就意味着如果消费失败，会无限次消费重试 private int getMaxReconsumeTimes() { // default reconsume times: Integer.MAX_VALUE if (this.defaultMQPushConsumer.getMaxReconsumeTimes() == -1) { return Integer.MAX_VALUE; } else { return this.defaultMQPushConsumer.getMaxReconsumeTimes(); } }ConsumeMessageConcurrentlyService的在DefaultMQPushConsumerImpl里实现 private int getMaxReconsumeTimes() { // default reconsume times: 16 if (this.defaultMQPushConsumer.getMaxReconsumeTimes() == -1) { return 16; } else { return this.defaultMQPushConsumer.getMaxReconsumeTimes(); } }重试机制感觉设计挺奇怪的 虽然这两service 构造函数都需要DefaultMQPushConsumerImpl作为参数,但是%RETRY%+consumerGroup–&gt;SCHEDULE_TOPIC_XXXX–&gt;%DLQ%+consumerGroup" }, { "title": "记一次Aviator使用不当导致的线上OOM", "url": "/posts/metaspace_oom/", "categories": "Java", "tags": "Java, File, tools，OOM", "date": "2021-12-01 00:00:00 +0000", "snippet": "问题描述 是的,没错,正如题中所说是Aviator使用不当造成的OOM,为何使用不当后边说 项目上线几个月了,发现云平台时不时会重启server,一般出现在某些高峰期，比如早上7-9点,晚上12点 通过-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath,配置可以获取到dump文件 发现每次dump都是自带监控产生的oom，自带监控的实现是基于Prometheusoom堆栈信息具体监控如下\"pool-3-thread-2\" prio=5 tid=124 RUNNABLE at java.lang.OutOfMemoryError.&lt;init&gt;(OutOfMemoryError.java:48) at sun.util.resources.TimeZoneNames.getContents(TimeZoneNames.java:47) at sun.util.resources.OpenListResourceBundle.loadLookup(OpenListResourceBundle.java:137) at sun.util.resources.OpenListResourceBundle.loadLookupTablesIfNecessary(OpenListResourceBundle.java:128) at sun.util.resources.OpenListResourceBundle.handleKeySet(OpenListResourceBundle.java:96) at java.util.ResourceBundle.containsKey(ResourceBundle.java:1824) Local Variable: sun.util.resources.TimeZoneNames#1 at sun.util.locale.provider.LocaleResources.getTimeZoneNames(LocaleResources.java:263) Local Variable: sun.util.locale.provider.LocaleResources#1 Local Variable: sun.util.resources.en.TimeZoneNames_en#1 Local Variable: java.lang.String#140268 at sun.util.locale.provider.TimeZoneNameProviderImpl.getDisplayNameArray(TimeZoneNameProviderImpl.java:124) at sun.util.locale.provider.TimeZoneNameProviderImpl.getDisplayName(TimeZoneNameProviderImpl.java:99) at sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter.getName(TimeZoneNameUtility.java:240) at sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter.getObject(TimeZoneNameUtility.java:198) at sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter.getObject(TimeZoneNameUtility.java:184) at sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObjectImpl(LocaleServiceProviderPool.java:294) Local Variable: java.lang.String#39894 Local Variable: java.util.HashSet#79 Local Variable: sun.util.locale.provider.TimeZoneNameProviderImpl#1 Local Variable: sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter#1 at sun.util.locale.provider.LocaleServiceProviderPool.getLocalizedObject(LocaleServiceProviderPool.java:265) at sun.util.locale.provider.TimeZoneNameUtility.retrieveDisplayNamesImpl(TimeZoneNameUtility.java:166) Local Variable: java.lang.String[]#4784 Local Variable: java.util.Locale#16 Local Variable: sun.util.locale.provider.LocaleServiceProviderPool#3 at sun.util.locale.provider.TimeZoneNameUtility.retrieveDisplayName(TimeZoneNameUtility.java:137) at java.util.TimeZone.getDisplayName(TimeZone.java:400) Local Variable: java.lang.String#696 Local Variable: sun.util.calendar.ZoneInfo#985 at java.text.SimpleDateFormat.subFormat(SimpleDateFormat.java:1271) at java.text.SimpleDateFormat.format(SimpleDateFormat.java:966) Local Variable: java.lang.StringBuffer#8 Local Variable: java.text.DontCareFieldPosition$1#1 Local Variable: java.text.SimpleDateFormat#190 at java.text.SimpleDateFormat.format(SimpleDateFormat.java:936) at java.text.DateFormat.format(DateFormat.java:345) at sun.net.httpserver.ExchangeImpl.sendResponseHeaders(ExchangeImpl.java:212) Local Variable: java.io.BufferedOutputStream#43 Local Variable: sun.net.httpserver.PlaceholderOutputStream#1 Local Variable: sun.net.httpserver.ExchangeImpl#1 at sun.net.httpserver.HttpExchangeImpl.sendResponseHeaders(HttpExchangeImpl.java:86) at metrics.exporter.PrometheusMetricsExporter.lambda$startServer$0(PrometheusMetricsExporter.java:88)这里翻了下Prometheus看起来来也没啥特殊的，跟中间件的对了下，好像也看不出啥问题，但是发现dump日志只有50M左右,与实际-Xmx2g相差剩余没招只好找自己程序的代码的BUG,CR了几次都没有发现问题，没办法oom了只好看gc日志了，发现fullgc一直在进行，占用的时间也不少看下gc日志这里看出来其实是有fullgc的，还很频繁，因为dump依旧是那个50多M的文件，oom发生的位置也的都是Prometheus监控SimpleDateFormat.format时间，这个按里确实不太对于是又去CR代码，这次有点收获，发现有个老项目迁移过来的代码原本是要用单例的，可能是当时迁移赶时间，没有用单例，但是用的static修饰了该方法，不合理先按代码review规范改一版上线吧，于是把static方法改成了DCL单例即时上线了，神奇的是上线完之后立马就好了，fullgc没了。没有使用单例可能导致对象增多理论上也不一定就会oom，但是dump文件没有体现其他jvm监控现象类加载指标其他正常程序类加载指标又仔细看了DCL内的代码逻辑，有用到aviator规则表达式,跟了下它的实现AviatorEvaluator.compile(script);public static Expression compile(String expression) { return compile(expression, false);}public static Expression compile(String expression, boolean cached) { return getInstance().compile(expression, cached);}public Expression compile(String expression, boolean cached) { return this.compile(expression, expression, cached);}public Expression compile(String cacheKey, String expression, boolean cached) { if (expression != null &amp;&amp; expression.trim().length() != 0) { if (cacheKey != null &amp;&amp; cacheKey.trim().length() != 0) { if (!cached) { return this.innerCompile(expression, cached); } else { //省略部分代码 } } }}private Expression innerCompile(String expression, boolean cached) { ExpressionLexer lexer = new ExpressionLexer(this, expression); CodeGenerator codeGenerator = this.newCodeGenerator(cached); ExpressionParser parser = new ExpressionParser(this, lexer, codeGenerator); Expression exp = parser.parse(); if (this.getOptionValue(Options.TRACE_EVAL).bool) { ((BaseExpression)exp).setExpression(expression); } return exp;}重点是这个newCodeGeneratorpublic CodeGenerator newCodeGenerator(boolean cached) { AviatorClassLoader classLoader = this.getAviatorClassLoader(cached); return this.newCodeGenerator(classLoader);}这里默认cached是false，也就是每次调用这个规则表达式的时候都会去重新classloader一遍public AviatorClassLoader getAviatorClassLoader(boolean cached) { return cached ? this.aviatorClassLoader : new AviatorClassLoader(Thread.currentThread().getContextClassLoader());}看到这里大概能跟前面类加载指标对的上了，为什么类加载指标正常程序是15000左右，这个大概能到4,50000这里差不多了修复后效果看下FullGC明显没了类加载指标其实还忽略了个问题,那就是console.log,搜了下确实有oom的，不过是java.lang.OutOfMemoryError: Metaspace看到没是metaspace, 这就对上了，看下修复前后对比把" }, { "title": "raft/hashicorp raft实现源码笔记", "url": "/posts/raft_hashicorp/", "categories": "raft", "tags": "go, raft", "date": "2021-03-17 00:00:00 +0000", "snippet": "applycase LogCommand: start := time.Now() resp = r.fsm.Apply(req.log) metrics.MeasureSince([]string{\"raft\", \"fsm\", \"apply\"}, start) //func (c *FSM) Apply(log *raft.Log) interface{} {\tbuf := log.Data\tmsgType := structs.MessageType(buf[0])\t// Check if this message type should be ignored when unknown. This is\t// used so that new commands can be added with developer control if older\t// versions can safely ignore the command, or if they should crash.\tignoreUnknown := false\tif msgType&amp;structs.IgnoreUnknownTypeFlag == structs.IgnoreUnknownTypeFlag {\t\tmsgType &amp;= ^structs.IgnoreUnknownTypeFlag\t\tignoreUnknown = true\t}\t// Apply based on the dispatch table, if possible. \tif fn := c.apply[msgType]; fn != nil {\t\treturn fn(buf[1:], log.Index)\t}\t// Otherwise, see if it's safe to ignore. If not, we have to panic so\t// that we crash and our state doesn't diverge.\tif ignoreUnknown {\t\tc.logger.Warn(\"ignoring unknown message type, upgrade to newer version\", \"type\", msgType)\t\treturn nil\t}\tpanic(fmt.Errorf(\"failed to apply request: %#v\", buf))}这里注意下fn的的注册registerCommandfunc init() {\tregisterCommand(structs.RegisterRequestType, (*FSM).applyRegister)\tregisterCommand(structs.DeregisterRequestType, (*FSM).applyDeregister)\tregisterCommand(structs.KVSRequestType, (*FSM).applyKVSOperation)\tregisterCommand(structs.SessionRequestType, (*FSM).applySessionOperation)\t// DEPRECATED (ACL-Legacy-Compat) - Only needed for v1 ACL compat\tregisterCommand(structs.ACLRequestType, (*FSM).applyACLOperation)\tregisterCommand(structs.TombstoneRequestType, (*FSM).applyTombstoneOperation)\tregisterCommand(structs.CoordinateBatchUpdateType, (*FSM).applyCoordinateBatchUpdate)\tregisterCommand(structs.PreparedQueryRequestType, (*FSM).applyPreparedQueryOperation)\tregisterCommand(structs.TxnRequestType, (*FSM).applyTxn)\tregisterCommand(structs.AutopilotRequestType, (*FSM).applyAutopilotUpdate)\tregisterCommand(structs.IntentionRequestType, (*FSM).applyIntentionOperation)\tregisterCommand(structs.ConnectCARequestType, (*FSM).applyConnectCAOperation)\tregisterCommand(structs.ACLTokenSetRequestType, (*FSM).applyACLTokenSetOperation)\tregisterCommand(structs.ACLTokenDeleteRequestType, (*FSM).applyACLTokenDeleteOperation)\tregisterCommand(structs.ACLBootstrapRequestType, (*FSM).applyACLTokenBootstrap)\tregisterCommand(structs.ACLPolicySetRequestType, (*FSM).applyACLPolicySetOperation)\tregisterCommand(structs.ACLPolicyDeleteRequestType, (*FSM).applyACLPolicyDeleteOperation)\tregisterCommand(structs.ConnectCALeafRequestType, (*FSM).applyConnectCALeafOperation)\tregisterCommand(structs.ConfigEntryRequestType, (*FSM).applyConfigEntryOperation)\tregisterCommand(structs.ACLRoleSetRequestType, (*FSM).applyACLRoleSetOperation)\tregisterCommand(structs.ACLRoleDeleteRequestType, (*FSM).applyACLRoleDeleteOperation)\tregisterCommand(structs.ACLBindingRuleSetRequestType, (*FSM).applyACLBindingRuleSetOperation)\tregisterCommand(structs.ACLBindingRuleDeleteRequestType, (*FSM).applyACLBindingRuleDeleteOperation)\tregisterCommand(structs.ACLAuthMethodSetRequestType, (*FSM).applyACLAuthMethodSetOperation)\tregisterCommand(structs.ACLAuthMethodDeleteRequestType, (*FSM).applyACLAuthMethodDeleteOperation)\tregisterCommand(structs.FederationStateRequestType, (*FSM).applyFederationStateOperation)\tregisterCommand(structs.SystemMetadataRequestType, (*FSM).applySystemMetadataOperation)}" }, { "title": "Kafka Raft& Kafka3 源码剖析合集", "url": "/posts/Kafka_raft/", "categories": "kafka", "tags": "kafka", "date": "2021-02-22 00:00:00 +0000", "snippet": "Kafka3 kraft源码剖析合集 . Kafka3.x 请求处理Apis . Kafka3.x 元数据MetadataCache . Kafka 3.x Kraft 实现源码分析 . Kafka如何保证消息的可靠性kafka 0.9 0.10 源码剖析合集选举时序图1选举时序图2 raft loopKIP-595: A Raft Protocol for the Metadata Quorum KAFKA-10492; Core Kafka Raft Implementation (KIP-595) #9130" }, { "title": "Flink CheckPoint实现", "url": "/posts/Flink_CheckPoint/", "categories": "Flink", "tags": "flink, streamsets, realtime", "date": "2020-10-21 00:00:00 +0000", "snippet": "生成Graph的时候，依据checkpoint的配置，会注册一个JobStatusListener，ExecutionGraphBuilder.buildGraph--&gt;executionGraph.enableCheckpointing//// interval of max long value indicates disable periodic checkpoint,// the CheckpointActivatorDeactivator should be created only if the interval is not max valueif (chkConfig.getCheckpointInterval() != Long.MAX_VALUE) { // the periodic checkpoint scheduler is activated and deactivated as a result of // job status changes (running -&gt; on, all other states -&gt; off) registerJobStatusListener(checkpointCoordinator.createActivatorDeactivator());}这里的JobStatusListener就是CheckpointCoordinatorDeActivatorpublic JobStatusListener createActivatorDeactivator() { synchronized (lock) { if (shutdown) { throw new IllegalArgumentException(\"Checkpoint coordinator is shut down\"); } if (jobStatusListener == null) { jobStatusListener = new CheckpointCoordinatorDeActivator(this); } return jobStatusListener; }}当监听到状态为RUNNING时会，起动checkpoint定期调度线程public class CheckpointCoordinatorDeActivator implements JobStatusListener {\tprivate final CheckpointCoordinator coordinator;\tpublic CheckpointCoordinatorDeActivator(CheckpointCoordinator coordinator) {\t\tthis.coordinator = checkNotNull(coordinator);\t}\t@Override\tpublic void jobStatusChanges(JobID jobId, JobStatus newJobStatus, long timestamp, Throwable error) {\t\tif (newJobStatus == JobStatus.RUNNING) {\t\t\t// start the checkpoint scheduler\t\t\tcoordinator.startCheckpointScheduler();//起动CheckpointScheduler\t\t} else {\t\t\t// anything else should stop the trigger for now\t\t\tcoordinator.stopCheckpointScheduler();\t\t}\t}}//CheckpointCoordinatorpublic void startCheckpointScheduler() { synchronized (lock) { if (shutdown) { throw new IllegalArgumentException(\"Checkpoint coordinator is shut down\"); } // make sure all prior timers are cancelled stopCheckpointScheduler(); periodicScheduling = true; currentPeriodicTrigger = scheduleTriggerWithDelay(getRandomInitDelay()); }}//CheckpointCoordinatorprivate ScheduledFuture&lt;?&gt; scheduleTriggerWithDelay(long initDelay) { return timer.scheduleAtFixedRate( new ScheduledTrigger(), initDelay, baseInterval, TimeUnit.MILLISECONDS);//定期调度任务}ScheduledTrigger任务线程private final class ScheduledTrigger implements Runnable { @Override public void run() { try { triggerCheckpoint(true); } catch (Exception e) { LOG.error(\"Exception while triggering checkpoint for job {}.\", job, e); } }}//一些同名方法,然后调用startTriggeringCheckpointpublic CompletableFuture&lt;CompletedCheckpoint&gt; triggerCheckpoint(boolean isPeriodic) { return triggerCheckpoint(checkpointProperties, null, isPeriodic, false);}@VisibleForTestingpublic CompletableFuture&lt;CompletedCheckpoint&gt; triggerCheckpoint( CheckpointProperties props, @Nullable String externalSavepointLocation, boolean isPeriodic, boolean advanceToEndOfTime) { if (advanceToEndOfTime &amp;&amp; !(props.isSynchronous() &amp;&amp; props.isSavepoint())) { return FutureUtils.completedExceptionally(new IllegalArgumentException( \"Only synchronous savepoints are allowed to advance the watermark to MAX.\")); } CheckpointTriggerRequest request = new CheckpointTriggerRequest(props, externalSavepointLocation, isPeriodic, advanceToEndOfTime); requestDecider .chooseRequestToExecute(request, isTriggering, lastCheckpointCompletionRelativeTime) .ifPresent(this::startTriggeringCheckpoint); return request.onCompletionPromise;}//CheckpointCoordinatorfinal long checkpointId = checkpoint.getCheckpointId();snapshotTaskState(\ttimestamp,\tcheckpointId,\tcheckpoint.getCheckpointStorageLocation(),\trequest.props,\texecutions,\trequest.advanceToEndOfTime);//CheckpointCoordinatorprivate void snapshotTaskState(\tlong timestamp,\tlong checkpointID,\tCheckpointStorageLocation checkpointStorageLocation,\tCheckpointProperties props,\tExecution[] executions,\tboolean advanceToEndOfTime) {\tfinal CheckpointOptions checkpointOptions = new CheckpointOptions(\t\tprops.getCheckpointType(),\t\tcheckpointStorageLocation.getLocationReference(),\t\tisExactlyOnceMode,\t\tprops.getCheckpointType() == CheckpointType.CHECKPOINT &amp;&amp; unalignedCheckpointsEnabled);\t// send the messages to the tasks that trigger their checkpoint\tfor (Execution execution: executions) {\t\tif (props.isSynchronous()) {\t\t\texecution.triggerSynchronousSavepoint(checkpointID, timestamp, checkpointOptions, advanceToEndOfTime);\t\t} else {\t\t\texecution.triggerCheckpoint(checkpointID, timestamp, checkpointOptions);\t\t}\t}}Execution.triggerCheckpoint–&gt;Execution.triggerCheckpointHelper–&gt;taskManagerGateway.triggerCheckpoint–&gt;TaskManagerGateway.triggerCheckpoint–&gt;taskExecutorGateway.triggerCheckpoint()这里taskExecutorGateway的实现类有TaskExecutor，在TaskExecutor的triggerCheckpoint方法里看到了triggerCheckpointBarrier//TaskExecutor triggerCheckpointBarrierpublic CompletableFuture&lt;Acknowledge&gt; triggerCheckpoint( ExecutionAttemptID executionAttemptID, long checkpointId, long checkpointTimestamp, CheckpointOptions checkpointOptions, boolean advanceToEndOfEventTime) { log.debug(\"Trigger checkpoint {}@{} for {}.\", checkpointId, checkpointTimestamp, executionAttemptID); final CheckpointType checkpointType = checkpointOptions.getCheckpointType(); if (advanceToEndOfEventTime &amp;&amp; !(checkpointType.isSynchronous() &amp;&amp; checkpointType.isSavepoint())) { throw new IllegalArgumentException(\"Only synchronous savepoints are allowed to advance the watermark to MAX.\"); } final Task task = taskSlotTable.getTask(executionAttemptID); if (task != null) { task.triggerCheckpointBarrier(checkpointId, checkpointTimestamp, checkpointOptions, advanceToEndOfEventTime); return CompletableFuture.completedFuture(Acknowledge.get()); } else { final String message = \"TaskManager received a checkpoint request for unknown task \" + executionAttemptID + '.'; log.debug(message); return FutureUtils.completedExceptionally(new CheckpointException(message, CheckpointFailureReason.TASK_CHECKPOINT_FAILURE)); }}//if (executionState == ExecutionState.RUNNING &amp;&amp; invokable != null) {\ttry {\t\tinvokable.triggerCheckpointAsync(checkpointMetaData, checkpointOptions, advanceToEndOfEventTime);\t}\tcatch (RejectedExecutionException ex) {}}这里的invokable可以是StreamTask，SourceStreamTask，这两其实最终调用的是一个，因为子类调用super.triggerCheckpointAsync主要流程 –&gt;SourceStreamTask.triggerCheckpointAsync–&gt;StreamTask.triggerCheckpointAsyn–&gt;StreamTask.triggerCheckpoint –&gt;StreamTask.performCheckpoint–&gt;subtaskCheckpointCoordinator.checkpointState–&gt;operatorChain.prepareSnapshotPreBarrier –&gt;operatorChain.broadcastEvent(CheckpointBarrier)–&gt;subtaskCheckpointCoordinator–&gt;takeSnapshotSync –&gt;operatorChain.snapshotState()–&gt;subtaskCheckpointCoordinator.finishAndReportAsync –&gt;AsyncCheckpointRunnable.reportCompletedSnapshotStates–&gt; TaskStateManagerImpl.reportTaskStateSnapshots –&gt;checkpointResponder.acknowledgeCheckpoint–&gt;checkpointCoordinatorGateway.acknowledgeCheckpoint –&gt;JobMaster.acknowledgeCheckpoint–&gt;executionGraphHandler.acknowledgeCheckpoint –&gt;coordinator.receiveAcknowledgeMessage–&gt;coordinator.completePendingCheckpoint –&gt;coordinator.sendAcknowledgeMessages–&gt;ee.notifyCheckpointComplete–&gt; coordinatorContext.notifyCheckpointComplete(checkpointId);最新版的都抽到SubtaskCheckpointCoordinator里了public void checkpointState(\t\tCheckpointMetaData metadata,\t\tCheckpointOptions options,\t\tCheckpointMetrics metrics,\t\tOperatorChain&lt;?, ?&gt; operatorChain,\t\tSupplier&lt;Boolean&gt; isCanceled) throws Exception {\tcheckNotNull(options);\tcheckNotNull(metrics);\t// All of the following steps happen as an atomic step from the perspective of barriers and\t// records/watermarks/timers/callbacks.\t// We generally try to emit the checkpoint barrier as soon as possible to not affect downstream\t// checkpoint alignments\tif (lastCheckpointId &gt;= metadata.getCheckpointId()) {\t\tLOG.info(\"Out of order checkpoint barrier (aborted previously?): {} &gt;= {}\", lastCheckpointId, metadata.getCheckpointId());\t\tchannelStateWriter.abort(metadata.getCheckpointId(), new CancellationException(), true);\t\tcheckAndClearAbortedStatus(metadata.getCheckpointId());\t\treturn;\t}\t// Step (0): Record the last triggered checkpointId and abort the sync phase of checkpoint if necessary.\tlastCheckpointId = metadata.getCheckpointId();\tif (checkAndClearAbortedStatus(metadata.getCheckpointId())) {\t\t// broadcast cancel checkpoint marker to avoid downstream back-pressure due to checkpoint barrier align.\t\toperatorChain.broadcastEvent(new CancelCheckpointMarker(metadata.getCheckpointId()));\t\tLOG.info(\"Checkpoint {} has been notified as aborted, would not trigger any checkpoint.\", metadata.getCheckpointId());\t\treturn;\t}\t// Step (1): Prepare the checkpoint, allow operators to do some pre-barrier work.\t// The pre-barrier work should be nothing or minimal in the common case.\toperatorChain.prepareSnapshotPreBarrier(metadata.getCheckpointId());\t// Step (2): Send the checkpoint barrier downstream\toperatorChain.broadcastEvent(\t\tnew CheckpointBarrier(metadata.getCheckpointId(), metadata.getTimestamp(), options),\t\toptions.isUnalignedCheckpoint());\t// Step (3): Prepare to spill the in-flight buffers for input and output\tif (options.isUnalignedCheckpoint()) {\t\tprepareInflightDataSnapshot(metadata.getCheckpointId());\t}\t// Step (4): Take the state snapshot. This should be largely asynchronous, to not impact progress of the\t// streaming topology\tMap&lt;OperatorID, OperatorSnapshotFutures&gt; snapshotFutures = new HashMap&lt;&gt;(operatorChain.getNumberOfOperators());\ttry {\t\tif (takeSnapshotSync(snapshotFutures, metadata, metrics, options, operatorChain, isCanceled)) {\t\t\tfinishAndReportAsync(snapshotFutures, metadata, metrics, options);\t\t} else {\t\t\tcleanup(snapshotFutures, metadata, metrics, new Exception(\"Checkpoint declined\"));\t\t}\t} catch (Exception ex) {\t\tcleanup(snapshotFutures, metadata, metrics, ex);\t\tthrow ex;\t}}" }, { "title": "Structured Streaming Exactly Once", "url": "/posts/Structured_Streaming_Exactly-Once/", "categories": "spark", "tags": "Spark", "date": "2020-10-20 00:00:00 +0000", "snippet": "" }, { "title": "Flink Exactly-Once", "url": "/posts/Flink_Exactly-Once/", "categories": "Flink", "tags": "flink, streamsets, realtime", "date": "2020-10-20 00:00:00 +0000", "snippet": "source 端checkpoint后 kafka consumer提交offset, FlinkKafkaConsumerBase.notifyCheckpointComplete–&gt;fetcher.commitInternalOffsetsToKafka–&gt; AbstractFetcher.doCommitInternalOffsetsToKafka public final void notifyCheckpointComplete(long checkpointId) throws Exception { if (!running) { LOG.debug(\"notifyCheckpointComplete() called on closed source\"); return; } final AbstractFetcher&lt;?, ?&gt; fetcher = this.kafkaFetcher; if (fetcher == null) { LOG.debug(\"notifyCheckpointComplete() called on uninitialized source\"); return; } if (offsetCommitMode == OffsetCommitMode.ON_CHECKPOINTS) { // only one commit operation must be in progress if (LOG.isDebugEnabled()) { LOG.debug( \"Consumer subtask {} committing offsets to Kafka/ZooKeeper for checkpoint {}.\", getRuntimeContext().getIndexOfThisSubtask(), checkpointId); } try { final int posInMap = pendingOffsetsToCommit.indexOf(checkpointId); if (posInMap == -1) { LOG.warn( \"Consumer subtask {} received confirmation for unknown checkpoint id {}\", getRuntimeContext().getIndexOfThisSubtask(), checkpointId); return; } @SuppressWarnings(\"unchecked\") Map&lt;KafkaTopicPartition, Long&gt; offsets = (Map&lt;KafkaTopicPartition, Long&gt;) pendingOffsetsToCommit.remove(posInMap); // remove older checkpoints in map for (int i = 0; i &lt; posInMap; i++) { pendingOffsetsToCommit.remove(0); } if (offsets == null || offsets.size() == 0) { LOG.debug( \"Consumer subtask {} has empty checkpoint state.\", getRuntimeContext().getIndexOfThisSubtask()); return; } fetcher.commitInternalOffsetsToKafka(offsets, offsetCommitCallback); } catch (Exception e) { if (running) { throw e; } // else ignore exception if we are no longer running } } }" }, { "title": "Structured Streaming VS Flink", "url": "/posts/sss_vs_flink/", "categories": "Java", "tags": "Java, spark, flink", "date": "2020-10-15 00:00:00 +0000", "snippet": "再记录下spark以及flink的一些差异实时处理方面 spark 这里只关注structured streaming,因为工作中以sss为主，sss通常还是micro batch， 默认100 milliseconds， 但是在since Spark 2.3引入新的Continuous Processing，这个老实说感觉挺鸡勒的 sss在多流join方面也是有些限制的,Support matrix for joins in streaming queries 贴下官方的描述Continuous Processing Internally, by default, Structured Streaming queries are processed using a micro-batch processing engine, which processes data streams as aseries of small batch jobs thereby achieving end-to-end latencies as low as 100 milliseconds and exactly-once fault-tolerance guarantees. However, since Spark 2.3, we have introduced a new low-latency processing mode called Continuous Processing, which can achieve end-to-end latencies as low as 1 millisecond with at-least-once guarantees. Without changing the Dataset/DataFrame operations in your queries, you will be able to choose the mode based on your application requirements 另外： 对的支持也是相当有限的，即使在2.4版本 批处理spark spark目前在离线批处理方面应该比flink应用的更加广泛了，即便是用的hive引擎页大多是spark flink已经整合了hive,当然也在整合delta lake, hudi， iceberg等的，具备流批处理的能力" }, { "title": "Kafka事务性实现", "url": "/posts/kafka_Transaction/", "categories": "kafka", "tags": "kafka", "date": "2020-08-20 00:00:00 +0000", "snippet": "KIP-98 - Exactly Once Delivery and Transactional Messaging 事务消息示例：// Init transactions call should always happen first in order to clear zombie transactions from previous generation.//1. 初始事务producer.initTransactions();// Begin a new transaction session.//2. 开始一个事务操作producer.beginTransaction();//3. 发送消息for (ConsumerRecord&lt;Integer, String&gt; record : records) { // Process the record and send to downstream. ProducerRecord&lt;Integer, String&gt; customizedRecord = transform(record); producer.send(customizedRecord);}Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets = consumerOffsets();// Checkpoint the progress by sending offsets to group coordinator broker.// Note that this API is only available for broker &gt;= 2.5.producer.sendOffsetsToTransaction(offsets, consumer.groupMetadata());// Finish the transaction. All sent records should be visible for consumption now.//commit事务producer.commitTransaction();1. Finding a transaction coordinator – the FindCoordinatorRequest2. Getting a producer Id – the InitPidRequestpublic void initTransactions() { throwIfNoTransactionManager(); throwIfProducerClosed(); TransactionalRequestResult result = transactionManager.initializeTransactions(); sender.wakeup(); result.await(maxBlockTimeMs, TimeUnit.MILLISECONDS);}//transactionManagersynchronized TransactionalRequestResult initializeTransactions(ProducerIdAndEpoch producerIdAndEpoch) { boolean isEpochBump = producerIdAndEpoch != ProducerIdAndEpoch.NONE; return handleCachedTransactionRequestResult(() -&gt; { // If this is an epoch bump, we will transition the state as part of handling the EndTxnRequest if (!isEpochBump) { transitionTo(State.INITIALIZING); log.info(\"Invoking InitProducerId for the first time in order to acquire a producer ID\"); } else { log.info(\"Invoking InitProducerId with current producer ID and epoch {} in order to bump the epoch\", producerIdAndEpoch); } //发送InitProducerIdRequest InitProducerIdRequestData requestData = new InitProducerIdRequestData() .setTransactionalId(transactionalId) .setTransactionTimeoutMs(transactionTimeoutMs) .setProducerId(producerIdAndEpoch.producerId) .setProducerEpoch(producerIdAndEpoch.epoch); InitProducerIdHandler handler = new InitProducerIdHandler(new InitProducerIdRequest.Builder(requestData), isEpochBump); enqueueRequest(handler); return handler.result; }, State.INITIALIZING); }3. Starting a Transaction – The beginTransaction() API4. The consume-transform-produce loop4.1 AddPartitionsToTxnRequest4.2 ProduceRequest4.3 AddOffsetCommitsToTxnRequest4.4 TxnOffsetCommitRequest5 Committing or Aborting a Transaction5.1 EndTxnRequest5.2 WriteTxnMarkerRequest5.3 Writing the final Commit or Abort MessageinitTransactions 依据transactionId 获取PID与epochproducer(transactionalId–&gt;PID)AddPartitionsToTxnRequestTxnOffsetCommitRequsetTransactions in Apache Kafkahttps://docs.google.com/document/d/1Rlqizmk7QCDe8qAnVW5e5X8rGvn6m2DCR3JR2yqwVjc/edit https://docs.google.com/document/d/11Jqy_GjUGtdXJK94XGsEIK7CP1SnQGdp2eF0wSw9ra8/edit#" }, { "title": "Delta 实现分析", "url": "/posts/Delta_Lake/", "categories": "delta lake", "tags": "delta lake", "date": "2020-06-29 00:00:00 +0000", "snippet": "delta lakeAPI DeltaTableDeltaTable(DeltaTableOperations)executeDeleteexecuteUpdateSQL DeltaSparkSessionExtensionDeltaDataSourceclass DeltaDataSource extends RelationProvider with StreamSourceProvider with StreamSinkProvider with CreatableRelationProvider with DataSourceRegister with TableProvider with DeltaLogging { RelationProvider 批量读取 CreatableRelationProvider 批量写入 StreamSourceProvider stream source StreamSinkProvider stream sink" }, { "title": "分布式事务消息最终一致性解决方案", "url": "/posts/mq_distributed/", "categories": "distributed", "tags": "distributed, 事务隔离一致性", "date": "2020-06-28 00:00:00 +0000", "snippet": "最近面试了几位开发的同学，聊到消息最终一致性方案，有的完全没用过也没看过有的用过也说不清楚，但是这个比起GTS这些，算是几年前的老话题了,如是准备再理一理：基于本地消息服务最终一致性方案核心： 将业务逻辑与消息记录放在同一个事务里边执行， 业务逻辑执行与消息记录一致. 1，本地业务数据处理 2.1本地消息数据处理(1+2.1需要在同一个事务)，要么成功，要么失败 2.2 发送消息给mq 3，消息投递到Consumer消费端 4,消费端服务处理业务数据 5，业务端业务数据消费成功，反馈给comsumer 6，comsumer返回ack非消息中间件MQ 7,发送ack消息，更新本地消息表，表示已经完成或者消费成功，修改消息状态 8，恢复系统定时轮询消息表，找出没有消费成功ack的消息 9，重新发送没有消费成功的消息bad case 如果1，2.1出错，本地事务回滚，业务数据，消息都没有变化，啥都没做 如果2.2 发送失败，定时任务系统会查询消息表，依据状态重新发送 3-7步骤出错，也没法ack本地消息表，都会重新发送消息 既然会重新发送消息，那消费端就要考虑重复消息的问题，也就是幂等，尤其是在7.1/7.2确认过程中失败了，一旦重复发送，如果不幂等，业务逻辑就会重复执行，如果是减库存或者支付场景，就会出现多加或者多减数据，出现不一致基于独立消息服务的最终一致性方案异常case： 业务执行成功或者失败，但是没有确定状态，导致中间件消息状态一直为”待处理”状态RocketMQ类支持事务最终一致性方案下游幂等问题：下游消费服务，正常情况下都会ack消费消息的状态，但是也存在消息处理完之后一直没有ack消费状态的情况， 这时就会出现重复消费消息，如果之前业务没有执行成功， 重复消费是没有问题的但是如果之前的消息业务逻辑处理成功了， 再次消费就可能出现问题了。所以这个时候就必须考虑幂等的问题回滚问题" }, { "title": "Delta Lake 实现Delta、Hudi、Iceberg 对比", "url": "/posts/delta_lake_compare/", "categories": "delta lake", "tags": "delta lake", "date": "2020-06-28 00:00:00 +0000", "snippet": "Delta LakeHudi操作上 update类似insert支持copy on Write&amp;Read on MergeIceberg" }, { "title": "Flink Graph转换", "url": "/posts/FlinkSQL_Graph/", "categories": "Flink", "tags": "flink, streamsets, realtime", "date": "2019-11-20 00:00:00 +0000", "snippet": "transformations–&gt;streamGraph(Operator)–&gt;JobGraph–&gt;ExecutionGraphStreamGraph(Operator)–&gt;JobGraph//StreamExecutionEnvironmentdef execute() = javaEnv.execute()public JobExecutionResult execute() throws Exception { return this.execute(\"Flink Streaming Job\");}public JobExecutionResult execute(String jobName) throws Exception { Preconditions.checkNotNull(jobName, \"Streaming Job name should not be null.\"); return this.execute(this.getStreamGraph(jobName));}//LocalStreamEnvironmentpublic JobExecutionResult execute(StreamGraph streamGraph) throws Exception { JobGraph jobGraph = streamGraph.getJobGraph(); ...}LocalStreamEnvironment的话，直接调用streamGraph的getJobGraph()的到JobGraph public JobGraph getJobGraph() { return this.getJobGraph((JobID)null); }public JobGraph getJobGraph(@Nullable JobID jobID) { if (this.isIterative() &amp;&amp; this.checkpointConfig.isCheckpointingEnabled() &amp;&amp; !this.checkpointConfig.isForceCheckpointing()) { throw new UnsupportedOperationException(\"Checkpointing is currently not supported by default for iterative jobs, as we cannot guarantee exactly once semantics. State checkpoints happen normally, but records in-transit during the snapshot will be lost upon failure. \\nThe user can force enable state checkpoints with the reduced guarantees by calling: env.enableCheckpointing(interval,true)\"); } else { return StreamingJobGraphGenerator.createJobGraph(this, jobID); }}主要下StreamingJobGraphGenerator生成StreamingJobGraphGenerator.createJobGraph(this, jobID);再看下remote的吧//RemoteStreamEnvironmentpublic JobExecutionResult execute(StreamGraph streamGraph) throws Exception { this.transformations.clear(); return this.executeRemotely(streamGraph, this.jarFiles);}//RemoteStreamEnvironment@Deprecatedprotected JobExecutionResult executeRemotely(StreamGraph streamGraph, List&lt;URL&gt; jarFiles) throws ProgramInvocationException { return executeRemotely(streamGraph, this.getClass().getClassLoader(), this.getConfig(), jarFiles, this.host, this.port, this.clientConfiguration, this.globalClasspaths, this.savepointRestoreSettings);}//RemoteStreamEnvironmentprivate static JobExecutionResult executeRemotely(StreamGraph streamGraph, ClassLoader envClassLoader, ExecutionConfig executionConfig, List&lt;URL&gt; jarFiles, String host, int port, Configuration clientConfiguration, List&lt;URL&gt; globalClasspaths, SavepointRestoreSettings savepointRestoreSettings) throws ProgramInvocationException {...var12 = client.run(streamGraph, jarFiles, globalClasspaths, userCodeClassLoader, savepointRestoreSettings).getJobExecutionResult();...}//ClusterClientpublic JobSubmissionResult run(FlinkPlan compiledPlan, List&lt;URL&gt; libraries, List&lt;URL&gt; classpaths, ClassLoader classLoader, SavepointRestoreSettings savepointSettings) throws ProgramInvocationException { JobGraph job = getJobGraph(this.flinkConfig, compiledPlan, libraries, classpaths, savepointSettings); return this.submitJob(job, classLoader);}//ClusterClientpublic static JobGraph getJobGraph(Configuration flinkConfig, FlinkPlan optPlan, List&lt;URL&gt; jarFiles, List&lt;URL&gt; classpaths, SavepointRestoreSettings savepointSettings) { JobGraph job; if (optPlan instanceof StreamingPlan) { job = ((StreamingPlan)optPlan).getJobGraph(); job.setSavepointRestoreSettings(savepointSettings); } else { JobGraphGenerator gen = new JobGraphGenerator(flinkConfig); job = gen.compileJobGraph((OptimizedPlan)optPlan); } ...}注意下 StreamGraph extends StreamingPlan，所以这里就是StreamGraphJobGraph–&gt;ExecutionGraph LegacyScheduler//JobMasterschedulerAssignedFuture.thenRun(this::startScheduling);//JobMasterprivate void startScheduling() { checkState(jobStatusListener == null); // register self as job status change listener jobStatusListener = new JobManagerJobStatusListener(); schedulerNG.registerJobStatusListener(jobStatusListener); schedulerNG.startScheduling();}//LegacySchedulerpublic void startScheduling() { mainThreadExecutor.assertRunningInMainThread(); try { executionGraph.scheduleForExecution(); } catch (Throwable t) { executionGraph.failGlobal(t); }}看下executionGraph的构造//LegacyScheduler构造函数this.executionGraph = createAndRestoreExecutionGraph(jobManagerJobMetricGroup, checkNotNull(shuffleMaster), checkNotNull(partitionTracker));//LegacyScheduler.createAndRestoreExecutionGraphprivate ExecutionGraph createAndRestoreExecutionGraph( JobManagerJobMetricGroup currentJobManagerJobMetricGroup, ShuffleMaster&lt;?&gt; shuffleMaster, PartitionTracker partitionTracker) throws Exception { ExecutionGraph newExecutionGraph = createExecutionGraph(currentJobManagerJobMetricGroup, shuffleMaster, partitionTracker); final CheckpointCoordinator checkpointCoordinator = newExecutionGraph.getCheckpointCoordinator(); if (checkpointCoordinator != null) { // check whether we find a valid checkpoint if (!checkpointCoordinator.restoreLatestCheckpointedState( newExecutionGraph.getAllVertices(), false, false)) { // check whether we can restore from a savepoint tryRestoreExecutionGraphFromSavepoint(newExecutionGraph, jobGraph.getSavepointRestoreSettings()); } } return newExecutionGraph;}link:Flink Job提交流程(Dispatcher之后)" }, { "title": "Flink Join说明", "url": "/posts/FlinkSQL_Join/", "categories": "Flink", "tags": "flink, streamsets, realtime", "date": "2019-11-19 00:00:00 +0000", "snippet": "Unbounded JOINRegula/Equi-joinRegularjoin,没有time相关条件？SELECT *FROM Orders INNER JOIN Product ON Orders.productId = Product.idSELECT *FROM Orders LEFT JOIN Product ON Orders.productId = Product.idSELECT *FROM Orders RIGHT JOIN Product ON Orders.productId = Product.idSELECT *FROM Orders FULL OUTER JOIN Product ON Orders.productId = Product.idbounded JOINTime-windowed Join也算是Regular join的子集A time-windowed join requires at least one equi-join predicate and a join condition that bounds the time on both sides. ltime = rtime . ltime &gt;= rtime AND ltime &lt; rtime + INTERVAL ‘10’ MINUTE . ltime BETWEEN rtime - INTERVAL ‘10’ SECOND AND rtime + INTERVAL ‘5’ SECONDSELECT *FROM Orders o, Shipments sWHERE o.id = s.orderId AND o.ordertime BETWEEN s.shiptime - INTERVAL '4' HOUR AND s.shiptimeFlink Sql JoinWindow Join&amp;Interval JoinFlink执行计划都是DataStreamWindowJoin？Window Joinval orangeStream: DataStream[Integer] = ...val greenStream: DataStream[Integer] = ...orangeStream.join(greenStream) .where(elem =&gt; /* select key */) .equalTo(elem =&gt; /* select key */) .window(TumblingEventTimeWindows.of(Time.milliseconds(2))) .apply { (e1, e2) =&gt; e1 + \",\" + e2 }window join sql?SELECT t2.key,TUMBLE_START(t2.rt, INTERVAL '4' SECOND),TUMBLE_END(t2.rt, INTERVAL '4' SECOND), COUNT(t1.key)FROM T1 AS t1 join T2 AS t2 ON t1.key = t2.key AND t1.rt BETWEEN t2.rt - INTERVAL '3' SECOND AND t2.rt + INTERVAL '3' SECONDGROUP BY TUMBLE(t2.rt, INTERVAL '4' SECOND),t2.keyInterval Join. b.timestamp ∈ [a.timestamp + lowerBound; a.timestamp + upperBound] . or a.timestamp + lowerBound &lt;= b.timestamp &lt;= a.timestamp + upperBoundval orangeStream: DataStream[Integer] = ...val greenStream: DataStream[Integer] = ...orangeStream .keyBy(elem =&gt; /* select key */) .intervalJoin(greenStream.keyBy(elem =&gt; /* select key */)) .between(Time.milliseconds(-2), Time.milliseconds(1)) .process(new ProcessJoinFunction[Integer, Integer, String] { override def processElement(left: Integer, right: Integer, ctx: ProcessJoinFunction[Integer, Integer, String]#Context, out: Collector[String]): Unit = { out.collect(left + \",\" + right); } }); });Window Join&amp;Interval Join" }, { "title": "Flink NoWindowJoin原理", "url": "/posts/FlinkSQL_NoWindowJoin/", "categories": "Flink", "tags": "flink, streamsets, realtime", "date": "2019-11-18 00:00:00 +0000", "snippet": "示例：object StreamTableExample { // ************************************************************************* // PROGRAM // ************************************************************************* def main(args: Array[String]): Unit = { // set up execution environment val env = StreamExecutionEnvironment.getExecutionEnvironment val tEnv = StreamTableEnvironment.create(env) val orderA = env.fromCollection(Seq( OrderA(1L, \"beer\", 3), OrderA(1L, \"diaper\", 4), OrderA(3L, \"rubber\", 2))) //.toTable(tEnv,'aId,'product1,'amount1) val orderB = env.fromCollection(Seq( OrderB(1L, \"pen\", 3), OrderB(2L, \"rubber\", 3), OrderB(4L, \"beer\", 1))) //.toTable(tEnv,'bId,'product2,'amount2) tEnv.registerDataStream(\"orderA\",orderA) tEnv.registerDataStream(\"orderB\",orderB) val result = tEnv.sqlQuery(\"select orderA.aId as aId,orderB.bId as bId, product1, amount1 from orderA Inner join orderB on orderA.aId = orderB.bId\" )// tEnv.registerDataStream(\"retTable\",result.toRetractStream[OrderRet]);// // union the two tables// val result: DataStream[OrderRet] = orderA.join(orderB).where('aId === 'bId)// .select( 'aId,'bId,'product1, 'amount1)// // .where('amount &gt; 2)// .toAppendStream[OrderRet]//// tEnv.sqlQuery(\"select aId,bId,product1,amount1 from retTable where amount1&gt;3\") println(tEnv.explain(result)) result.toRetractStream[OrderRet].print() env.execute() } // ************************************************************************* // USER DATA TYPES // ************************************************************************* case class OrderA(aId: Long, product1: String, amount1: Int) case class OrderB(bId: Long, product2: String, amount2: Int) case class OrderRet(aId: Long,bId: Long, product1: String, amount1: Int)}sql语句：select orderA.aId as aId,orderB.bId as bId, product1, amount1 from orderA Inner join orderB on orderA.aId = orderB.bId执行计划：== Abstract Syntax Tree ==LogicalProject(aId=[$0], bId=[$3], product1=[$1], amount1=[$2]) LogicalJoin(condition=[=($0, $3)], joinType=[inner]) LogicalTableScan(table=[[default_catalog, default_database, orderA]]) LogicalTableScan(table=[[default_catalog, default_database, orderB]])== Optimized Logical Plan ==DataStreamCalc(select=[aId, bId, product1, amount1]) DataStreamJoin(where=[=(aId, bId)], join=[aId, product1, amount1, bId], joinType=[InnerJoin]) DataStreamScan(id=[1], fields=[aId, product1, amount1]) DataStreamCalc(select=[bId]) DataStreamScan(id=[2], fields=[bId, product2, amount2])== Physical Execution Plan ==Stage 1 : Data Source\tcontent : collect elements with CollectionInputFormatStage 2 : Data Source\tcontent : collect elements with CollectionInputFormat\tStage 3 : Operator\t\tcontent : from: (aId, product1, amount1)\t\tship_strategy : REBALANCE\t\tStage 4 : Operator\t\t\tcontent : from: (bId, product2, amount2)\t\t\tship_strategy : REBALANCE\t\t\tStage 5 : Operator\t\t\t\tcontent : select: (bId)\t\t\t\tship_strategy : FORWARD\t\t\t\tStage 8 : Operator\t\t\t\t\tcontent : InnerJoin(where: (=(aId, bId)), join: (aId, product1, amount1, bId))\t\t\t\t\tship_strategy : HASH\t\t\t\t\tStage 9 : Operator\t\t\t\t\t\tcontent : select: (aId, bId, product1, amount1)\t\t\t\t\t\tship_strategy : FORWARD这里debug可以看下Optimized Logical Plan 看下DataStreamJoin的translateToPlan 其中比较重要的还是joinOperator，这里是LegacyKeyedCoProcessOperator, 顺便看下LegacyKeyedCoProcessOperator LegacyKeyedCoProcessOperator实现TwoInputStreamOperator接口，实现了processElement1(StreamRecord var1)和processElement2(StreamRecord var1)，public void processElement1(StreamRecord&lt;IN1&gt; element) throws Exception {\tthis.collector.setTimestamp(element);\tthis.context.element = element;\t((CoProcessFunction)this.userFunction).processElement1(element.getValue(), this.context, this.collector);\tthis.context.element = null;}public void processElement2(StreamRecord&lt;IN2&gt; element) throws Exception {\tthis.collector.setTimestamp(element);\tthis.context.element = element;\t((CoProcessFunction)this.userFunction).processElement2(element.getValue(), this.context, this.collector);\tthis.context.element = null;}这里的userFunction可以是NonWindowLeftRightJoin，NonWindowInnerJoin，NonWindowLeftRightJoinWithNonEquiPredicates，NonWindowFullJoin等，具体可以看DataStreamJoinToCoProcessTranslator的createJoinOperator方法，依据不同的join类型生成不同的userFunction 直接看NonWindowLeftRightJoin的processElementoverride def processElement(\tvalue: CRow,\tctx: CoProcessFunction[CRow, CRow, CRow]#Context,\tout: Collector[CRow],\tcurrentSideState: MapState[Row, JTuple2[Long, Long]],\totherSideState: MapState[Row, JTuple2[Long, Long]],\trecordFromLeft: Boolean): Unit = {\tval inputRow = value.row\tupdateCurrentSide(value, ctx, currentSideState)\tcRowWrapper.reset()\tcRowWrapper.setCollector(out)\tcRowWrapper.setChange(value.change)\t// join other side data\tif (recordFromLeft == isLeftJoin) {\tpreservedJoin(inputRow, recordFromLeft, otherSideState)\t} else {\tretractJoin(value, recordFromLeft, currentSideState, otherSideState)\t}}preservedJoin之后会调用到callJoinFunctionprotected def callJoinFunction(\t\tinputRow: Row,\t\tinputRowFromLeft: Boolean,\t\totherSideRow: Row,\t\tcRowWrapper: Collector[Row]): Unit = {\t\tif (inputRowFromLeft) {\t\tjoinFunction.join(inputRow, otherSideRow, cRowWrapper)\t\t} else {\t\tjoinFunction.join(otherSideRow, inputRow, cRowWrapper)\t\t}}这里的joinFunction是通过gencode生成的，将之前LegacyKeyedCoProcessOperator里的genJoinFuncCode,copy出来大概是这样的public class DataStreamJoinRule$25 extends org.apache.flink.api.common.functions.RichFlatJoinFunction { final org.apache.flink.types.Row out = new org.apache.flink.types.Row(4); public DataStreamJoinRule$25() throws Exception { } @Override public void open(org.apache.flink.configuration.Configuration parameters) throws Exception { } @Override public void join(Object _in1, Object _in2, org.apache.flink.util.Collector c) throws Exception { org.apache.flink.types.Row in1 = (org.apache.flink.types.Row) _in1; org.apache.flink.types.Row in2 = (org.apache.flink.types.Row) _in2; boolean isNull$22 = (java.lang.Integer) in1.getField(2) == null; int result$21; if (isNull$22) { result$21 = -1; } else { result$21 = (java.lang.Integer) in1.getField(2); } boolean isNull$18 = (java.lang.Long) in1.getField(0) == null; long result$17; if (isNull$18) { result$17 = -1L; } else { result$17 = (java.lang.Long) in1.getField(0); } boolean isNull$24 = (java.lang.Long) in2.getField(0) == null; long result$23; if (isNull$24) { result$23 = -1L; } else { result$23 = (java.lang.Long) in2.getField(0); } boolean isNull$20 = (java.lang.String) in1.getField(1) == null; java.lang.String result$19; if (isNull$20) { result$19 = \"\"; } else { result$19 = (java.lang.String) (java.lang.String) in1.getField(1); } if (isNull$18) { out.setField(0, null); } else { out.setField(0, result$17); } if (isNull$20) { out.setField(1, null); } else { out.setField(1, result$19); } if (isNull$22) { out.setField(2, null); } else { out.setField(2, result$21); } if (isNull$24) { out.setField(3, null); } else { out.setField(3, result$23); } c.collect(out); } @Override public void close() throws Exception { }}这是一个RichFlatJoinFunction函数，主要是将两个流中的需要的字段提取生成一个Row?在经过sql解析生成AST以及各种逻辑/物理计划优化后最后调用toDataStream/toRetractStream这里会包装一串transformations，于StreamGraph生成有关 private def toDataStream[T]( table: Table, modifyOperation: OutputConversionModifyOperation) : DataStream[T] = { val transformations = planner .translate(Collections.singletonList(modifyOperation)) val streamTransformation: Transformation[T] = getTransformation( table, transformations) scalaExecutionEnvironment.getWrappedStreamExecutionEnvironment.addOperator(streamTransformation) new DataStream[T](new JDataStream[T]( scalaExecutionEnvironment .getWrappedStreamExecutionEnvironment, streamTransformation)) }这个addOperator添加到transformationspublic void addOperator(Transformation&lt;?&gt; transformation) { Preconditions.checkNotNull(transformation, \"transformation must not be null.\"); this.transformations.add(transformation);}transformations在后续会用来生成StreamGraph public StreamGraph getStreamGraph(String jobName) { return this.getStreamGraphGenerator().setJobName(jobName).generate(); } private StreamGraphGenerator getStreamGraphGenerator() { if (this.transformations.size() &lt;= 0) { throw new IllegalStateException(\"No operators defined in streaming topology. Cannot execute.\"); } else { return (new StreamGraphGenerator(this.transformations, this.config, this.checkpointCfg)).setStateBackend(this.defaultStateBackend).setChaining(this.isChainingEnabled).setUserArtifacts(this.cacheFile).setTimeCharacteristic(this.timeCharacteristic).setDefaultBufferTimeout(this.bufferTimeout); } }这里展示了示例sql的transformations： " }, { "title": "FlinkSQL源码分析", "url": "/posts/FlinkSQL/", "categories": "Flink", "tags": "flink, streamsets, realtime", "date": "2019-11-13 00:00:00 +0000", "snippet": "基于flink-1.8, 1.9包含了blink的代码flink SQL 示例 public static void main(String[] args) throws Exception { // check parameter if (args.length != 1) { System.err.println(\"Please provide the path to the taxi rides file as a parameter\"); } String inputPath = args[0]; // create execution environment StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment(); // configure event-time and watermarks env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime); env.getConfig().setAutoWatermarkInterval(1000L); // create table environment StreamTableEnvironment tEnv = TableEnvironment.getTableEnvironment(env); // register user-defined function tEnv.registerFunction(\"toCellId\", new GeoUtils.ToCellId()); // get taxi ride event stream DataStream&lt;TaxiRide&gt; rides = TaxiRides.getRides(env, inputPath); // register taxi ride event stream as table \"Rides\" tEnv.registerDataStream( \"Rides\", rides, \"medallion, licenseId, pickUpTime, dropOffTime.rowtime, \" + \"pickUpLon, pickUpLat, dropOffLon, dropOffLat, total\"); // define SQL query to compute average total per area and hour of day. Table result = tEnv.sqlQuery( \"SELECT \" + \" toCellId(dropOffLon, dropOffLat) AS area, \" + \" EXTRACT(HOUR FROM dropOffTime) AS hourOfDay, \" + \" AVG(total) AS avgTotal \" + \"FROM Rides \" + \"GROUP BY \" + \" toCellId(dropOffLon, dropOffLat), \" + \" EXTRACT(HOUR FROM dropOffTime)\" ); // convert result table into a retraction stream and print it tEnv.toRetractStream(result, Row.class) .print(); // execute the query env.execute(); }1，解析sql语句，转换成AST语法树,这里用SqlNode表示 2，验证SQL,结合Catalog,验证/检查sql语法等 3，生成逻辑执行(Logical Plan)计划，将sqlNode表示的AST转换成LogicalPlan，flink里边用RelNode表示，但是这个返回的是一个RelRoot，里边封装了RelNode def sqlQuery(query: String): Table = { val planner = new FlinkPlannerImpl(getFrameworkConfig, getPlanner, getTypeFactory) // parse the sql query val parsed = planner.parse(query) if (null != parsed &amp;&amp; parsed.getKind.belongsTo(SqlKind.QUERY)) { // validate the sql query val validated = planner.validate(parsed) // transform to a relational tree val relational = planner.rel(validated) new Table(this, LogicalRelNode(relational.rel)) } else { throw new TableException( \"Unsupported SQL query! sqlQuery() only accepts SQL queries of type \" + \"SELECT, UNION, INTERSECT, EXCEPT, VALUES, and ORDER_BY.\") } }所以sqlQuery之后生成的是最初的Logical Plan，按照正常的sql，应该还有optimize，以及生成物理执行计划physicalPlan 继续看tEnv.toAppendStream(result, Row.class)def toAppendStream[T](table: Table, clazz: Class[T]): DataStream[T] = { toAppendStream(table, clazz, queryConfig)}def toAppendStream[T]( table: Table, clazz: Class[T], queryConfig: StreamQueryConfig): DataStream[T] = {val typeInfo = TypeExtractor.createTypeInfo(clazz)TableEnvironment.validateType(typeInfo)translate[T](table, queryConfig, updatesAsRetraction = false, withChangeFlag = false)(typeInfo)}protected def translate[A]( table: Table, queryConfig: StreamQueryConfig, updatesAsRetraction: Boolean, withChangeFlag: Boolean)(implicit tpe: TypeInformation[A]): DataStream[A] = {val relNode = table.getRelNodeval dataStreamPlan = optimize(relNode, updatesAsRetraction)val rowType = getResultType(relNode, dataStreamPlan)translate(dataStreamPlan, rowType, queryConfig, withChangeFlag)} 看到optimize就知道了，看下里边的优化规则什么的,规则都在FlinkRuleSets里边定义 private[flink] def optimize(relNode: RelNode, updatesAsRetraction: Boolean): RelNode = { // 0. convert sub-queries before query decorrelation val convSubQueryPlan = runHepPlanner( HepMatchOrder.BOTTOM_UP, FlinkRuleSets.TABLE_SUBQUERY_RULES, relNode, relNode.getTraitSet) // 0. convert table references val fullRelNode = runHepPlanner( HepMatchOrder.BOTTOM_UP, FlinkRuleSets.TABLE_REF_RULES, convSubQueryPlan, relNode.getTraitSet) // 1. decorrelate val decorPlan = RelDecorrelator.decorrelateQuery(fullRelNode) // 2. convert time indicators val convPlan = RelTimeIndicatorConverter.convert(decorPlan, getRelBuilder.getRexBuilder) // 3. normalize the logical plan val normRuleSet = getNormRuleSet val normalizedPlan = if (normRuleSet.iterator().hasNext) { runHepPlanner(HepMatchOrder.BOTTOM_UP, normRuleSet, convPlan, convPlan.getTraitSet) } else { convPlan } // 4. optimize the logical Flink plan val logicalOptRuleSet = getLogicalOptRuleSet val logicalOutputProps = relNode.getTraitSet.replace(FlinkConventions.LOGICAL).simplify() val logicalPlan = if (logicalOptRuleSet.iterator().hasNext) { runVolcanoPlanner(logicalOptRuleSet, normalizedPlan, logicalOutputProps) } else { normalizedPlan } // 5. optimize the physical Flink plan val physicalOptRuleSet = getPhysicalOptRuleSet val physicalOutputProps = relNode.getTraitSet.replace(FlinkConventions.DATASTREAM).simplify() val physicalPlan = if (physicalOptRuleSet.iterator().hasNext) { runVolcanoPlanner(physicalOptRuleSet, logicalPlan, physicalOutputProps) } else { logicalPlan } // 6. decorate the optimized plan val decoRuleSet = getDecoRuleSet val decoratedPlan = if (decoRuleSet.iterator().hasNext) { val planToDecorate = if (updatesAsRetraction) { physicalPlan.copy( physicalPlan.getTraitSet.plus(new UpdateAsRetractionTrait(true)), physicalPlan.getInputs) } else { physicalPlan } runHepPlanner( HepMatchOrder.BOTTOM_UP, decoRuleSet, planToDecorate, planToDecorate.getTraitSet) } else { physicalPlan } decoratedPlan }先看下FlinkRuleSets定义的规则FlinkRuleSets.TABLE_SUBQUERY_RULESFlinkRuleSets.TABLE_REF_RULESFlinkRuleSets.LOGICAL_OPT_RULESFlinkRuleSets.DATASET_NORM_RULESFlinkRuleSets.DATASET_OPT_RULESFlinkRuleSets.DATASTREAM_NORM_RULESFlinkRuleSets.DATASTREAM_OPT_RULESFlinkRuleSets.DATASTREAM_DECO_RULESoptimize这块在1.9有重新调整了下代码结构,流批的Optimizer的optimize方法如下//StreamOptimizer.scaladef optimize( relNode: RelNode, updatesAsRetraction: Boolean, relBuilder: RelBuilder): RelNode = { val convSubQueryPlan = optimizeConvertSubQueries(relNode)//subquery规则优化 val expandedPlan = optimizeExpandPlan(convSubQueryPlan) val decorPlan = RelDecorrelator.decorrelateQuery(expandedPlan, relBuilder) val planWithMaterializedTimeAttributes = RelTimeIndicatorConverter.convert(decorPlan, relBuilder.getRexBuilder) val normalizedPlan = optimizeNormalizeLogicalPlan(planWithMaterializedTimeAttributes) val logicalPlan = optimizeLogicalPlan(normalizedPlan) val physicalPlan = optimizePhysicalPlan(logicalPlan, FlinkConventions.DATASTREAM) optimizeDecoratePlan(physicalPlan, updatesAsRetraction)}//BatchOptimizer.scaladef optimize(relNode: RelNode): RelNode = { val convSubQueryPlan = optimizeConvertSubQueries(relNode) val expandedPlan = optimizeExpandPlan(convSubQueryPlan) val decorPlan = RelDecorrelator.decorrelateQuery(expandedPlan) val normalizedPlan = optimizeNormalizeLogicalPlan(decorPlan) val logicalPlan = optimizeLogicalPlan(normalizedPlan) optimizePhysicalPlan(logicalPlan, FlinkConventions.DATASET)}前两步优化规则都一样 FlinkRuleSets.TABLE_SUBQUERY_RULES FlinkRuleSets.EXPAND_PLAN_RULES, FlinkRuleSets.POST_EXPAND_CLEAN_UP_RULES另外optimizeLogicalPlan也是一样的规则 protected def getBuiltInLogicalOptRuleSet: RuleSet = { FlinkRuleSets.LOGICAL_OPT_RULES }但是optimizeNormalizeLogicalPlan，optimizePhysicalPlan使用的规则是不一样的，batch使用的规则FlinkRuleSets.DATASET_NORM_RULESFlinkRuleSets.DATASET_OPT_RULESstream使用的规则FlinkRuleSets.DATASTREAM_NORM_RULESFlinkRuleSets.DATASTREAM_OPT_RULESstream在后边还有一步optimizeDecoratePlan，使用的规则是FlinkRuleSets.DATASTREAM_DECO_RULES最后会转换成dataStream/dataset?//StreamOptimizer.scalaval dataStream = translateToCRow(optimizedPlan, queryConfig)private def translateOptimized[A]( optimizedPlan: RelNode, logicalSchema: TableSchema, tpe: TypeInformation[A], queryConfig: StreamQueryConfig, withChangeFlag: Boolean): DataStream[A] = {val dataStream = translateToCRow(optimizedPlan, queryConfig)DataStreamConversions.convert(dataStream, logicalSchema, withChangeFlag, tpe, config)} private def translateToCRow( logicalPlan: RelNode, queryConfig: StreamQueryConfig): DataStream[CRow] = { logicalPlan match { case node: DataStreamRel =&gt; node.translateToPlan(this, queryConfig) case _ =&gt; throw new TableException(\"Cannot generate DataStream due to an invalid logical plan. \" + \"This is a bug and should not happen. Please file an issue.\") } }这里的DataStreamRel是个trait，extends了FlinkRelNodetrait DataStreamRel extends FlinkRelNode { /** * Translates the FlinkRelNode into a Flink operator. * * @param tableEnv The [[StreamPlanner]] of the translated Table. * @param queryConfig The configuration for the query to generate. * @return DataStream of type [[CRow]] */ def translateToPlan( tableEnv: StreamPlanner, queryConfig: StreamQueryConfig): DataStream[CRow] } ...}实现translateToPlan的很多，比如DataStreamWindowJoin，DataStreamJoin " }, { "title": "Flink Time Window Join原理", "url": "/posts/FlinkSQL_Time_Window_Join/", "categories": "Flink", "tags": "flink, streamsets, realtime", "date": "2019-11-11 00:00:00 +0000", "snippet": "rules:blink:FlinkStreamRuleSetsflink:FlinkRuleSetsblink: StreamExecWindowJoin,StreamExecJoinRowTimeBoundedStreamJoin 继承自TimeBoundedStreamJoin，这个TimeBoundedStreamJoin(在早期名称TimeBoundedStreamInnerJoin,仅限innerjoin?)ProcTimeBoundedStreamJoin/** * A CoProcessFunction to execute time-bounded stream inner-join. * Two kinds of time criteria: * \"L.time between R.time + X and R.time + Y\" or \"R.time between L.time - Y and L.time - X\" * X and Y might be negative or positive and X &lt;= Y. */abstract class TimeBoundedStreamJoin extends CoProcessFunction&lt;BaseRow, BaseRow, BaseRow&gt; {}IntervalJoinOperator StreamTwoInputProcessorjoin 示例package com.fenqile.flink.pvuvimport java.text.SimpleDateFormatimport java.util.Dateimport org.apache.flink.streaming.api.TimeCharacteristicimport org.apache.flink.streaming.api.scala.StreamExecutionEnvironmentimport org.apache.flink.table.api.scala.StreamTableEnvironmentimport org.apache.flink.types.Rowimport org.apache.flink.api.scala._import org.apache.flink.streaming.api.functions.AssignerWithPunctuatedWatermarksimport org.apache.flink.streaming.api.watermark.Watermarkimport org.apache.flink.table.api.scala._import scala.collection.mutableobject TumbleTest { def main(args: Array[String]): Unit = { val env = StreamExecutionEnvironment.getExecutionEnvironment val tEnv = StreamTableEnvironment.create(env) // env.setStateBackend(getStateBackend) env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime) // StreamITCase.clear val data1 = new mutable.MutableList[(String, String, Long)] data1.+=((\"A\", \"L-7\", 1570365660001L)) data1.+=((\"B\", \"L-7\", 1570365665000L)) data1.+=((\"C\", \"L-7\", 1572336777999L)) // no joining record data1.+=((\"D\", \"L-7\", 1572337111001L))// data1.+=((\"D\", \"L-7\", 1510365661000L))// data1.+=((\"D\", \"L-7\", 1510365665000L)) val data2 = new mutable.MutableList[(String, String, Long)]// data2.+=((\"A\", \"R-1\", 7000L)) // 3 joining records// data2.+=((\"B\", \"R-4\", 7000L)) // 1 joining records// data2.+=((\"A\", \"R-3\", 8000L)) // 3 joining records// data2.+=((\"D\", \"R-2\", 8000L)) // no joining record data2.+=((\"A\", \"R-2\", 1570365660000L)) // no joining record data2.+=((\"A\", \"R-2\", 1570365663000L)) // no joining record data2.+=((\"A\", \"R-2\", 1570365664000L)) // no joining record data2.+=((\"B\", \"R-2\", 1570365665000L)) // no joining record1572336778 data2.+=((\"C\", \"R-2\", 1572336778000L)) // no joining record data2.+=((\"D\", \"R-2\", 1572337111000L)) val format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\") println(\"data1:\") data1.map(x =&gt;{ val date:Date = new Date(x._3) println((x._1,x._2,format.format(date))) }) println(\"data2:\") data2.map(x =&gt;{ val date:Date = new Date(x._3) println((x._1,x._2,format.format(date))) }) val t1 = env.fromCollection(data1) .assignTimestampsAndWatermarks(new Row3WatermarkExtractor2) .toTable(tEnv, 'key, 'id, 'rt.rowtime) val t2 = env.fromCollection(data2) .assignTimestampsAndWatermarks(new Row3WatermarkExtractor2) .toTable(tEnv, 'key, 'id, 'rt.rowtime) tEnv.registerTable(\"T1\", t1) tEnv.registerTable(\"T2\", t2) val sqlQuery = \"\"\" |SELECT t2.key,TUMBLE_START(t2.rt, INTERVAL '4' SECOND),TUMBLE_END(t2.rt, INTERVAL '4' SECOND), COUNT(t1.key) |FROM T1 AS t1 join T2 AS t2 ON | t1.key = t2.key AND | t1.rt BETWEEN t2.rt - INTERVAL '3' SECOND AND | t2.rt + INTERVAL '3' SECOND |GROUP BY TUMBLE(t2.rt, INTERVAL '4' SECOND),t2.key |\"\"\".stripMargin val result = tEnv.sqlQuery(sqlQuery) println(tEnv.explain(result)) val ret=result.toAppendStream[Row] //System.out.println(tEnv.explain(result)) ret.print() env.execute(\"\") }}private class Row3WatermarkExtractor2 extends AssignerWithPunctuatedWatermarks[(String, String, Long)] { override def checkAndGetNextWatermark( lastElement: (String, String, Long), extractedTimestamp: Long): Watermark = { new Watermark(extractedTimestamp - 1) } override def extractTimestamp( element: (String, String, Long), previousElementTimestamp: Long): Long = { element._3 }sql explain:== Abstract Syntax Tree ==LogicalProject(key=[$1], EXPR$1=[TUMBLE_START($0)], EXPR$2=[TUMBLE_END($0)], EXPR$3=[$2]) LogicalAggregate(group=[{0, 1}], EXPR$3=[COUNT($2)]) LogicalProject($f0=[TUMBLE($5, 4000:INTERVAL SECOND)], key=[$3], $f2=[$0]) LogicalJoin(condition=[AND(=($0, $3), &gt;=($2, -($5, 3000:INTERVAL SECOND)), &lt;=($2, +($5, 3000:INTERVAL SECOND)))], joinType=[inner]) LogicalTableScan(table=[[default_catalog, default_database, T1]]) LogicalTableScan(table=[[default_catalog, default_database, T2]])== Optimized Logical Plan ==DataStreamCalc(select=[key0 AS key, w$start AS EXPR$1, w$end AS EXPR$2, EXPR$3]) DataStreamGroupWindowAggregate(groupBy=[key0], window=[TumblingGroupWindow('w$, 'rt0, 4000.millis)], select=[key0, COUNT(key) AS EXPR$3, start('w$) AS w$start, end('w$) AS w$end, rowtime('w$) AS w$rowtime, proctime('w$) AS w$proctime]) DataStreamCalc(select=[rt0, key0, key]) DataStreamWindowJoin(where=[AND(=(key, key0), &gt;=(CAST(rt), -(CAST(rt0), 3000:INTERVAL SECOND)), &lt;=(CAST(rt), +(CAST(rt0), 3000:INTERVAL SECOND)))], join=[key, rt, key0, rt0], joinType=[InnerJoin]) DataStreamCalc(select=[key, rt]) DataStreamScan(id=[2], fields=[key, id, rt]) DataStreamCalc(select=[key, rt]) DataStreamScan(id=[4], fields=[key, id, rt])== Physical Execution Plan ==Stage 1 : Data Source\tcontent : collect elements with CollectionInputFormat\tStage 2 : Operator\t\tcontent : Timestamps/Watermarks\t\tship_strategy : FORWARDStage 3 : Data Source\tcontent : collect elements with CollectionInputFormat\tStage 4 : Operator\t\tcontent : Timestamps/Watermarks\t\tship_strategy : FORWARD\t\tStage 5 : Operator\t\t\tcontent : from: (key, id, rt)\t\t\tship_strategy : REBALANCE\t\t\tStage 6 : Operator\t\t\t\tcontent : select: (key, rt)\t\t\t\tship_strategy : FORWARD\t\t\t\tStage 7 : Operator\t\t\t\t\tcontent : from: (key, id, rt)\t\t\t\t\tship_strategy : REBALANCE\t\t\t\t\tStage 8 : Operator\t\t\t\t\t\tcontent : select: (key, rt)\t\t\t\t\t\tship_strategy : FORWARD\t\t\t\t\t\tStage 11 : Operator\t\t\t\t\t\t\tcontent : where: (AND(=(key, key0), &gt;=(CAST(rt), -(CAST(rt0), 3000:INTERVAL SECOND)), &lt;=(CAST(rt), +(CAST(rt0), 3000:INTERVAL SECOND)))), join: (key, rt, key0, rt0)\t\t\t\t\t\t\tship_strategy : HASH\t\t\t\t\t\t\tStage 12 : Operator\t\t\t\t\t\t\t\tcontent : select: (rt0, key0, key)\t\t\t\t\t\t\t\tship_strategy : FORWARD\t\t\t\t\t\t\t\tStage 13 : Operator\t\t\t\t\t\t\t\t\tcontent : time attribute: (rt0)\t\t\t\t\t\t\t\t\tship_strategy : FORWARD\t\t\t\t\t\t\t\t\tStage 15 : Operator\t\t\t\t\t\t\t\t\t\tcontent : groupBy: (key0), window: (TumblingGroupWindow('w$, 'rt0, 4000.millis)), select: (key0, COUNT(key) AS EXPR$3, start('w$) AS w$start, end('w$) AS w$end, rowtime('w$) AS w$rowtime, proctime('w$) AS w$proctime)\t\t\t\t\t\t\t\t\t\tship_strategy : HASH\t\t\t\t\t\t\t\t\t\tStage 16 : Operator\t\t\t\t\t\t\t\t\t\t\tcontent : select: (key0 AS key, w$start AS EXPR$1, w$end AS EXPR$2, EXPR$3)\t\t\t\t\t\t\t\t\t\t\tship_strategy : FORWARD" }, { "title": "FlinkSQL", "url": "/posts/FlinkSQL_TUMBLE_join/", "categories": "Flink", "tags": "flink", "date": "2019-10-29 00:00:00 +0000", "snippet": "data1:(A,L-7,2019-10-06 20:41:00.001)(B,L-7,2019-10-06 20:41:05.000)(C,L-7,2019-10-29 16:12:57.999)(D,L-7,2019-10-29 16:18:31.001)data2:(A,R-2,2019-10-06 20:41:00.000)(A,R-2,2019-10-06 20:41:03.000)(A,R-2,2019-10-06 20:41:04.000)(B,R-2,2019-10-06 20:41:05.000)(C,R-2,2019-10-29 16:12:58.000)(D,R-2,2019-10-29 16:18:31.000)参照JoinITCase.scala中的testRowTimeInnerJoinWithWindowAggregateOnSecondTime写测试代码import java.text.SimpleDateFormatimport java.util.Dateimport org.apache.flink.streaming.api.TimeCharacteristicimport org.apache.flink.streaming.api.scala.StreamExecutionEnvironmentimport org.apache.flink.table.api.scala.StreamTableEnvironmentimport org.apache.flink.types.Rowimport org.apache.flink.api.scala._import org.apache.flink.streaming.api.functions.AssignerWithPunctuatedWatermarksimport org.apache.flink.streaming.api.watermark.Watermarkimport org.apache.flink.table.api.scala._import scala.collection.mutableobject TumbleTest { def main(args: Array[String]): Unit = { val env = StreamExecutionEnvironment.getExecutionEnvironment val tEnv = StreamTableEnvironment.create(env) // env.setStateBackend(getStateBackend) env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime) // StreamITCase.clear val data1 = new mutable.MutableList[(String, String, Long)] data1.+=((\"A\", \"L-7\", 1570365660001L)) data1.+=((\"B\", \"L-7\", 1570365665000L)) data1.+=((\"C\", \"L-7\", 1572336777999L)) // no joining record data1.+=((\"D\", \"L-7\", 1572337111001L))// data1.+=((\"D\", \"L-7\", 1510365661000L))// data1.+=((\"D\", \"L-7\", 1510365665000L)) val data2 = new mutable.MutableList[(String, String, Long)]// data2.+=((\"A\", \"R-1\", 7000L)) // 3 joining records// data2.+=((\"B\", \"R-4\", 7000L)) // 1 joining records// data2.+=((\"A\", \"R-3\", 8000L)) // 3 joining records// data2.+=((\"D\", \"R-2\", 8000L)) // no joining record data2.+=((\"A\", \"R-2\", 1570365660000L)) // no joining record data2.+=((\"A\", \"R-2\", 1570365663000L)) // no joining record data2.+=((\"A\", \"R-2\", 1570365664000L)) // no joining record data2.+=((\"B\", \"R-2\", 1570365665000L)) // no joining record1572336778 data2.+=((\"C\", \"R-2\", 1572336778000L)) // no joining record data2.+=((\"D\", \"R-2\", 1572337111000L)) val format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\") println(\"data1:\") data1.map(x =&gt;{ val date:Date = new Date(x._3) println((x._1,x._2,format.format(date))) }) println(\"data2:\") data2.map(x =&gt;{ val date:Date = new Date(x._3) println((x._1,x._2,format.format(date))) }) val t1 = env.fromCollection(data1) .assignTimestampsAndWatermarks(new Row3WatermarkExtractor2) .toTable(tEnv, 'key, 'id, 'rt.rowtime) val t2 = env.fromCollection(data2) .assignTimestampsAndWatermarks(new Row3WatermarkExtractor2) .toTable(tEnv, 'key, 'id, 'rt.rowtime) tEnv.registerTable(\"T1\", t1) tEnv.registerTable(\"T2\", t2) val sqlQuery = \"\"\" |SELECT t2.key,TUMBLE_START(t2.rt, INTERVAL '4' SECOND),TUMBLE_END(t2.rt, INTERVAL '4' SECOND), COUNT(t1.key) |FROM T1 AS t1 join T2 AS t2 ON | t1.key = t2.key AND | t1.rt BETWEEN t2.rt - INTERVAL '3' SECOND AND | t2.rt + INTERVAL '3' SECOND |GROUP BY TUMBLE(t2.rt, INTERVAL '4' SECOND),t2.key |\"\"\".stripMargin val result = tEnv.sqlQuery(sqlQuery).toAppendStream[Row] result.print() env.execute(\"\") }}private class Row3WatermarkExtractor2 extends AssignerWithPunctuatedWatermarks[(String, String, Long)] { override def checkAndGetNextWatermark( lastElement: (String, String, Long), extractedTimestamp: Long): Watermark = { new Watermark(extractedTimestamp - 1) } override def extractTimestamp( element: (String, String, Long), previousElementTimestamp: Long): Long = { element._3 }}运行结果：6&gt; A,2019-10-06 12:41:00.0,2019-10-06 12:41:04.0,22&gt; C,2019-10-29 08:12:56.0,2019-10-29 08:13:00.0,13&gt; D,2019-10-29 08:18:28.0,2019-10-29 08:18:32.0,14&gt; B,2019-10-06 12:41:04.0,2019-10-06 12:41:08.0,1" }, { "title": "Spark SQL SqlParser", "url": "/posts/Spark_sql_antlr4_SparkSqlParser/", "categories": "spark", "tags": "Spark Sql", "date": "2019-09-16 00:00:00 +0000", "snippet": "解析sql生成Unresolved Logical PlanLogicalPlan有三个子类：UnaryNode 一元节点,即只有一个子节点。如 Limit、Filter 操作BinaryNode 二元节点,即有左右子节点的二叉节点。如 Join、Union 操作LeafNode 叶子节点,没有子节点的节点。主要用户命令类操作,如SetCommand." }, { "title": "Spark SQL WholeStageCodegen", "url": "/posts/Spark_sql_WholeStageCodegen/", "categories": "spark", "tags": "Spark Sql", "date": "2019-09-16 00:00:00 +0000", "snippet": "" }, { "title": "Spark SQL Planner", "url": "/posts/Spark_sql_Planner/", "categories": "spark", "tags": "Spark Sql", "date": "2019-09-16 00:00:00 +0000", "snippet": "Optimizer优化后最终得到的还是Logical Plan，Planner会将Logical Plan转化为 Physical Planlazy val sparkPlan: SparkPlan = { SparkSession.setActiveSession(sparkSession) // TODO: We use next(), i.e. take the first plan returned by the planner, here for now, // but we will implement to choose the best plan. planner.plan(ReturnAnswer(optimizedPlan)).next()}QueryPlanner.plandef plan(plan: LogicalPlan): Iterator[PhysicalPlan] = { // Obviously a lot to do here still... // Collect physical plan candidates. val candidates = strategies.iterator.flatMap(_(plan)) // The candidates may contain placeholders marked as [[planLater]], // so try to replace them by their child plans. val plans = candidates.flatMap { candidate =&gt; val placeholders = collectPlaceholders(candidate) if (placeholders.isEmpty) { // Take the candidate as is because it does not contain placeholders. Iterator(candidate) } else { // Plan the logical plan marked as [[planLater]] and replace the placeholders. placeholders.iterator.foldLeft(Iterator(candidate)) { case (candidatesWithPlaceholders, (placeholder, logicalPlan)) =&gt; // Plan the logical plan for the placeholder. val childPlans = this.plan(logicalPlan) candidatesWithPlaceholders.flatMap { candidateWithPlaceholders =&gt; childPlans.map { childPlan =&gt; // Replace the placeholder by the child plan candidateWithPlaceholders.transformUp { case p if p.eq(placeholder) =&gt; childPlan } } } } } } val pruned = prunePlans(plans) assert(pruned.hasNext, s\"No plan for $plan\") pruned}这里strategiesoverride def strategies: Seq[Strategy] = experimentalMethods.extraStrategies ++ extraPlanningStrategies ++ ( PythonEvals :: DataSourceV2Strategy :: FileSourceStrategy :: DataSourceStrategy(conf) :: SpecialLimits :: Aggregation :: Window :: JoinSelection :: InMemoryScans :: BasicOperators :: Nil)" }, { "title": "Spark SQL Optimizer", "url": "/posts/Spark_sql_Optimizer/", "categories": "spark", "tags": "Spark Sql", "date": "2019-09-16 00:00:00 +0000", "snippet": "Optimizer与一样，也是继承自RuleExecutor,匹配规则对SQL进行优化lazy val withCachedData: LogicalPlan = { assertAnalyzed() assertSupported() sparkSession.sharedState.cacheManager.useCachedData(analyzed)}lazy val optimizedPlan: LogicalPlan = sparkSession.sessionState.optimizer.execute(withCachedData)def execute(plan: TreeType): TreeType = { var curPlan = plan val queryExecutionMetrics = RuleExecutor.queryExecutionMeter batches.foreach { batch =&gt; val batchStartPlan = curPlan var iteration = 1 var lastPlan = curPlan var continue = true // Run until fix point (or the max number of iterations as specified in the strategy. while (continue) { curPlan = batch.rules.foldLeft(curPlan) { case (plan, rule) =&gt; val startTime = System.nanoTime() val result = rule(plan) val runTime = System.nanoTime() - startTime if (!result.fastEquals(plan)) { queryExecutionMetrics.incNumEffectiveExecution(rule.ruleName) queryExecutionMetrics.incTimeEffectiveExecutionBy(rule.ruleName, runTime) logTrace( s\"\"\" |=== Applying Rule ${rule.ruleName} === |${sideBySide(plan.treeString, result.treeString).mkString(\"\\n\")} \"\"\".stripMargin) } queryExecutionMetrics.incExecutionTimeBy(rule.ruleName, runTime) queryExecutionMetrics.incNumExecution(rule.ruleName) // Run the structural integrity checker against the plan after each rule. if (!isPlanIntegral(result)) { val message = s\"After applying rule ${rule.ruleName} in batch ${batch.name}, \" + \"the structural integrity of the plan is broken.\" throw new TreeNodeException(result, message, null) } result } iteration += 1 if (iteration &gt; batch.strategy.maxIterations) { // Only log if this is a rule that is supposed to run more than once. if (iteration != 2) { val message = s\"Max iterations (${iteration - 1}) reached for batch ${batch.name}\" if (Utils.isTesting) { throw new TreeNodeException(curPlan, message, null) } else { logWarning(message) } } continue = false } if (curPlan.fastEquals(lastPlan)) { logTrace( s\"Fixed point reached for batch ${batch.name} after ${iteration - 1} iterations.\") continue = false } lastPlan = curPlan } if (!batchStartPlan.fastEquals(curPlan)) { logDebug( s\"\"\" |=== Result of Batch ${batch.name} === |${sideBySide(batchStartPlan.treeString, curPlan.treeString).mkString(\"\\n\")} \"\"\".stripMargin) } else { logTrace(s\"Batch ${batch.name} has no effect.\") } } curPlan}" }, { "title": "Spark SQL Analyzer", "url": "/posts/Spark_sql_Analyzer/", "categories": "spark", "tags": "Spark Sql", "date": "2019-09-16 00:00:00 +0000", "snippet": "Analyzer结合 catalog 进行绑定,生成 Resolved Logical Plan，在其父类RuleExecutor中匹配相应规则lazy val analyzed: LogicalPlan = { SparkSession.setActiveSession(sparkSession) sparkSession.sessionState.analyzer.executeAndCheck(logical)}def executeAndCheck(plan: LogicalPlan): LogicalPlan = AnalysisHelper.markInAnalyzer { val analyzed = execute(plan) try { checkAnalysis(analyzed) analyzed } catch { case e: AnalysisException =&gt; val ae = new AnalysisException(e.message, e.line, e.startPosition, Option(analyzed)) ae.setStackTrace(e.getStackTrace) throw ae }}override def execute(plan: LogicalPlan): LogicalPlan = {AnalysisContext.reset()try { executeSameContext(plan)} finally { AnalysisContext.reset()}}private def executeSameContext(plan: LogicalPlan): LogicalPlan = super.execute(plan)RuleExecutor.execute()def execute(plan: TreeType): TreeType = { var curPlan = plan val queryExecutionMetrics = RuleExecutor.queryExecutionMeter batches.foreach { batch =&gt;" }, { "title": "Spark SQL QueryExecution", "url": "/posts/Spark_sql_QueryExecution/", "categories": "spark", "tags": "Spark Sql", "date": "2019-09-09 00:00:00 +0000", "snippet": "1.sql 通过SqlParser 解析成 Unresolved Logical Plan; 2.analyzer 结合catalog 进行绑定,生成 Logical Plan; 3.optimizer 对 Logical Plan 优化,生成 Optimized LogicalPlan; 4.SparkPlan 将 Optimized LogicalPlan 转换成 Physical Plan; 5.prepareForExecution()将 Physical Plan 转换成 executed Physical Plan; 6.execute()执行可执行物理计划，得到RDD; override def addBatch(batchId: Long, data: DataFrame): Unit = { val resolvedEncoder = encoder.resolveAndBind( data.logicalPlan.output, data.sparkSession.sessionState.analyzer) val rdd = data.queryExecution.toRdd.map[T](resolvedEncoder.fromRow)(encoder.clsTag) val ds = data.sparkSession.createDataset(rdd)(encoder) batchWriter(ds, batchId) }从toRdd往前推 /** Internal version of the RDD. Avoids copies and has no schema */ lazy val toRdd: RDD[InternalRow] = executedPlan.execute()executedPlan: SparkPlan // executedPlan should not be used to initialize any SparkPlan. It should be // only used for execution. lazy val executedPlan: SparkPlan = prepareForExecution(sparkPlan)sparkPlan: SparkPlan lazy val sparkPlan: SparkPlan = { SparkSession.setActiveSession(sparkSession) // TODO: We use next(), i.e. take the first plan returned by the planner, here for now, // but we will implement to choose the best plan. planner.plan(ReturnAnswer(optimizedPlan)).next() }optimizedPlan: LogicalPlan lazy val optimizedPlan: LogicalPlan = sparkSession.sessionState.optimizer.execute(withCachedData)withCachedData: LogicalPlan lazy val withCachedData: LogicalPlan = { assertAnalyzed() assertSupported() sparkSession.sharedState.cacheManager.useCachedData(analyzed) }analyzed: LogicalPlan lazy val analyzed: LogicalPlan = { SparkSession.setActiveSession(sparkSession) sparkSession.sessionState.analyzer.executeAndCheck(logical) }后续：sc.runjob()eg:collect()def executeCollect(): Array[InternalRow] = { val byteArrayRdd = getByteArrayRdd() val results = ArrayBuffer[InternalRow]() byteArrayRdd.collect().foreach { countAndBytes =&gt; decodeUnsafeRows(countAndBytes._2).foreach(results.+=) } results.toArray}//RDD.scala def collect(): Array[T] = withScope { val results = sc.runJob(this, (iter: Iterator[T]) =&gt; iter.toArray) Array.concat(results: _*)}takedef executeTake(n: Int): Array[InternalRow] = {if (n == 0) { return new Array[InternalRow](0)}val childRDD = getByteArrayRdd(n).map(_._2)val buf = new ArrayBuffer[InternalRow]val totalParts = childRDD.partitions.lengthvar partsScanned = 0while (buf.size &lt; n &amp;&amp; partsScanned &lt; totalParts) { // The number of partitions to try in this iteration. It is ok for this number to be // greater than totalParts because we actually cap it at totalParts in runJob. var numPartsToTry = 1L if (partsScanned &gt; 0) { // If we didn't find any rows after the previous iteration, quadruple and retry. // Otherwise, interpolate the number of partitions we need to try, but overestimate // it by 50%. We also cap the estimation in the end. val limitScaleUpFactor = Math.max(sqlContext.conf.limitScaleUpFactor, 2) if (buf.isEmpty) { numPartsToTry = partsScanned * limitScaleUpFactor } else { val left = n - buf.size // As left &gt; 0, numPartsToTry is always &gt;= 1 numPartsToTry = Math.ceil(1.5 * left * partsScanned / buf.size).toInt numPartsToTry = Math.min(numPartsToTry, partsScanned * limitScaleUpFactor) } } val p = partsScanned.until(math.min(partsScanned + numPartsToTry, totalParts).toInt) val sc = sqlContext.sparkContext val res = sc.runJob(childRDD, (it: Iterator[Array[Byte]]) =&gt; if (it.hasNext) it.next() else Array.empty[Byte], p) buf ++= res.flatMap(decodeUnsafeRows) partsScanned += p.size}if (buf.size &gt; n) { buf.take(n).toArray} else { buf.toArray} }" }, { "title": "V2ray+WebSocket+TLS+Nginx", "url": "/posts/WebSocket_TLS_Nginx/", "categories": "template", "tags": "template, myblog", "date": "2019-09-08 00:00:00 +0000", "snippet": "环境 centos7安装certbot yum -y install certbot生成key注意需要开放端口443,80，由于vps没开放端口，导致没法生成keycertbot certonly --standalone -d xxyy.tk -m xxyy@gmail.com生成的文件位于/etc/letsencrypt/live/xxyy.tk/privkey.pem/etc/letsencrypt/live/xxyy.tk/fullchain.pem安装配置Nginxyum -y install nginxsystemctl enable nginxnginx配置文件# cat /etc/nginx/conf.d/v2ray.conf server { listen 443 ssl; server_name xxyy.tk; ssl_certificate /etc/letsencrypt/live/xxyy.tk/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/xxyy.tk/privkey.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; error_page 497 https://$host$request_uri;location /ray { proxy_pass http://127.0.0.1:10000; proxy_redirect off; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"upgrade\"; proxy_set_header Host $http_host; }}安装配置V2Raybash &lt;(curl -L -s https://install.direct/go.sh)systemctl enable v2rayv2ray配置文件# cat /etc/v2ray/config.json{ \"log\" : { //日志配置 \"access\": \"/var/log/v2ray/access.log\", //访问日志 \"error\": \"/var/log/v2ray/error.log\", //错误日志 \"loglevel\":\"debug\" //日志等级 }, \"inbound\": { \"port\": 10000, \"listen\":\"127.0.0.1\", \"protocol\": \"vmess\", \"settings\": { \"clients\": [ { \"id\": uuid\",//你的id \"alterId\": 64 } ] }, \"streamSettings\": { \"network\": \"ws\", \"wsSettings\": { \"path\": \"/ray\" } } }, \"outbound\": { \"protocol\": \"freedom\", \"settings\": {} }}关闭防火墙systemctl stop firewalld.servicevi /etc/selinux/configSELINUX=disabledsetenforce 0启动v2ray&amp;nginxsystemctl start v2raysystemctl status v2raysystemctl start nginxsystemctl status nginx客户端配置域名到期了freenom.com不支持xx宝，算了 继续白嫖吧重新申请域名xxx.cffreenom.com与cf域名解析变更所以也需要重新去cf配置cdn解析首先配置cf上的cdn解析，解析完之后再上freenom.com修改dns解析为cf的nginx 配置以及证书变更生成证书,注意先关闭端口 比如80或者443冲突 certbot certonly --standalone -d xxx.cf -m abc@gmail.com修改nginx配置 server_name xxx.cf; ssl_certificate /etc/letsencrypt/live/xxx.cf/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/xxx.cf/privkey.pem;" }, { "title": "StrucuredStreaming window", "url": "/posts/StrucuredStreaming_window/", "categories": "spark", "tags": "Spark", "date": "2019-08-27 00:00:00 +0000", "snippet": "打印窗口示例import org.apache.spark.sql.streaming.{OutputMode, ProcessingTime}import org.apache.spark.sql.{DataFrame, SparkSession}import org.apache.spark.sql.functions._object StructuredNetworkWindowShow { def main(args: Array[String]) { val host = \"10.9.22.136\" val port = \"6666\" val windowSize = 3 val slideSize = 2 val triggerTime = 1 if (slideSize &gt; windowSize) { System.err.println(\"&lt;slide duration&gt; must be less than or equal to &lt;window duration&gt;\") } val windowDuration = s\"$windowSize seconds\" val slideDuration = s\"$slideSize seconds\" val spark = SparkSession .builder .master(\"local\") .appName(\"StructuredNetworkWindowShow\"+String.valueOf(System.currentTimeMillis())) .getOrCreate() import spark.implicits._ // Create DataFrame representing the stream of input lines from connection to host:port val lines = spark.readStream .format(\"socket\") .option(\"host\", host) .option(\"port\", port) .option(\"includeTimestamp\", true) .load() val wordCounts:DataFrame = lines.select(window($\"timestamp\",windowDuration,slideDuration),$\"value\") // Start running the query that prints the windowed word counts to the console val query = wordCounts.writeStream .outputMode(OutputMode.Append()) .format(\"console\") .trigger(ProcessingTime(s\"$triggerTime seconds\")) .option(\"truncate\", \"false\") .start() query.awaitTermination() }如下window大小为3，滑动步长2，triggerTime=1-------------------------------------------Batch: 3-------------------------------------------+------------------------------------------+-----+|window |value|+------------------------------------------+-----+|[2019-08-27 14:20:36, 2019-08-27 14:20:39]|11 ||[2019-08-27 14:20:38, 2019-08-27 14:20:41]|11 ||[2019-08-27 14:20:38, 2019-08-27 14:20:41]|12 ||[2019-08-27 14:20:40, 2019-08-27 14:20:43]|12 ||[2019-08-27 14:20:40, 2019-08-27 14:20:43]|13 |+------------------------------------------+-----+-------------------------------------------Batch: 6-------------------------------------------19/08/27 14:26:39 INFO WriteToDataSourceV2Exec: Data source writer org.apache.spark.sql.execution.streaming.sources.MicroBatchWriter@37e8844 committed.+------------------------------------------+-----+|window |value|+------------------------------------------+-----+|[2019-08-27 14:26:32, 2019-08-27 14:26:35]|17 ||[2019-08-27 14:26:34, 2019-08-27 14:26:37]|18 ||[2019-08-27 14:26:34, 2019-08-27 14:26:37]|19 ||[2019-08-27 14:26:36, 2019-08-27 14:26:39]|19 |+------------------------------------------+-----+" }, { "title": "Customize the Favicon", "url": "/posts/customize-the-favicon/", "categories": "Blogging, Tutorial", "tags": "favicon", "date": "2019-08-10 16:34:00 +0000", "snippet": "In Chirpy, the image files of Favicons are placed in assets/img/favicons/. You may need to replace them with your own. So let’s see how to customize these Favicons.Whit a square image (PNG, JPG or GIF) in hand, open the site Favicon &amp; App Icon Generator and upload your original image.Click button Create Favicon and wait a moment for the website to generate the icons of various sizes automatically.Download the generated package, unzip and delete the following two from the extracted files: browserconfig.xml manifest.jsonNow, copy the rest image files (.PNG and .ICO) to cover the original one in folder assets/img/favicons/.Lastly, don’t forget to rebuild your site so that the icon becomes your custom edition." }, { "title": "Getting Started", "url": "/posts/getting-started/", "categories": "Blogging, Tutorial", "tags": "getting started", "date": "2019-08-09 12:55:00 +0000", "snippet": "PreparationFollow the Jekyll Docs to complete the installtion of basic environment (Ruby, RubyGem, Bundler and Jekyll). In order to use the script tools to save time, we also need to install Python(version 3.5 or abover) and ruamel.yaml.In addition, if your machine is running Debian or macOS, make sure you have the GNU coreutils installed. Otherwise, get it by: Debian$ sudo apt-get install coreutils macOS$ brew install coreutilsInstall Jekyll PluginsGo to the root of repo and run:$ bundle installbundle will install all the dependent Jekyll Plugins listed in file Gemfile automatically.File StructureThe main files and related brief introductions are listed below.jekyll-theme-chirpy/├── _data├── _includes ├── _layouts├── _posts # posts stay here├── _scripts├── .travis.yml # remove it├── .github # remove this, too├── assets ├── tabs│   └── about.md # the ABOUT page├── .gitignore├── 404.html├── Gemfile├── LICENSE├── README.md├── _config.yml # configuration file├── tools # script tools├── feed.xml├── index.html├── robots.txt└── sitemap.xmlAs mentioned above, some files or directories should be removed from your repo: .travis.yml .githubConfigurationCustomize the variables in file _config.yml as needed. Avatar The sample avatar is /assets/img/sample/avatar.jpg. It should be replaced by your own one. Notice that a huge image file will increase the load time of your site, so keep your avatar size as samll as possible(may be https://tinypng.com/ will help). TimeZone To ensure that the posts’ release date matches the city you live in, please modify the field timezone correctly. A list of all available values can be found on TimezoneConverter or Wikipedia. Run LocallyYou may want to preview the site before publishing, so just run the script tool:$ bash tools/run.shOpen a brower and visit http://localhost:4000.Few days later, you may find that the file changes does not refresh in real time by using run.sh. Don’t worry, the advanced option -r (or --realtime) will solve this problem, but it requires fswatch to be installed on your machine.Deploying to GitHub PagesBefore the deployment begins, ensure the url in file _config.yml has been set to https://&lt;username&gt;.github.io(or the custom domain, if you have. e.g. https://yourdomain.com). What’s more, if you prefer to the Project site, change baseurl of file _config.yml to your project name, starting with a slash. e.g. /project.Option 1: Built by GitHub PagesBy deploying the site in this way, you’re allowed to push the source code directly to the remote. Note: If you want to use any third-party Jekyll plugins that not in this list, stop reading the current approach and go to Option 2: Build locally.1. Rename the repository to: Site Type Repo’s Name User or Organization &lt;username&gt;.github.io Project any one except &lt;username&gt;.github.io, let’s say project 2. Commit the changes of the repo first, then run the initialization script:$ bash tools/init.sh Please note that the Recent Update list requires the latest git-log date of posts, thus make sure the changes in _posts have been committed before running this command.it will automatically generates the Latest Modified Date and Categories / Tags page for the posts.3. Push the changes to origin/master then go to GitHub website and enable GitHub Pages service for the repo.4. Check it out: Site Type Site URL User or Organization https://&lt;username&gt;.github.io/ Project https://&lt;username&gt;.github.io/project/ Option 2: Build LocallyFor security reasons, GitHub Pages runs on safe mode, which means the third-party Jekyll plugins or custom scripts won’t work. If you want to use any another plugins that not in the whitelist, you have to generate the site locally rather than on GitHub Pages.1. Browse to GitHub website, create a brand new repo named: Site Type Repo’s Name User or Organization &lt;username&gt;.github.io Project any one except &lt;username&gt;.github.io, let’s say project and clone it.2. In the root of the source project, build your site by:$ bash tools/build.sh -d /path/to/local/project/The generated static files will be placed in the root of /path/to/local/project. Commit and push the changes to the master branch on GitHub.3. Go to GitHub website and enable Pages service for the new repository.4. Visit at: Site Type Site URL User or Organization https://&lt;username&gt;.github.io/ Project https://&lt;username&gt;.github.io/project/ and enjoy!" }, { "title": "Writing a New Post", "url": "/posts/write-a-new-post/", "categories": "Blogging, Tutorial", "tags": "writing", "date": "2019-08-08 06:10:00 +0000", "snippet": "Naming and PathCreate a new file name with the format YYYY-MM-DD-title.md then put it into _post of the root directory.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]--- Note: The posts’ layout has been set to post by default, so there is no need to add the variable layout in Front Matter block. Categories and Tags The categories of each post is designed to contain up to two elements, and the number of elements in tag can be zero or infinite. Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the variable toc to false. If you want to turn off TOC for specific post, add the following to post’s Front Matter:---toc: false---CommentsSimilar to TOC, the Disqus comments is loaded by default in each post, and the global switch is defined by variable comments in file _config.yml . If you want to close the comment for specific post, add the following to the Front Matter of the post:---comments: false---Code BlockMarkdown symbols ``` can easily create a code block as following examples.This is a common code snippet, without syntax highlight and line number.Specific LanguageUsing ```Language you will get code snippets with line Numbers and syntax highlight. Note: The Jekyll style {% highlight LANGUAGE %} or {% highlight LANGUAGE linenos %} are not allowed to be used in this theme !# Yaml code snippetitems: - part_no: A4786 descrip: Water Bucket (Filled) price: 1.47 quantity: 4Liquid codesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %} .{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Text and Typography", "url": "/posts/kafka/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 03:33:00 +0000", "snippet": "This Jekyll template totally compatible with Markdown syntax. Now, let’s take a look for the text and typography in this theme.TitlesH1H2H3H4ParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.Block Quote This line to shows the Block Quote.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkhttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1.ImageInline codeThis is an example of Inline Code.Code SnippetCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ dateSun Nov 3 15:11:12 CST 2019Terminal$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashRubydef sum_eq_n?(arr, n) return true if arr.empty? &amp;&amp; n == 0 arr.product(arr).reject { |a,b| a == b }.any? { |a,b| a + b == n }endShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}HTML&lt;div class=\"sidenav\"&gt; &lt;a href=\"#contact\"&gt;Contact&lt;/a&gt; &lt;button class=\"dropdown-btn\"&gt;Dropdown &lt;i class=\"fa fa-caret-down\"&gt;&lt;/i&gt; &lt;/button&gt; &lt;div class=\"dropdown-container\"&gt; &lt;a href=\"#\"&gt;Link 1&lt;/a&gt; &lt;a href=\"#\"&gt;Link 2&lt;/a&gt; &lt;a href=\"#\"&gt;Link 3&lt;/a&gt; &lt;/div&gt; &lt;a href=\"#contact\"&gt;Search&lt;/a&gt;&lt;/div&gt;Horizontal Scrolling&lt;div class=\"panel-group\"&gt; &lt;div class=\"panel panel-default\"&gt; &lt;div class=\"panel-heading\" id=\"\"&gt; &lt;i class=\"far fa-folder\"&gt;&lt;/i&gt; &lt;p&gt;This is a very long long long long long long long long long long long long long long long long long long long long long line.&lt;/p&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;Reverse Footnote The footnote source. &#8617; " }, { "title": "Text and Typography", "url": "/posts/text-and-typography/", "categories": "Blogging, Demo", "tags": "typography", "date": "2019-08-08 03:33:00 +0000", "snippet": "This Jekyll template totally compatible with Markdown syntax. Now, let’s take a look for the text and typography in this theme.TitlesH1H2H3H4ParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.Block Quote This line to shows the Block Quote.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkhttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1.ImageInline codeThis is an example of Inline Code.Code SnippetCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ dateSun Nov 3 15:11:12 CST 2019Terminal$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashRubydef sum_eq_n?(arr, n) return true if arr.empty? &amp;&amp; n == 0 arr.product(arr).reject { |a,b| a == b }.any? { |a,b| a + b == n }endShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}HTML&lt;div class=\"sidenav\"&gt; &lt;a href=\"#contact\"&gt;Contact&lt;/a&gt; &lt;button class=\"dropdown-btn\"&gt;Dropdown &lt;i class=\"fa fa-caret-down\"&gt;&lt;/i&gt; &lt;/button&gt; &lt;div class=\"dropdown-container\"&gt; &lt;a href=\"#\"&gt;Link 1&lt;/a&gt; &lt;a href=\"#\"&gt;Link 2&lt;/a&gt; &lt;a href=\"#\"&gt;Link 3&lt;/a&gt; &lt;/div&gt; &lt;a href=\"#contact\"&gt;Search&lt;/a&gt;&lt;/div&gt;Horizontal Scrolling&lt;div class=\"panel-group\"&gt; &lt;div class=\"panel panel-default\"&gt; &lt;div class=\"panel-heading\" id=\"\"&gt; &lt;i class=\"far fa-folder\"&gt;&lt;/i&gt; &lt;p&gt;This is a very long long long long long long long long long long long long long long long long long long long long long line.&lt;/p&gt; &lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;Reverse Footnote The footnote source. &#8617; " }, { "title": "Structured Streaming with ElasticSearch", "url": "/posts/structured_streaming_to_es/", "categories": "spark", "tags": "Spark", "date": "2019-07-31 00:00:00 +0000", "snippet": "Maven依赖&lt;dependency&gt; &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt; &lt;artifactId&gt;elasticsearch-spark-20_2.11&lt;/artifactId&gt; &lt;version&gt;6.2.4&lt;/version&gt;&lt;/dependency&gt;writeStream .writeStream .outputMode(OutputMode.Append())//append only // .format(\"es\") classNotFound es.DefaultSource .format(\"org.elasticsearch.spark.sql\") .option(\"es.nodes\", \"localhost\") .option(\"es.port\", \"9200\") .option(\"checkpointLocation\", \"/tmp/checkpointLocation\") // .option(\"es.mapping.id\", \"id\")//if no mapping.id ? .trigger(Trigger.ProcessingTime(10, TimeUnit.SECONDS)) .start(\"a/profile\") .awaitTermination() " }, { "title": "Spark shuffle", "url": "/posts/spark_shuffle/", "categories": "spark", "tags": "Spark thrift", "date": "2019-03-13 00:00:00 +0000", "snippet": "Hash Shuffle V1总文件数 M*RHash Shuffle V2M(Executor)*R500个map task 分配10个Executor,每个Executor一个core,每个Executor分配50个task, 则总文件数10*RSort Shuffle V1Sort Shuffle V2" }, { "title": "Spark_shuffle", "url": "/posts/spark_shuffle/", "categories": "", "tags": "", "date": "2019-03-13 00:00:00 +0000", "snippet": "" }, { "title": "Spark stage划分", "url": "/posts/spark_stage/", "categories": "spark", "tags": "Spark thrift", "date": "2019-02-22 00:00:00 +0000", "snippet": "rdd–&gt;job–&gt;stage–&gt;tasksc.parallelize(1 to 10000, 2).map { i =&gt; Thread.sleep(10); i }.count()def parallelize[T: ClassTag]( seq: Seq[T], numSlices: Int = defaultParallelism): RDD[T] = withScope { assertNotStopped() new ParallelCollectionRDD[T](this, seq, numSlices, Map[Int, Seq[String]]())}//SparkContext.scalaprivate[spark] class ParallelCollectionRDD[T: ClassTag]( sc: SparkContext, @transient private val data: Seq[T], numSlices: Int, locationPrefs: Map[Int, Seq[String]]) extends RDD[T](sc, Nil) {//RDD.scaladef count(): Long = sc.runJob(this, Utils.getIteratorSize _).sum////SparkContext.scaladef runJob[T, U: ClassTag](rdd: RDD[T], func: Iterator[T] =&gt; U): Array[U] = {runJob(rdd, func, 0 until rdd.partitions.length)}...def runJob[T, U: ClassTag]( rdd: RDD[T], func: (TaskContext, Iterator[T]) =&gt; U, partitions: Seq[Int], resultHandler: (Int, U) =&gt; Unit): Unit = {if (stopped.get()) { throw new IllegalStateException(\"SparkContext has been shutdown\")}val callSite = getCallSiteval cleanedFunc = clean(func)logInfo(\"Starting job: \" + callSite.shortForm)if (conf.getBoolean(\"spark.logLineage\", false)) { logInfo(\"RDD's recursive dependencies:\\n\" + rdd.toDebugString)}dagScheduler.runJob(rdd, cleanedFunc, partitions, callSite, resultHandler, localProperties.get)progressBar.foreach(_.finishAll())rdd.doCheckpoint()}//DAGScheduler.scaladef submitJob[T, U]( rdd: RDD[T], func: (TaskContext, Iterator[T]) =&gt; U, partitions: Seq[Int], callSite: CallSite, resultHandler: (Int, U) =&gt; Unit, properties: Properties): JobWaiter[U] = {// Check to make sure we are not launching a task on a partition that does not exist.val maxPartitions = rdd.partitions.lengthpartitions.find(p =&gt; p &gt;= maxPartitions || p &lt; 0).foreach { p =&gt; throw new IllegalArgumentException( \"Attempting to access a non-existent partition: \" + p + \". \" + \"Total number of partitions: \" + maxPartitions)}val jobId = nextJobId.getAndIncrement()if (partitions.size == 0) { // Return immediately if the job is running 0 tasks return new JobWaiter[U](this, jobId, 0, resultHandler)}assert(partitions.size &gt; 0)val func2 = func.asInstanceOf[(TaskContext, Iterator[_]) =&gt; _]val waiter = new JobWaiter(this, jobId, partitions.size, resultHandler)eventProcessLoop.post(JobSubmitted( jobId, rdd, func2, partitions.toArray, callSite, waiter, SerializationUtils.clone(properties)))waiter}//EventLoop.scaladef post(event: E): Unit = {eventQueue.put(event)}private val eventThread = new Thread(name) {setDaemon(true)override def run(): Unit = { try { while (!stopped.get) { val event = eventQueue.take() try { onReceive(event) } catch { case NonFatal(e) =&gt; try { onError(e) } catch { case NonFatal(e) =&gt; logError(\"Unexpected error in \" + name, e) } } } } catch {onReceive的实现类//DAGScheduler.scala--&gt;DAGSchedulerEventProcessLoopoverride def onReceive(event: DAGSchedulerEvent): Unit = {val timerContext = timer.time()try { doOnReceive(event)} finally { timerContext.stop()}}private def doOnReceive(event: DAGSchedulerEvent): Unit = event match {case JobSubmitted(jobId, rdd, func, partitions, callSite, listener, properties) =&gt; dagScheduler.handleJobSubmitted(jobId, rdd, func, partitions, callSite, listener, properties)handleJobSubmitted里先创建finalStage再commitstage private[scheduler] def handleJobSubmitted(jobId: Int, finalRDD: RDD[_], func: (TaskContext, Iterator[_]) =&gt; _, partitions: Array[Int], callSite: CallSite, listener: JobListener, properties: Properties) { var finalStage: ResultStage = null try { // New stage creation may throw an exception if, for example, jobs are run on a // HadoopRDD whose underlying HDFS files have been deleted. finalStage = createResultStage(finalRDD, func, partitions, jobId, callSite) } catch { case e: Exception =&gt; logWarning(\"Creating new stage failed due to exception - job: \" + jobId, e) listener.jobFailed(e) return } val job = new ActiveJob(jobId, finalStage, callSite, listener, properties) clearCacheLocs() logInfo(\"Got job %s (%s) with %d output partitions\".format( job.jobId, callSite.shortForm, partitions.length)) logInfo(\"Final stage: \" + finalStage + \" (\" + finalStage.name + \")\") logInfo(\"Parents of final stage: \" + finalStage.parents) logInfo(\"Missing parents: \" + getMissingParentStages(finalStage)) val jobSubmissionTime = clock.getTimeMillis() jobIdToActiveJob(jobId) = job activeJobs += job finalStage.setActiveJob(job) val stageIds = jobIdToStageIds(jobId).toArray val stageInfos = stageIds.flatMap(id =&gt; stageIdToStage.get(id).map(_.latestInfo)) listenerBus.post( SparkListenerJobStart(job.jobId, jobSubmissionTime, stageInfos, properties)) submitStage(finalStage) } private def createResultStage( rdd: RDD[_], func: (TaskContext, Iterator[_]) =&gt; _, partitions: Array[Int], jobId: Int, callSite: CallSite): ResultStage = { val parents = getOrCreateParentStages(rdd, jobId) val id = nextStageId.getAndIncrement() val stage = new ResultStage(id, rdd, func, partitions, parents, jobId, callSite) stageIdToStage(id) = stage updateJobIdStageIdMaps(jobId, stage) stage }注意这里的getOrCreateParentStages，后边也会调用，形成递归调用 private def getOrCreateParentStages(rdd: RDD[_], firstJobId: Int): List[Stage] = { getShuffleDependencies(rdd).map { shuffleDep =&gt; getOrCreateShuffleMapStage(shuffleDep, firstJobId) }.toList }getShuffleDependencies 只会获取上一层的dependency private[scheduler] def getShuffleDependencies( rdd: RDD[_]): HashSet[ShuffleDependency[_, _, _]] = { val parents = new HashSet[ShuffleDependency[_, _, _]] val visited = new HashSet[RDD[_]] val waitingForVisit = new Stack[RDD[_]] waitingForVisit.push(rdd) while (waitingForVisit.nonEmpty) { val toVisit = waitingForVisit.pop() if (!visited(toVisit)) { visited += toVisit toVisit.dependencies.foreach {//本层rdd的dependencies case shuffleDep: ShuffleDependency[_, _, _] =&gt; parents += shuffleDep case dependency =&gt; waitingForVisit.push(dependency.rdd) } } } parents }Get shuffle map stage private def getOrCreateShuffleMapStage( shuffleDep: ShuffleDependency[_, _, _], firstJobId: Int): ShuffleMapStage = { shuffleIdToMapStage.get(shuffleDep.shuffleId) match { case Some(stage) =&gt; stage case None =&gt; // Create stages for all missing ancestor shuffle dependencies. getMissingAncestorShuffleDependencies(shuffleDep.rdd).foreach { dep =&gt; // Even though getMissingAncestorShuffleDependencies only returns shuffle dependencies // that were not already in shuffleIdToMapStage, it's possible that by the time we // get to a particular dependency in the foreach loop, it's been added to // shuffleIdToMapStage by the stage creation process for an earlier dependency. See // SPARK-13902 for more information. if (!shuffleIdToMapStage.contains(dep.shuffleId)) { createShuffleMapStage(dep, firstJobId)//内部调用getOrCreateParentStages，构成递归调用获取parent stage } } // Finally, create a stage for the given shuffle dependency. createShuffleMapStage(shuffleDep, firstJobId) } }重点关注createShuffleMapStage,再这里边会对这一层(上层rdd依赖的shuffleDep.rdd)的rdd的parents def createShuffleMapStage(shuffleDep: ShuffleDependency[_, _, _], jobId: Int): ShuffleMapStage = { val rdd = shuffleDep.rdd val numTasks = rdd.partitions.length val parents = getOrCreateParentStages(rdd, jobId)//此处再次调用getOrCreateParentStages，获取本层rdd的parents val id = nextStageId.getAndIncrement() val stage = new ShuffleMapStage(id, rdd, numTasks, parents, jobId, rdd.creationSite, shuffleDep) stageIdToStage(id) = stage shuffleIdToMapStage(shuffleDep.shuffleId) = stage updateJobIdStageIdMaps(jobId, stage) if (mapOutputTracker.containsShuffle(shuffleDep.shuffleId)) { // A previously run stage generated partitions for this shuffle, so for each output // that's still available, copy information about that output location to the new stage // (so we don't unnecessarily re-compute that data). val serLocs = mapOutputTracker.getSerializedMapOutputStatuses(shuffleDep.shuffleId) val locs = MapOutputTracker.deserializeMapStatuses(serLocs) (0 until locs.length).foreach { i =&gt; if (locs(i) ne null) { // locs(i) will be null if missing stage.addOutputLoc(i, locs(i)) } } } else { // Kind of ugly: need to register RDDs with the cache and map output tracker here // since we can't do it in the RDD constructor because # of partitions is unknown logInfo(\"Registering RDD \" + rdd.id + \" (\" + rdd.getCreationSite + \")\") mapOutputTracker.registerShuffle(shuffleDep.shuffleId, rdd.partitions.length) } stage }" }, { "title": "float&double&decimal精度损失", "url": "/posts/float_double_/", "categories": "Java", "tags": "Spark, scala, java", "date": "2019-02-18 00:00:00 +0000", "snippet": "起初是同事在用spark sql时候反馈的一个问题，sql如下%hiveselect 10900*now_pocket_limit_rate as dfrom dp_fk_tmp.dszx_88w_v2where uid='41195' 这个now_pocket_limit_rate在表里的值为0.7，返回结果为：7629.999999999999此时脑海居然浮现出之前decimal group by不准确的问题，好吧先让用cast as decimal(38,1)) 替换select cast(10900*now_pocket_limit_rate as decimal(38,1)) as dfrom dp_fk_tmp.dszx_88w_v2where uid='41195' 结果肯定没问题回想起来以为是spark sql的问题，搜索无果，然后用scala跑了下scala&gt; 10900*0.7res0: Double = 7629.999999999999scala&gt; 10900*0.5res1: Double = 5450.0这个难道是scala的问题，直到我又用java跑了下 System.out.println(10900 * 0.7);输出也是7629.999999999999卧槽，脑回路才反应过来，这不是浮点精度问题么,经典的还有1-0.9scala&gt; 1.0 - 0.9res6: Double = 0.09999999999999998shit 疑问了半天，是个精度问题。。。这个mysql也是这样的吧mysql&gt; create table tt(num double);Query OK, 0 rows affected (0.07 sec)mysql&gt; insert into tt(num)values(0.7);Query OK, 1 row affected (0.00 sec)mysql&gt; select * from tt;+------+| num |+------+| 0.7 |+------+1 row in set (0.00 sec)mysql&gt; select num*10900 from tt;+-------------------+| num*10900 |+-------------------+| 7629.999999999999 |+-------------------+1 row in set (0.00 sec)mysql&gt; 默认方式mysql&gt; CREATE TABLE tt(f FLOAT DEFAULT NULL,d DOUBLE DEFAULT NULL,de DECIMAL DEFAULT NULL);Query OK, 0 rows affected (0.09 sec)mysql&gt; desc tt;+-------+---------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+---------------+------+-----+---------+-------+| f | float | YES | | NULL | || d | double | YES | | NULL | || de | decimal(10,0) | YES | | NULL | |+-------+---------------+------+-----+---------+-------+3 rows in set (0.00 sec)插入数据mysql&gt; INSERT INTO tt(f,d,de) VALUES(1.234,1.234,1.234);Query OK, 1 row affected, 1 warning (0.06 sec)mysql&gt; select * from tt;+-------+-------+------+| f | d | de |+-------+-------+------+| 1.234 | 1.234 | 1 |+-------+-------+------+1 row in set (0.00 sec)这个是默认的精度方式插入的：float，double按照四舍五入，decimal默认是整形数据，没有保留小数点后的数据接着修改下精度和标度mysql&gt; ALTER TABLE tt MODIFY f FLOAT(8,2);Query OK, 0 rows affected (0.02 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; ALTER TABLE tt MODIFY d DOUBLE(8,2);Query OK, 0 rows affected (0.04 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; ALTER TABLE tt MODIFY de DECIMAL(8,2);Query OK, 1 row affected (0.05 sec)Records: 1 Duplicates: 0 Warnings: 0mysql&gt; desc tt;+-------+--------------+------+-----+---------+-------+| Field | Type | Null | Key | Default | Extra |+-------+--------------+------+-----+---------+-------+| f | float(8,2) | YES | | NULL | || d | double(8,2) | YES | | NULL | || de | decimal(8,2) | YES | | NULL | |+-------+--------------+------+-----+---------+-------+3 rows in set (0.00 sec)mysql&gt; select * from tt;+------+------+------+| f | d | de |+------+------+------+| 1.23 | 1.23 | 1.00 |+------+------+------+1 row in set (0.00 sec)sum求和有时也会有问题mysql&gt; SELECT SUM(f),SUM(d),SUM(de) FROM tt;+--------+--------+---------+| SUM(f) | SUM(d) | SUM(de) |+--------+--------+---------+| 1.23 | 1.23 | 1.00 |+--------+--------+---------+1 row in set (0.00 sec)mysql&gt; INSERT INTO tt(f,d,de) VALUES(0.001,0.001,0.001);Query OK, 1 row affected, 1 warning (0.24 sec)mysql&gt; SELECT SUM(f),SUM(d),SUM(de) FROM tt;+--------+--------+---------+| SUM(f) | SUM(d) | SUM(de) |+--------+--------+---------+| 1.23 | 1.23 | 1.00 |+--------+--------+---------+1 row in set (0.00 sec)mysql&gt; INSERT INTO tt(f,d,de) VALUES(0.01,0.01,0.01);Query OK, 1 row affected (0.00 sec)mysql&gt; SELECT SUM(f),SUM(d),SUM(de) FROM tt;+--------+--------+---------+| SUM(f) | SUM(d) | SUM(de) |+--------+--------+---------+| 1.24 | 1.24 | 1.01 |+--------+--------+---------+1 row in set (0.01 sec)mysql&gt; select * from tt;+------+------+------+| f | d | de |+------+------+------+| 1.23 | 1.23 | 1.00 || 0.00 | 0.00 | 0.00 || 0.01 | 0.01 | 0.01 |+------+------+------+3 rows in set (0.00 sec)mysql&gt; ALTER TABLE tt MODIFY f FLOAT;Query OK, 0 rows affected (0.08 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; ALTER TABLE tt MODIFY d DOUBLE;Query OK, 0 rows affected (0.04 sec)Records: 0 Duplicates: 0 Warnings: 0mysql&gt; ALTER TABLE tt MODIFY de DECIMAL;Query OK, 3 rows affected, 1 warning (0.06 sec)Records: 3 Duplicates: 0 Warnings: 1mysql&gt; select * from tt;+-------+-------+------+| f | d | de |+-------+-------+------+| 1.234 | 1.234 | 1 || 0 | 0 | 0 || 0.01 | 0.01 | 0 |+-------+-------+------+3 rows in set (0.00 sec)mysql&gt; INSERT INTO tt(f,d,de) VALUES(1.234,0.01,1.23);Query OK, 1 row affected, 1 warning (0.00 sec)mysql&gt; select * from tt;+-------+-------+------+| f | d | de |+-------+-------+------+| 1.234 | 1.234 | 1 || 0 | 0 | 0 || 0.01 | 0.01 | 0 || 1.234 | 0.01 | 1 |+-------+-------+------+4 rows in set (0.00 sec)mysql&gt; SELECT SUM(f),SUM(d),SUM(de) FROM tt;+-------------------+--------+---------+| SUM(f) | SUM(d) | SUM(de) |+-------------------+--------+---------+| 2.477999934926629 | 1.254 | 2 |+-------------------+--------+---------+1 row in set (0.00 sec)mysql&gt;" }, { "title": "Spark Thrift 原理", "url": "/posts/Spark_thrift/", "categories": "spark", "tags": "Spark thrift", "date": "2019-02-12 00:00:00 +0000", "snippet": "hive jdbc client客户端执行sql入口statement.execute(sql);HiveStatement.javapublic boolean execute(String sql) throws SQLException { runAsyncOnServer(sql); TGetOperationStatusResp status = waitForOperationToComplete(); // The query should be completed by now if (!status.isHasResultSet() &amp;&amp; !stmtHandle.isHasResultSet()) { return false; } resultSet = new HiveQueryResultSet.Builder(this).setClient(client) .setStmtHandle(stmtHandle).setMaxRows(maxRows).setFetchSize(fetchSize) .setScrollable(isScrollableResultset) .build(); return true;}private void runAsyncOnServer(String sql) throws SQLException { checkConnection(\"execute\"); reInitState(); TExecuteStatementReq execReq = new TExecuteStatementReq(sessHandle, sql); /** * Run asynchronously whenever possible * Currently only a SQLOperation can be run asynchronously, * in a background operation thread * Compilation can run asynchronously or synchronously and execution run asynchronously */ execReq.setRunAsync(true); execReq.setConfOverlay(sessConf); execReq.setQueryTimeout(queryTimeout); try { TExecuteStatementResp execResp = client.ExecuteStatement(execReq); Utils.verifySuccessWithInfo(execResp.getStatus()); stmtHandle = execResp.getOperationHandle(); isExecuteStatementFailed = false; } catch (SQLException eS) { isExecuteStatementFailed = true; isLogBeingGenerated = false; throw eS; } catch (Exception ex) { isExecuteStatementFailed = true; isLogBeingGenerated = false; throw new SQLException(ex.toString(), \"08S01\", ex); }}thrift client侧通过sendBase发送ExecuteStatement给服务端//TCLIService.Ifacepublic TExecuteStatementResp ExecuteStatement(TExecuteStatementReq req) throws org.apache.thrift.TException{ send_ExecuteStatement(req); return recv_ExecuteStatement();}public void send_ExecuteStatement(TExecuteStatementReq req) throws org.apache.thrift.TException{ ExecuteStatement_args args = new ExecuteStatement_args(); args.setReq(req); sendBase(\"ExecuteStatement\", args);}服务端相关启动的类是CLASS=”org.apache.spark.sql.hive.thriftserver.HiveThriftServer2”，入口函数main val server = new HiveThriftServer2(SparkSQLEnv.sqlContext) server.init(executionHive.conf) server.start()init()会添加两种service,cliService，还有个thriftCLIServiceoverride def init(hiveConf: HiveConf) { val sparkSqlCliService = new SparkSQLCLIService(this, sqlContext) setSuperField(this, \"cliService\", sparkSqlCliService) addService(sparkSqlCliService) val thriftCliService = if (isHTTPTransportMode(hiveConf)) { new ThriftHttpCLIService(sparkSqlCliService) } else { new ThriftBinaryCLIService(sparkSqlCliService) } setSuperField(this, \"thriftCLIService\", thriftCliService) addService(thriftCliService) initCompositeService(hiveConf)}cliService就是SparkSQLCLIService,thriftCLIService这里会有两种可选择,ThriftBinaryCLIService以及tcp模式的ThriftHttpCLIService这两个都是封装的thrift相关的，按理thrift server服务直接看processor就好了，at org.apache.hive.service.cli.session.SessionManager.submitBackgroundOperation(SessionManager.java:354)at org.apache.spark.sql.hive.thriftserver.SparkExecuteStatementOperation.runInternal(SparkExecuteStatementOperation.scala:196)at org.apache.hive.service.cli.operation.Operation.run(Operation.java:257)at org.apache.hive.service.cli.session.HiveSessionImpl.executeStatementInternal(HiveSessionImpl.java:388)at org.apache.hive.service.cli.session.HiveSessionImpl.executeStatementAsync(HiveSessionImpl.java:375)at org.apache.hive.service.cli.CLIService.executeStatementAsync(CLIService.java:275)at org.apache.hive.service.cli.thrift.ThriftCLIService.ExecuteStatement(ThriftCLIService.java:436)at org.apache.hive.service.cli.thrift.TCLIService$Processor$ExecuteStatement.getResult(TCLIService.java:1313)at org.apache.hive.service.cli.thrift.TCLIService$Processor$ExecuteStatement.getResult(TCLIService.java:1298)at org.apache.thrift.ProcessFunction.process(ProcessFunction.java:39)at org.apache.thrift.TBaseProcessor.process(TBaseProcessor.java:39)at org.apache.hive.service.auth.TSetIpAddressProcessor.process(TSetIpAddressProcessor.java:53)at org.apache.thrift.server.TThreadPoolServer$WorkerProcess.run(TThreadPoolServer.java:286)at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)先看ThriftHttpCLIService，在其run函数里边启动jettyserver,processor是TCLIService.Processor TProcessor processor = new TCLIService.Processor&lt;Iface&gt;(this); TServlet thriftHttpServlet = new ThriftHttpServlet(processor, protocolFactory, authType, serviceUGI, httpUGI);// Context handlerfinal ServletContextHandler context = new ServletContextHandler( ServletContextHandler.SESSIONS);context.setContextPath(\"/\");String httpPath = getHttpPath(hiveConf .getVar(HiveConf.ConfVars.HIVE_SERVER2_THRIFT_HTTP_PATH));httpServer.setHandler(context);context.addServlet(new ServletHolder(thriftHttpServlet), httpPath);在TServlet的post看到processor的处理逻辑protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { TTransport inTransport = null; Object var4 = null; try { response.setContentType(\"application/x-thrift\"); if (null != this.customHeaders) { Iterator i$ = this.customHeaders.iterator(); while(i$.hasNext()) { Entry&lt;String, String&gt; header = (Entry)i$.next(); response.addHeader((String)header.getKey(), (String)header.getValue()); } } InputStream in = request.getInputStream(); OutputStream out = response.getOutputStream(); TTransport transport = new TIOStreamTransport(in, out); TProtocol inProtocol = this.inProtocolFactory.getProtocol(transport); TProtocol outProtocol = this.outProtocolFactory.getProtocol(transport); this.processor.process(inProtocol, outProtocol); out.flush(); } catch (TException var10) { throw new ServletException(var10); }}ThriftBinaryCLIService里边的不是直接使用的processor 而是processorFactoryTTransportFactory transportFactory = hiveAuthFactory.getAuthTransFactory();TProcessorFactory processorFactory = hiveAuthFactory.getAuthProcFactory(this);TThreadPoolServer.Args sargs = new TThreadPoolServer.Args(serverSocket) .processorFactory(processorFactory).transportFactory(transportFactory) .protocolFactory(new TBinaryProtocol.Factory()) .inputProtocolFactory(new TBinaryProtocol.Factory(true, true, maxMessageSize, maxMessageSize)) .requestTimeout(requestTimeout).requestTimeoutUnit(TimeUnit.SECONDS) .beBackoffSlotLength(beBackoffSlotLength).beBackoffSlotLengthUnit(TimeUnit.MILLISECONDS) .executorService(executorService);// TCP Serverserver = new TThreadPoolServer(sargs);server.setServerEventHandler(serverEventHandler);String msg = \"Starting \" + ThriftBinaryCLIService.class.getSimpleName() + \" on port \" + portNum + \" with \" + minWorkerThreads + \"...\" + maxWorkerThreads + \" worker threads\";LOG.info(msg);server.serve();这个factory也份两种形式public TProcessorFactory getAuthProcFactory(ThriftCLIService service) throws LoginException { if (authTypeStr.equalsIgnoreCase(AuthTypes.KERBEROS.getAuthName())) { return KerberosSaslHelper.getKerberosProcessorFactory(saslServer, service); } else { return PlainSaslHelper.getPlainProcessorFactory(service); }}//KerberosSaslHelperpublic static TProcessorFactory getKerberosProcessorFactory(Server saslServer, ThriftCLIService service) { return new CLIServiceProcessorFactory(saslServer, service);}//PlainSaslHelperpublic static TProcessorFactory getPlainProcessorFactory(ThriftCLIService service) { return new SQLPlainProcessorFactory(service);}CLIServiceProcessorFactory与SQLPlainProcessorFactory都继承自TProcessorFactoryprivate KerberosSaslHelper() { throw new UnsupportedOperationException(\"Can't initialize class\");}private static class CLIServiceProcessorFactory extends TProcessorFactory { private final ThriftCLIService service; private final Server saslServer; CLIServiceProcessorFactory(Server saslServer, ThriftCLIService service) { super(null); this.service = service; this.saslServer = saslServer; } @Override public TProcessor getProcessor(TTransport trans) { TProcessor sqlProcessor = new TCLIService.Processor&lt;Iface&gt;(service); return saslServer.wrapNonAssumingProcessor(sqlProcessor); }}private static final class SQLPlainProcessorFactory extends TProcessorFactory { private final ThriftCLIService service; SQLPlainProcessorFactory(ThriftCLIService service) { super(null); this.service = service; } @Override public TProcessor getProcessor(TTransport trans) { return new TSetIpAddressProcessor&lt;Iface&gt;(service); }}TSetIpAddressProcessor也是继承自TCLIService.Processor，这里讲了这么多Processor，看下里边具体的定义private static &lt;I extends Iface&gt; Map&lt;String, org.apache.thrift.ProcessFunction&lt;I, ? extends org.apache.thrift.TBase&gt;&gt; getProcessMap(Map&lt;String, org.apache.thrift.ProcessFunction&lt;I, ? extends org.apache.thrift.TBase&gt;&gt; processMap) { processMap.put(\"OpenSession\", new OpenSession()); processMap.put(\"CloseSession\", new CloseSession()); processMap.put(\"GetInfo\", new GetInfo()); processMap.put(\"ExecuteStatement\", new ExecuteStatement()); processMap.put(\"GetTypeInfo\", new GetTypeInfo()); processMap.put(\"GetCatalogs\", new GetCatalogs()); processMap.put(\"GetSchemas\", new GetSchemas()); processMap.put(\"GetTables\", new GetTables()); processMap.put(\"GetTableTypes\", new GetTableTypes()); processMap.put(\"GetColumns\", new GetColumns()); processMap.put(\"GetFunctions\", new GetFunctions()); processMap.put(\"GetOperationStatus\", new GetOperationStatus()); processMap.put(\"CancelOperation\", new CancelOperation()); processMap.put(\"CloseOperation\", new CloseOperation()); processMap.put(\"GetResultSetMetadata\", new GetResultSetMetadata()); processMap.put(\"FetchResults\", new FetchResults()); processMap.put(\"GetDelegationToken\", new GetDelegationToken()); processMap.put(\"CancelDelegationToken\", new CancelDelegationToken()); processMap.put(\"RenewDelegationToken\", new RenewDelegationToken()); return processMap;}ExecuteStatement应该不陌生，就是前面client提交过来的method了，在里还有这么一段代码public boolean process(TProtocol in, TProtocol out) throws TException { TMessage msg = in.readMessageBegin(); ProcessFunction fn = (ProcessFunction)this.processMap.get(msg.name); if (fn == null) { TProtocolUtil.skip(in, (byte)12); in.readMessageEnd(); TApplicationException x = new TApplicationException(1, \"Invalid method name: '\" + msg.name + \"'\"); out.writeMessageBegin(new TMessage(msg.name, (byte)3, msg.seqid)); x.write(out); out.writeMessageEnd(); out.getTransport().flush(); return true; } else { fn.process(msg.seqid, in, out, this.iface); return true; }}//ProcessFunctionpublic final void process(int seqid, TProtocol iprot, TProtocol oprot, I iface) throws TException { TBase args = this.getEmptyArgsInstance(); try { args.read(iprot); } catch (TProtocolException var10) { iprot.readMessageEnd(); TApplicationException x = new TApplicationException(7, var10.getMessage()); oprot.writeMessageBegin(new TMessage(this.getMethodName(), (byte)3, seqid)); x.write(oprot); oprot.writeMessageEnd(); oprot.getTransport().flush(); return; } iprot.readMessageEnd(); TBase result = null; try { result = this.getResult(iface, args); } catch (TException var9) { LOGGER.error(\"Internal error processing \" + this.getMethodName(), var9); TApplicationException x = new TApplicationException(6, \"Internal error processing \" + this.getMethodName()); oprot.writeMessageBegin(new TMessage(this.getMethodName(), (byte)3, seqid)); x.write(oprot); oprot.writeMessageEnd(); oprot.getTransport().flush(); return; } if (!this.isOneway()) { oprot.writeMessageBegin(new TMessage(this.getMethodName(), (byte)2, seqid)); result.write(oprot); oprot.writeMessageEnd(); oprot.getTransport().flush(); }}这个getResult是关键,就是map对应的，这里以上面的ExecuteStatement为例 public ExecuteStatement_result getResult(I iface, ExecuteStatement_args args) throws org.apache.thrift.TException { ExecuteStatement_result result = new ExecuteStatement_result(); result.success = iface.ExecuteStatement(args.req); return result; } }iface就是服务端实现了//ThriftCLIServicepublic TExecuteStatementResp ExecuteStatement(TExecuteStatementReq req) throws TException { TExecuteStatementResp resp = new TExecuteStatementResp(); try { SessionHandle sessionHandle = new SessionHandle(req.getSessionHandle()); String statement = req.getStatement(); Map&lt;String, String&gt; confOverlay = req.getConfOverlay(); Boolean runAsync = req.isRunAsync(); OperationHandle operationHandle = runAsync ? cliService.executeStatementAsync(sessionHandle, statement, confOverlay) : cliService.executeStatement(sessionHandle, statement, confOverlay); resp.setOperationHandle(operationHandle.toTOperationHandle()); resp.setStatus(OK_STATUS); } catch (Exception e) { LOG.warn(\"Error executing statement: \", e); resp.setStatus(HiveSQLException.toTStatus(e)); } return resp;}//CLIServicepublic OperationHandle executeStatementAsync(SessionHandle sessionHandle, String statement, Map&lt;String, String&gt; confOverlay) throws HiveSQLException { OperationHandle opHandle = sessionManager.getSession(sessionHandle) .executeStatementAsync(statement, confOverlay); LOG.debug(sessionHandle + \": executeStatementAsync()\"); return opHandle;}//SessionManagerpublic HiveSession getSession(SessionHandle sessionHandle) throws HiveSQLException { HiveSession session = handleToSession.get(sessionHandle); if (session == null) { throw new HiveSQLException(\"Invalid SessionHandle: \" + sessionHandle); } return session;}这个cliService不就是init里边放进去的SparkSQLCLIService吗，其父类是CLIService，注意区分前面的TCLIService这里需要关注下HiveThriftServer2初始化方法init()里的一段代码override def init(hiveConf: HiveConf) { val sparkSqlCliService = new SparkSQLCLIService(this, sqlContext) setSuperField(this, \"cliService\", sparkSqlCliService) addService(sparkSqlCliService) val thriftCliService = if (isHTTPTransportMode(hiveConf)) { new ThriftHttpCLIService(sparkSqlCliService) } else { new ThriftBinaryCLIService(sparkSqlCliService) } setSuperField(this, \"thriftCLIService\", thriftCliService) addService(thriftCliService) initCompositeService(hiveConf)}就是最后这个 initCompositeService(hiveConf)private[thriftserver] trait ReflectedCompositeService { this: AbstractService =&gt; def initCompositeService(hiveConf: HiveConf) { // Emulating `CompositeService.init(hiveConf)` val serviceList = getAncestorField[JList[Service]](this, 2, \"serviceList\") serviceList.asScala.foreach(_.init(hiveConf)) // Emulating `AbstractService.init(hiveConf)` invoke(classOf[AbstractService], this, \"ensureCurrentState\", classOf[STATE] -&gt; STATE.NOTINITED) setAncestorField(this, 3, \"hiveConf\", hiveConf) invoke(classOf[AbstractService], this, \"changeState\", classOf[STATE] -&gt; STATE.INITED) getAncestorField[Log](this, 3, \"LOG\").info(s\"Service: $getName is inited.\") }}会通过反射调用serviceList的init(),一开始添加的两个service都会在这里被init，看下SparkSQLCLIService的init过程override def init(hiveConf: HiveConf) { setSuperField(this, \"hiveConf\", hiveConf) val sparkSqlSessionManager = new SparkSQLSessionManager(hiveServer, sqlContext) setSuperField(this, \"sessionManager\", sparkSqlSessionManager) addService(sparkSqlSessionManager) var sparkServiceUGI: UserGroupInformation = null if (UserGroupInformation.isSecurityEnabled) { try { HiveAuthFactory.loginFromKeytab(hiveConf) sparkServiceUGI = Utils.getUGI() setSuperField(this, \"serviceUGI\", sparkServiceUGI) } catch { case e @ (_: IOException | _: LoginException) =&gt; throw new ServiceException(\"Unable to login to kerberos with given principal/keytab\", e) } } initCompositeService(hiveConf)}这里同样也会调用SparkSQLSessionManager的init吧，//SparkSQLSessionManageroverride def init(hiveConf: HiveConf) { setSuperField(this, \"hiveConf\", hiveConf) // Create operation log root directory, if operation logging is enabled if (hiveConf.getBoolVar(ConfVars.HIVE_SERVER2_LOGGING_OPERATION_ENABLED)) { invoke(classOf[SessionManager], this, \"initOperationLogRootDir\") } val backgroundPoolSize = hiveConf.getIntVar(ConfVars.HIVE_SERVER2_ASYNC_EXEC_THREADS) setSuperField(this, \"backgroundOperationPool\", Executors.newFixedThreadPool(backgroundPoolSize)) getAncestorField[Log](this, 3, \"LOG\").info( s\"HiveServer2: Async execution pool size $backgroundPoolSize\") setSuperField(this, \"operationManager\", sparkSqlOperationManager) addService(sparkSqlOperationManager) initCompositeService(hiveConf)}这个初始化里添加的service是SparkSQLOperationManager,但是SparkSQLOperationManager本身没有init，只有父类有了private[thriftserver] class SparkSQLOperationManager() extends OperationManager with Logging { val handleToOperation = ReflectionUtils .getSuperField[JMap[OperationHandle, Operation]](this, \"handleToOperation\") val sessionToActivePool = new ConcurrentHashMap[SessionHandle, String]() val sessionToContexts = new ConcurrentHashMap[SessionHandle, SQLContext]() override def newExecuteStatementOperation( parentSession: HiveSession, statement: String, confOverlay: JMap[String, String], async: Boolean): ExecuteStatementOperation = synchronized { val sqlContext = sessionToContexts.get(parentSession.getSessionHandle) require(sqlContext != null, s\"Session handle: ${parentSession.getSessionHandle} has not been\" + s\" initialized or had already closed.\") val conf = sqlContext.sessionState.conf val runInBackground = async &amp;&amp; conf.getConf(HiveUtils.HIVE_THRIFT_SERVER_ASYNC) val operation = new SparkExecuteStatementOperation(parentSession, statement, confOverlay, runInBackground)(sqlContext, sessionToActivePool) handleToOperation.put(operation.getHandle, operation) logDebug(s\"Created Operation for $statement with session=$parentSession, \" + s\"runInBackground=$runInBackground\") operation }上边的sessionManager应该是SparkSQLSessionManager，这里里边除了init只有两个方法了openSession与closeSession，其实还是调用的父类方法，只是封装了下，那获取session就不难找了 public SessionHandle openSession(TProtocolVersion protocol, String username, String password, String ipAddress, Map&lt;String, String&gt; sessionConf, boolean withImpersonation, String delegationToken) throws HiveSQLException { HiveSession session; // If doAs is set to true for HiveServer2, we will create a proxy object for the session impl. // Within the proxy object, we wrap the method call in a UserGroupInformation#doAs if (withImpersonation) { HiveSessionImplwithUGI sessionWithUGI = new HiveSessionImplwithUGI(protocol, username, password, hiveConf, ipAddress, delegationToken); session = HiveSessionProxy.getProxy(sessionWithUGI, sessionWithUGI.getSessionUgi()); sessionWithUGI.setProxySession(session); } else { session = new HiveSessionImpl(protocol, username, password, hiveConf, ipAddress); } session.setSessionManager(this); session.setOperationManager(operationManager); try { session.open(sessionConf); } catch (Exception e) { try { session.close(); } catch (Throwable t) { LOG.warn(\"Error closing session\", t); } session = null; throw new HiveSQLException(\"Failed to open new session: \" + e, e); } if (isOperationLogEnabled) { session.setOperationLogSessionDir(operationLogRootDir); } handleToSession.put(session.getSessionHandle(), session); return session.getSessionHandle(); }回到之前调用的代码public OperationHandle executeStatementAsync(SessionHandle sessionHandle, String statement, Map&lt;String, String&gt; confOverlay) throws HiveSQLException { OperationHandle opHandle = sessionManager.getSession(sessionHandle) .executeStatementAsync(statement, confOverlay); LOG.debug(sessionHandle + \": executeStatementAsync()\"); return opHandle;}这里就是HiveSessionImpl里的调用了public OperationHandle executeStatementAsync(String statement, Map&lt;String, String&gt; confOverlay) throws HiveSQLException { return executeStatementInternal(statement, confOverlay, true);} private OperationHandle executeStatementInternal(String statement, Map&lt;String, String&gt; confOverlay, boolean runAsync) throws HiveSQLException { acquire(true); OperationManager operationManager = getOperationManager(); ExecuteStatementOperation operation = operationManager .newExecuteStatementOperation(getSession(), statement, confOverlay, runAsync); OperationHandle opHandle = operation.getHandle(); try { operation.run(); opHandleSet.add(opHandle); return opHandle; } catch (HiveSQLException e) { // Refering to SQLOperation.java,there is no chance that a HiveSQLException throws and the asyn // background operation submits to thread pool successfully at the same time. So, Cleanup // opHandle directly when got HiveSQLException operationManager.closeOperation(opHandle); throw e; } finally { release(true); } }//Operationpublic void run() throws HiveSQLException { beforeRun(); try { runInternal(); } finally { afterRun(); }}这个Operation是啥呢，就是SparkExecuteStatementOperation,绕了一圈这里才是熟悉的sqlContext.sql()override def runInternal(): Unit = { //... if (!runInBackground) { execute() } else { //... } private def execute(): Unit = { //... result = sqlContext.sql(statement) //... }" }, { "title": "Building Zeppelin from source", "url": "/posts/zeppelin_build/", "categories": "zeppelin", "tags": "zeppelin", "date": "2019-01-30 00:00:00 +0000", "snippet": "编译，这里使用的zeppelin-0.8.0的zip包,如果直接使用0.8.0的all包注意jdk版本不能低于jdk1.8.0_144 ，反编译javax.ws是基于这个版本编译的cd zeppelin-0.8.0mvn clean package -Pbuild-distr -DskipTests -Denforcer.skip=true -Dcheckstyle.skip=true -DskipRat=true注意修改npm的源,也可以修改为ali的源npm config set registry \"http://registry.npmjs.org/\"编译内部基于0.7.0修改版本编译还碰到个问题[INFO] bower jspdf#1.0.272 || 1.1.239 progress Receiving objects: 94% (2493/2652), 11.64 MiB | 1.01 MiB/s[ERROR] bower filesaver.js#* ECMDERR Failed to execute \"git ls-remote --tags --heads https://github.com/carlos-algms/FileSaver.js.git\", exit code of #128 error: The requested URL returned error: 403 Forbidden while accessing https://github.com/carlos-algms/FileSaver.js.git/info/refs fatal: HTTP request failed[ERROR][ERROR] Additional error details:[ERROR] error: The requested URL returned error: 403 Forbidden while accessing https://github.com/carlos-algms/FileSaver.js.git/info/refs这个找了很久 各种dependency-tree 好像都没用 找不到那个依赖了这个库，因为package.json,bower.json都没有明确依赖这个库，唯一的可能就是依赖的.json文件声明的依赖依赖了这个库,最后用下面的命令一一排除，这个也挺坑，bower install package#version &amp; bower list无意间在这个链接lorvent-bower发现remove the following dependencies from bower.json, and it will be working fine, also remove the bootstrap_table.vue from routes.js to avoid errors as that page is importing these packages.\"bootstrap-table\": \"~1.11.0\", \"tableExport.jquery.plugin\": \"~1.5.2\",果然是包含tableExport.jquery.plugin，这个大概是2年前写的，当时这个repositories(https://github.com/carlos-algms/FileSaver.js)大概还在最后搜索github commit记录,https://github.com/hhurz/tableExport.jquery.plugin/commit/8a314017d803f03dd18dd5999d22121c1cbce2b8从1.6.4开始，依赖的库配置果然从 \"filesaver.js\": \"*\",改成了\"file-saver\": \"&gt;=1.2.0\",附：npmjs-tableexport.jquery.pluginException in thread \"main\" java.lang.InstantiationError: org.eclipse.jetty.util.component.Container at org.eclipse.jetty.server.Server.&lt;init&gt;(Server.java:66) at org.apache.zeppelin.server.ZeppelinServer.setupJettyServer(ZeppelinServer.java:224) at org.apache.zeppelin.server.ZeppelinServer.main(ZeppelinServer.java:142)包的问题，引入了多余的包jetty-all-7.6.0.v20120127.jar,这个是hive-jdbc依赖的hive-service引入的，exclusion掉吧# ls lib/jetty-jetty-6.1.26.jar jetty-client-9.2.15.v20160210.jar jetty-io-9.2.15.v20160210.jar jetty-server-9.2.15.v20160210.jar jetty-util-6.1.26.jar jetty-webapp-9.2.15.v20160210.jarjetty-all-7.6.0.v20120127.jar jetty-http-9.2.15.v20160210.jar jetty-security-9.2.15.v20160210.jar jetty-servlet-9.2.15.v20160210.jar jetty-util-9.2.15.v20160210.jar jetty-xml-9.2.15.v20160210.jarslf4j依赖重复问题&lt;!-- &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;/dependency&gt;--&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;/dependency&gt;" }, { "title": "Etcd snapshot", "url": "/posts/etcd-snapshot/", "categories": "distributed", "tags": "etcd", "date": "2018-12-04 00:00:00 +0000", "snippet": "etcd的消息和日志都是在raftNode.start()启动的协程里面处理的(持久化)//etcdserver/raft.go// start prepares and starts raftNode in a new goroutine. It is no longer safe// to modify the fields after it has been started.func (r *raftNode) start(rh *raftReadyHandler) {\tinternalTimeout := time.Second\tgo func() {\t\tdefer r.onStop()\t\tislead := false\t\tfor {\t\t\tselect {\t\t\tcase &lt;-r.ticker.C:\t\t\t\tr.tick()\t\t\tcase rd := &lt;-r.Ready():\t\t\t\tif rd.SoftState != nil {\t\t\t\t\tnewLeader := rd.SoftState.Lead != raft.None &amp;&amp; rh.getLead() != rd.SoftState.Lead\t\t\t\t\tif newLeader {\t\t\t\t\t\tleaderChanges.Inc()\t\t\t\t\t}\t\t\t\t\tif rd.SoftState.Lead == raft.None {\t\t\t\t\t\thasLeader.Set(0)\t\t\t\t\t} else {\t\t\t\t\t\thasLeader.Set(1)\t\t\t\t\t}\t\t\t\t\trh.updateLead(rd.SoftState.Lead)\t\t\t\t\tislead = rd.RaftState == raft.StateLeader\t\t\t\t\tif islead {\t\t\t\t\t\tisLeader.Set(1)\t\t\t\t\t} else {\t\t\t\t\t\tisLeader.Set(0)\t\t\t\t\t}\t\t\t\t\trh.updateLeadership(newLeader)\t\t\t\t\tr.td.Reset()\t\t\t\t}\t\t\t\tif len(rd.ReadStates) != 0 {\t\t\t\t\tselect {\t\t\t\t\tcase r.readStateC &lt;- rd.ReadStates[len(rd.ReadStates)-1]:\t\t\t\t\tcase &lt;-time.After(internalTimeout):\t\t\t\t\t\tif r.lg != nil {\t\t\t\t\t\t\tr.lg.Warn(\"timed out sending read state\", zap.Duration(\"timeout\", internalTimeout))\t\t\t\t\t\t} else {\t\t\t\t\t\t\tplog.Warningf(\"timed out sending read state\")\t\t\t\t\t\t}\t\t\t\t\tcase &lt;-r.stopped:\t\t\t\t\t\treturn\t\t\t\t\t}\t\t\t\t}\t\t\t\tnotifyc := make(chan struct{}, 1)\t\t\t\tap := apply{\t\t\t\t\tentries: rd.CommittedEntries,\t\t\t\t\tsnapshot: rd.Snapshot,\t\t\t\t\tnotifyc: notifyc,\t\t\t\t}\t\t\t\tupdateCommittedIndex(&amp;ap, rh)\t\t\t\tselect {\t\t\t\tcase r.applyc &lt;- ap:\t\t\t\tcase &lt;-r.stopped:\t\t\t\t\treturn\t\t\t\t}\t\t\t\t// the leader can write to its disk in parallel with replicating to the followers and them\t\t\t\t// writing to their disks.\t\t\t\t// For more details, check raft thesis 10.2.1\t\t\t\tif islead {\t\t\t\t\t// gofail: var raftBeforeLeaderSend struct{}\t\t\t\t\tr.transport.Send(r.processMessages(rd.Messages))\t\t\t\t}\t\t\t\t// gofail: var raftBeforeSave struct{}\t\t\t\tif err := r.storage.Save(rd.HardState, rd.Entries); err != nil {//将日志条目写入到wal文件\t\t\t\t\tif r.lg != nil {\t\t\t\t\t\tr.lg.Fatal(\"failed to save Raft hard state and entries\", zap.Error(err))\t\t\t\t\t} else {\t\t\t\t\t\tplog.Fatalf(\"raft save state and entries error: %v\", err)\t\t\t\t\t}\t\t\t\t}\t\t\t\tif !raft.IsEmptyHardState(rd.HardState) {\t\t\t\t\tproposalsCommitted.Set(float64(rd.HardState.Commit))\t\t\t\t}\t\t\t\t// gofail: var raftAfterSave struct{}\t\t\t\tif !raft.IsEmptySnap(rd.Snapshot) {//如果snapshot不为空，保存snapshot\t\t\t\t\t// gofail: var raftBeforeSaveSnap struct{}\t\t\t\t\tif err := r.storage.SaveSnap(rd.Snapshot); err != nil {\t\t\t\t\t\tif r.lg != nil {\t\t\t\t\t\t\tr.lg.Fatal(\"failed to save Raft snapshot\", zap.Error(err))\t\t\t\t\t\t} else {\t\t\t\t\t\t\tplog.Fatalf(\"raft save snapshot error: %v\", err)\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\t// etcdserver now claim the snapshot has been persisted onto the disk\t\t\t\t\tnotifyc &lt;- struct{}{}\t\t\t\t\t// gofail: var raftAfterSaveSnap struct{}\t\t\t\t\tr.raftStorage.ApplySnapshot(rd.Snapshot)\t\t\t\t\tif r.lg != nil {\t\t\t\t\t\tr.lg.Info(\"applied incoming Raft snapshot\", zap.Uint64(\"snapshot-index\", rd.Snapshot.Metadata.Index))\t\t\t\t\t} else {\t\t\t\t\t\tplog.Infof(\"raft applied incoming snapshot at index %d\", rd.Snapshot.Metadata.Index)\t\t\t\t\t}\t\t\t\t\t// gofail: var raftAfterApplySnap struct{}\t\t\t\t}\t\t\t\tr.raftStorage.Append(rd.Entries)//将log写入raft的storage(MemoryStore)\t\t\t\tif !islead {\t\t\t\t\t// finish processing incoming messages before we signal raftdone chan\t\t\t\t\tmsgs := r.processMessages(rd.Messages)\t\t\t\t\t// now unblocks 'applyAll' that waits on Raft log disk writes before triggering snapshots\t\t\t\t\tnotifyc &lt;- struct{}{}\t\t\t\t\t// Candidate or follower needs to wait for all pending configuration\t\t\t\t\t// changes to be applied before sending messages.\t\t\t\t\t// Otherwise we might incorrectly count votes (e.g. votes from removed members).\t\t\t\t\t// Also slow machine's follower raft-layer could proceed to become the leader\t\t\t\t\t// on its own single-node cluster, before apply-layer applies the config change.\t\t\t\t\t// We simply wait for ALL pending entries to be applied for now.\t\t\t\t\t// We might improve this later on if it causes unnecessary long blocking issues.\t\t\t\t\twaitApply := false\t\t\t\t\tfor _, ent := range rd.CommittedEntries {\t\t\t\t\t\tif ent.Type == raftpb.EntryConfChange {\t\t\t\t\t\t\twaitApply = true\t\t\t\t\t\t\tbreak\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\tif waitApply {\t\t\t\t\t\t// blocks until 'applyAll' calls 'applyWait.Trigger'\t\t\t\t\t\t// to be in sync with scheduled config-change job\t\t\t\t\t\t// (assume notifyc has cap of 1)\t\t\t\t\t\tselect {\t\t\t\t\t\tcase notifyc &lt;- struct{}{}:\t\t\t\t\t\tcase &lt;-r.stopped:\t\t\t\t\t\t\treturn\t\t\t\t\t\t}\t\t\t\t\t}\t\t\t\t\t// gofail: var raftBeforeFollowerSend struct{}\t\t\t\t\tr.transport.Send(msgs)\t\t\t\t} else {\t\t\t\t\t// leader already processed 'MsgSnap' and signaled\t\t\t\t\tnotifyc &lt;- struct{}{}\t\t\t\t}\t\t\t\tr.Advance()\t\t\tcase &lt;-r.stopped:\t\t\t\treturn\t\t\t}\t\t}\t}()}而example则是在serveChannels//raftexample/raft.gofunc (rc *raftNode) serveChannels() {\tsnap, err := rc.raftStorage.Snapshot()\tif err != nil {\t\tpanic(err)\t}\trc.confState = snap.Metadata.ConfState\trc.snapshotIndex = snap.Metadata.Index\trc.appliedIndex = snap.Metadata.Index\tdefer rc.wal.Close()\tticker := time.NewTicker(100 * time.Millisecond)\tdefer ticker.Stop()\t// send proposals over raft\tgo func() {\t\tconfChangeCount := uint64(0)\t\tfor rc.proposeC != nil &amp;&amp; rc.confChangeC != nil {\t\t\tselect {\t\t\tcase prop, ok := &lt;-rc.proposeC:\t\t\t\tif !ok {\t\t\t\t\trc.proposeC = nil\t\t\t\t} else {\t\t\t\t\t// blocks until accepted by raft state machine\t\t\t\t\trc.node.Propose(context.TODO(), []byte(prop))\t\t\t\t}\t\t\tcase cc, ok := &lt;-rc.confChangeC:\t\t\t\tif !ok {\t\t\t\t\trc.confChangeC = nil\t\t\t\t} else {\t\t\t\t\tconfChangeCount++\t\t\t\t\tcc.ID = confChangeCount\t\t\t\t\trc.node.ProposeConfChange(context.TODO(), cc)\t\t\t\t}\t\t\t}\t\t}\t\t// client closed channel; shutdown raft if not already\t\tclose(rc.stopc)\t}()\t// event loop on raft state machine updates\tfor {\t\tselect {\t\tcase &lt;-ticker.C:\t\t\trc.node.Tick()\t\t// store raft entries to wal, then publish over commit channel\t\tcase rd := &lt;-rc.node.Ready():\t\t\trc.wal.Save(rd.HardState, rd.Entries)\t\t\tif !raft.IsEmptySnap(rd.Snapshot) {\t\t\t\trc.saveSnap(rd.Snapshot)\t\t\t\trc.raftStorage.ApplySnapshot(rd.Snapshot)\t\t\t\trc.publishSnapshot(rd.Snapshot)\t\t\t}\t\t\trc.raftStorage.Append(rd.Entries)\t\t\trc.transport.Send(rd.Messages)\t\t\tif ok := rc.publishEntries(rc.entriesToApply(rd.CommittedEntries)); !ok {\t\t\t\trc.stop()\t\t\t\treturn\t\t\t}\t\t\trc.maybeTriggerSnapshot()\t\t\trc.node.Advance()\t\tcase err := &lt;-rc.transport.ErrorC:\t\t\trc.writeError(err)\t\t\treturn\t\tcase &lt;-rc.stopc:\t\t\trc.stop()\t\t\treturn\t\t}\t}}注意，如果当前Follower需要append的term与entries找不到，也就是被snapshot了，那么会直接转换成发送MsgSnap，发送当前的snapshotif errt != nil || erre != nil { // send snapshot if we failed to get term or entries\tif !pr.RecentActive {\t\tr.logger.Debugf(\"ignore sending snapshot to %x since it is not recently active\", to)\t\treturn false\t}\tm.Type = pb.MsgSnap//\tsnapshot, err := r.raftLog.snapshot()//获取snapshot\tif err != nil {\t\tif err == ErrSnapshotTemporarilyUnavailable {\t\t\tr.logger.Debugf(\"%x failed to send snapshot to %x because snapshot is temporarily unavailable\", r.id, to)\t\t\treturn false\t\t}\t\tpanic(err) // TODO(bdarnell)\t}\tif IsEmptySnap(snapshot) {\t\tpanic(\"need non-empty snapshot\")\t}\tm.Snapshot = snapshot//要发送额snapshot\tsindex, sterm := snapshot.Metadata.Index, snapshot.Metadata.Term\tr.logger.Debugf(\"%x [firstindex: %d, commit: %d] sent snapshot[index: %d, term: %d] to %x [%s]\",\t\tr.id, r.raftLog.firstIndex(), r.raftLog.committed, sindex, sterm, to, pr)\tpr.becomeSnapshot(sindex)\tr.logger.Debugf(\"%x paused sending replication messages to %x [%s]\", r.id, to, pr)else{...}" }, { "title": "Etcd log replication", "url": "/posts/etcd-log-repalication/", "categories": "distributed", "tags": "etcd", "date": "2018-12-04 00:00:00 +0000", "snippet": "什么时候Commit当follow append log后返回leader,再次调用maybeCommit()时，第一次调用时由于follow都没有append log半数或以上的计算是将所有的index排序后，取中间的index的大小比较？以下是过半数逻辑的优化pr:r.quorum()取半数以上func (r *raft) quorum() int { return len(r.prs)/2 + 1 }" }, { "title": "Flink Yarn Session的启动", "url": "/posts/flink_yarn_session_start/", "categories": "Flink", "tags": "flink, yarn, realtime", "date": "2018-11-22 00:00:00 +0000", "snippet": "bin/yarn-session.sh -n 3 -s 4 -jm 4096m -tm 4096m -nm flink-1.6.0 –d脚本yarn-session.sh的内容bin=`dirname \"$0\"`bin=`cd \"$bin\"; pwd`# get Flink config. \"$bin\"/config.shif [ \"$FLINK_IDENT_STRING\" = \"\" ]; then FLINK_IDENT_STRING=\"$USER\"fiJVM_ARGS=\"$JVM_ARGS -Xmx512m\"CC_CLASSPATH=`manglePathList $(constructFlinkClassPath):$INTERNAL_HADOOP_CLASSPATHS`log=$FLINK_LOG_DIR/flink-$FLINK_IDENT_STRING-yarn-session-$HOSTNAME.loglog_setting=\"-Dlog.file=\"$log\" -Dlog4j.configuration=file:\"$FLINK_CONF_DIR\"/log4j-yarn-session.properties -Dlogback.configurationFile=file:\"$FLINK_CONF_DIR\"/logback-yarn.xml\"export FLINK_CONF_DIR$JAVA_RUN $JVM_ARGS -classpath \"$CC_CLASSPATH\" $log_setting org.apache.flink.yarn.cli.FlinkYarnSessionCli -j \"$FLINK_LIB_DIR\"/flink-dist*.jar \"$@\"执行的主类是FlinkYarnSessionCli,public int run(String[] args) throws CliArgsException, FlinkException { // //\tCommand Line Options // final CommandLine cmd = parseCommandLineOptions(args, true); if (cmd.hasOption(help.getOpt())) { printUsage(); return 0; } //initialize and start a YarnClient final AbstractYarnClusterDescriptor yarnClusterDescriptor = createClusterDescriptor(cmd); try { // Query cluster for metrics if (cmd.hasOption(query.getOpt())) { final String description = yarnClusterDescriptor.getClusterDescription(); System.out.println(description); return 0; } else { final ClusterClient&lt;ApplicationId&gt; clusterClient; final ApplicationId yarnApplicationId; if (cmd.hasOption(applicationId.getOpt())) { yarnApplicationId = ConverterUtils.toApplicationId(cmd.getOptionValue(applicationId.getOpt())); clusterClient = yarnClusterDescriptor.retrieve(yarnApplicationId); } else { final ClusterSpecification clusterSpecification = getClusterSpecification(cmd); //create an application, and get its application id. clusterClient = yarnClusterDescriptor.deploySessionCluster(clusterSpecification); //------------------ ClusterClient deployed, handle connection details yarnApplicationId = clusterClient.getClusterId(); try { final LeaderConnectionInfo connectionInfo = clusterClient.getClusterConnectionInfo(); System.out.println(\"Flink JobManager is now running on \" + connectionInfo.getHostname() + ':' + connectionInfo.getPort() + \" with leader id \" + connectionInfo.getLeaderSessionID() + '.'); System.out.println(\"JobManager Web Interface: \" + clusterClient.getWebInterfaceURL()); writeYarnPropertiesFile( yarnApplicationId, clusterSpecification.getNumberTaskManagers() * clusterSpecification.getSlotsPerTaskManager(), yarnClusterDescriptor.getDynamicPropertiesEncoded()); } catch (Exception e) { try { clusterClient.shutdown(); } catch (Exception ex) { LOG.info(\"Could not properly shutdown cluster client.\", ex); } try { yarnClusterDescriptor.killCluster(yarnApplicationId); } catch (FlinkException fe) { LOG.info(\"Could not properly terminate the Flink cluster.\", fe); } throw new FlinkException(\"Could not write the Yarn connection information.\", e); }具体步骤参考Hadoop: Writing YARN Applications1, 初始化创建yarnclient//FlinkYarnSessionCli.java initialize and start a YarnClientfinal AbstractYarnClusterDescriptor yarnClusterDescriptor = createClusterDescriptor(cmd);public AbstractYarnClusterDescriptor createClusterDescriptor(CommandLine commandLine) throws FlinkException { final Configuration effectiveConfiguration = applyCommandLineOptionsToConfiguration(commandLine); return createDescriptor( effectiveConfiguration, yarnConfiguration, configurationDirectory, commandLine);}//FlinkYarnSessionCli.java private AbstractYarnClusterDescriptor createDescriptor(\t\t\tConfiguration configuration,\t\t\tYarnConfiguration yarnConfiguration,\t\t\tString configurationDirectory,\t\t\tCommandLine cmd) {\t\tAbstractYarnClusterDescriptor yarnClusterDescriptor = getClusterDescriptor(\t\t\tconfiguration,\t\t\tyarnConfiguration,\t\t\tconfigurationDirectory);//FlinkYarnSessionCli.java private AbstractYarnClusterDescriptor getClusterDescriptor( Configuration configuration, YarnConfiguration yarnConfiguration, String configurationDirectory) { final YarnClient yarnClient = YarnClient.createYarnClient(); yarnClient.init(yarnConfiguration); yarnClient.start();2, 有了这个yarnClient就可以create an application, and get its application idclusterClient = yarnClusterDescriptor.deploySessionCluster(clusterSpecification);public ClusterClient&lt;ApplicationId&gt; deploySessionCluster(ClusterSpecification clusterSpecification) throws ClusterDeploymentException { try {//阻塞直到YarnApplicationMasterRunner启动起来， return deployInternal( clusterSpecification, \"Flink session cluster\", getYarnSessionClusterEntrypoint(), null, false); } catch (Exception e) { throw new ClusterDeploymentException(\"Couldn't deploy Yarn session cluster\", e); }}//org.apache.flink.yarn.AbstractYarnClusterDescriptor.javaprotected ClusterClient&lt;ApplicationId&gt; deployInternal(){ ... // Create application via yarnClient final YarnClientApplication yarnApplication = yarnClient.createApplication(); final GetNewApplicationResponse appResponse = yarnApplication.getNewApplicationResponse(); //appResponse.getApplicationId(); ...}3, 两个主要的context: ApplicationSubmissionContext与ContainerLaunchContext,//org.apache.flink.yarn.AbstractYarnClusterDescriptor.java：部分代码public ApplicationReport startAppMaster(){\t\tApplicationSubmissionContext appContext = yarnApplication.getApplicationSubmissionContext(); final ContainerLaunchContext amContainer = setupApplicationMasterContainer(\t\t\tyarnClusterEntrypoint,\t\t\thasLogback,\t\t\thasLog4j,\t\t\thasKrb5,\t\t\tclusterSpecification.getMasterMemoryMB()); amContainer.setLocalResources(localResources); amContainer.setEnvironment(appMasterEnv); appContext.setApplicationName(customApplicationName);\t\tappContext.setApplicationType(\"Apache Flink\");\t\tappContext.setAMContainerSpec(amContainer);\t\tappContext.setResource(capability);}4, 有了yarnclient与appcontext就可以submit the applicationyarnClient.submitApplication(appContext);在此之后会启动一个amcontainer来启动ApplicationMaster,flink里的am是启动YarnApplicationMasterRunner比如yarn里,可以通过default_container_executor.sh等方式 启动一个container5, Get application reporttry {\t\t\t\treport = yarnClient.getApplicationReport(appId);\t\t\t} catch (IOException e) {\t\t\t\tthrow new YarnDeploymentException(\"Failed to deploy the cluster.\", e);\t\t\t}\t\t\tYarnApplicationState appState = report.getYarnApplicationState();\t\t\tLOG.debug(\"Application State: {}\", appState);\t\t\tswitch(appState) {\t\t\t\tcase FAILED:\t\t\t\tcase FINISHED:\t\t\t\tcase KILLED:\t\t\t\t\tthrow new YarnDeploymentException(\"The YARN application unexpectedly switched to state \"\t\t\t\t\t\t+ appState + \" during deployment. \\n\" +\t\t\t\t\t\t\"Diagnostics from YARN: \" + report.getDiagnostics() + \"\\n\" +\t\t\t\t\t\t\"If log aggregation is enabled on your cluster, use this command to further investigate the issue:\\n\" +\t\t\t\t\t\t\"yarn logs -applicationId \" + appId);\t\t\t\t\t//break ..\t\t\t\tcase RUNNING:\t\t\t\t\tLOG.info(\"YARN application has been deployed successfully.\");\t\t\t\t\tbreak loop;\t\t\t\tdefault:\t\t\t\t\tif (appState != lastAppState) {\t\t\t\t\t\tLOG.info(\"Deploying cluster, current state \" + appState);\t\t\t\t\t}\t\t\t\t\tif (System.currentTimeMillis() - startTime &gt; 60000) {\t\t\t\t\t\tLOG.info(\"Deployment took more than 60 seconds. Please check if the requested resources are available in the YARN cluster\");\t\t\t\t\t}\t\t\t}" }, { "title": "Flink jobmanager&taskmanager的启动", "url": "/posts/flink_jm_tm_start/", "categories": "Flink", "tags": "flink, yarn, realtime", "date": "2018-11-22 00:00:00 +0000", "snippet": "YarnApplicationMasterRunner–&gt;run()–&gt;runApplicationMaster()// 2: the JobManagerLOG.debug(\"Starting JobManager actor\");// we start the JobManager with its standard nameActorRef jobManager = JobManager.startJobManagerActors( config, actorSystem, futureExecutor, ioExecutor, highAvailabilityServices, metricRegistry, webMonitor == null ? Option.empty() : Option.apply(webMonitor.getRestAddress()), new Some&lt;&gt;(JobMaster.JOB_MANAGER_NAME), Option.&lt;String&gt;empty(), getJobManagerClass(), getArchivistClass())._1();// 3: Flink's Yarn ResourceManagerLOG.debug(\"Starting YARN Flink Resource Manager\");Props resourceMasterProps = YarnFlinkResourceManager.createActorProps( getResourceManagerClass(), config, yarnConfig, highAvailabilityServices.getJobManagerLeaderRetriever(HighAvailabilityServices.DEFAULT_JOB_ID), appMasterHostname, webMonitorURL, taskManagerParameters, taskManagerContext, numInitialTaskManagers, LOG);注意YarnFlinkResourceManager，JobManager都是Actor" }, { "title": "抓包分析工具ngrep ", "url": "/posts/ngrep/", "categories": "Protocols", "tags": "tools, Protocols, NetWork", "date": "2018-11-07 00:00:00 +0000", "snippet": "安装配置wget http://nchc.dl.sourceforge.net/sourceforge/ngrep/ngrep-1.45.tar.bz2bzip2 -d ngrep-1.45.tar.bz2tar xvf ngrep-1.45.tarcd ngrep-1.45yum install libpcap libpcap-devel -y./configure --with-pcap-includes=/usr/local/include/pcap make &amp; make installcontos7 yum 安装rpm -ivh http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmyum install ngrep 抓包分析mysql事务提交过程客户端mysql&gt; begin;Query OK, 0 rows affected (0.00 sec)mysql&gt; select * from user limit 2\\G;*************************** 1. row ***************************mysql&gt; commit;Query OK, 0 rows affected (0.00 sec)ngrep抓包显示内容# ngrep -W byline -d eth2 port 3306|grep -E -i -w \"select|begin|commit\".....begin.....select * from user limit 2.....commit还可以试试zipkin,客户端访问这个urlhttp://172.28.3.169:9411/zipkin/traceViewer抓包显示如下# ngrep -W byline -d eth2 port 9411interface: eth2 (172.28.3.0/255.255.255.0)filter: (ip) and ( port 9411 )####T 172.28.24.156:53048 -&gt; 172.28.3.169:9411 [AP]GET /zipkin/nav_zh.properties HTTP/1.1.Host: 172.28.3.169:9411.Connection: keep-alive.Accept: text/plain, */*; q=0.01.X-Requested-With: XMLHttpRequest.User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36.Referer: http://172.28.3.169:9411/zipkin/traceViewer.Accept-Encoding: gzip, deflate.Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7..#T 172.28.3.169:9411 -&gt; 172.28.24.156:53048 [AP]HTTP/1.1 404 Not Found.Content-Encoding: gzip.Connection: keep-alive.vary: origin.Transfer-Encoding: chunked.Content-Type: application/json;charset=UTF-8.Date: Wed, 07 Nov 2018 10:38:58 GMT..80...........\\....0.E..y.......:2..HX4BM,.e(...........R..2D89.=b....x...........tk.....H.k.U.s....{j.I......=.+....}_...$..........#T 172.28.3.169:9411 -&gt; 172.28.24.156:53048 [AP]0a.只显示Referer# ngrep -W byline -d eth2 port 9411|grep RefererReferer: http://172.28.3.169:9411/zipkin/traceViewer.Referer: http://172.28.3.169:9411/zipkin/dependency/.Referer: http://172.28.3.169:9411/zipkin/dependency/.Referer: http://172.28.3.169:9411/zipkin/dependency/.Referer: http://172.28.3.169:9411/zipkin/dependency/.Referer: http://172.28.3.169:9411/zipkin/traceViewer." }, { "title": "Hive源码流程分析", "url": "/posts/hive_src_anotation/", "categories": "Hive", "tags": "Java, Hive", "date": "2018-11-06 00:00:00 +0000", "snippet": "主要流程词法分析，生成AST树，ParseDriver完成。 分析AST树，AST拆分成查询子块，信息记录在QB，这个QB在下面几个阶段都需要用到，SemanticAnalyzer.doPhase1完成。 从metastore中获取表的信息，SemanticAnalyzer.getMetaData完成。 生成逻辑执行计划，SemanticAnalyzer.genPlan完成。 优化逻辑执行计划，Optimizer完成，ParseContext作为上下文信息进行传递。 生成物理执行计划，SemanticAnalyzer.generateTaskTree完成。 物理计划优化，PhysicalOptimizer完成，PhysicalContext作为上下文信息进行传递Parse: 解析sql生成ASTNodeDriver.run()-&gt;Driver.runInternal()--&gt;Driver.compileInternal()--&gt;Driver.compile()--&gt;ParseUtils.parse()--&gt;ParseDriver.parse()--&gt;生成ASTNode//Driver.javaASTNode tree;try { tree = ParseUtils.parse(command, ctx);// 1，parse sql to ASTNode} catch (ParseException e) {}//ParseUtils.java/** Parses the Hive query. */public static ASTNode parse( String command, Context ctx, String viewFullyQualifiedName) throws ParseException { ParseDriver pd = new ParseDriver(); ASTNode tree = pd.parse(command, ctx, viewFullyQualifiedName); tree = findRootNonNullToken(tree); handleSetColRefs(tree); return tree;}ParseDriver.parse代码(省略部分代码)public ASTNode parse(String command, Context ctx, String viewFullyQualifiedName){ HiveLexerX lexer = new HiveLexerX(new ANTLRNoCaseStringStream(command)); TokenRewriteStream tokens = new TokenRewriteStream(lexer); HiveParser parser = new HiveParser(tokens); if (ctx != null) { parser.setHiveConf(ctx.getConf()); } parser.setTreeAdaptor(adaptor); HiveParser.statement_return r = null; try { r = parser.statement(); } catch (RecognitionException e) {} ASTNode tree = (ASTNode) r.getTree(); tree.setUnknownTokenBoundaries(); return tree;}HiveParser的代码太长了，暂且不看抽象语法树(AST)变成一个QB（Query Block）//Driver.javaBaseSemanticAnalyzer sem = SemanticAnalyzerFactory.get(queryState, tree);if (!retrial) { openTransaction(); generateValidTxnList();}sem.analyze(tree, ctx);// 2,BaseSemanticAnalyzer.analyze//BaseSemanticAnalyzer.javapublic void analyze(ASTNode ast, Context ctx) throws SemanticException { initCtx(ctx); init(true); analyzeInternal(ast);}//BaseSemanticAnalyzer.javapublic void init(boolean clearPartsCache) { // clear most members reset(clearPartsCache); // init QB qb = new QB(null, null, false); this.qb = qb;}生成逻辑执行计划(Operator)Operator sinkOp = genOPTree(ast, plannerCtx);Operator genOPTree(ASTNode ast, PlannerContext plannerCtx) throws SemanticException { // fetch all the hints in qb List&lt;ASTNode&gt; hintsList = new ArrayList&lt;&gt;(); getHintsFromQB(qb, hintsList); getQB().getParseInfo().setHintList(hintsList); return genPlan(qb);}public Operator genPlan(QB qb) throws SemanticException { return genPlan(qb, false);}public Operator genPlan(QB qb, boolean skipAmbiguityCheck){...Operator&lt;?&gt; operator = genPlan(qb, qbexpr);...}逻辑执行计划 OptimizerOptimizer optm = new Optimizer();optm.setPctx(pCtx);optm.initialize(conf);pCtx = optm.optimize();Optimizer.initialize()初始化添加各种优化器public void initialize(HiveConf hiveConf) { ... transformations = new ArrayList&lt;Transform&gt;(); transformations.add(new GroupByOptimizer()); transformations.add(new SkewJoinOptimizer()); ...}Optimizer.optimize() 各优化组件优化操作public ParseContext optimize() throws SemanticException { for (Transform t : transformations) { t.beginPerfLogging(); pctx = t.transform(pctx); t.endPerfLogging(t.toString()); } return pctx;}生成物理执行计划// 9. Optimize Physical op tree &amp; Translate to target execution engine (MR,// TEZ..)if (!ctx.getExplainLogical()) { TaskCompiler compiler = TaskCompilerFactory.getCompiler(conf, pCtx); compiler.init(queryState, console, db); compiler.compile(pCtx, rootTasks, inputs, outputs); fetchTask = pCtx.getFetchTask();}这里的TaskCompiler根据引擎不同可以是MR,Tez,Spark,TaskCompilerFactory的实现public static TaskCompiler getCompiler(HiveConf conf, ParseContext parseContext) { if (HiveConf.getVar(conf, HiveConf.ConfVars.HIVE_EXECUTION_ENGINE).equals(\"tez\")) { return new TezCompiler(); } else if (HiveConf.getVar(conf, HiveConf.ConfVars.HIVE_EXECUTION_ENGINE).equals(\"spark\")) { return new SparkCompiler(); } else { return new MapReduceCompiler(); }}TaskCompiler.compile的主要流程optimizeOperatorPlan(pCtx, inputs, outputs); 再次优化op?generateTaskTree(rootTasks, pCtx, mvTask, inputs, outputs);生成物理计划optimizeTaskPlan(rootTasks, pCtx, ctx);优化物理计划执行task//Driver.execute()TaskRunner runner = launchTask(task, queryId, noName, jobname, jobs, driverCxt);" }, { "title": "druid & imply 入门实战", "url": "/posts/druid/", "categories": "Java", "tags": "Java, druid, realtime", "date": "2018-10-25 00:00:00 +0000", "snippet": "安装配置首先安装 zookeeper,并启动tar zxvf zookeeper-3.4.6.tar.gz cd zookeeper-3.4.6cp conf/zoo_sample.cfg conf/zoo.cfg bin/zkServer.sh start安装druidcurl -O http://static.druid.io/artifacts/releases/druid-0.12.3-bin.tar.gztar -xzf druid-0.12.3-bin.tar.gzcd druid-0.12.3启动druid服务nohup java `cat conf-quickstart/druid/historical/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/historical:lib/*\" io.druid.cli.Main server historical &amp;nohup java `cat conf-quickstart/druid/broker/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/broker:lib/*\" io.druid.cli.Main server broker &amp; nohup java `cat conf-quickstart/druid/coordinator/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/coordinator:lib/*\" io.druid.cli.Main server coordinator &amp;nohup java `cat conf-quickstart/druid/overlord/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/overlord:lib/*\" io.druid.cli.Main server overlord &amp;nohup java `cat conf-quickstart/druid/middleManager/jvm.config | xargs` -cp \"conf-quickstart/druid/_common:conf-quickstart/druid/middleManager:lib/*\" io.druid.cli.Main server middleManager &amp;访问web地址： http://127.0.0.1:8090/console.html上传数据cd quickstartcurl -X 'POST' -H 'Content-Type:application/json' -d @examples/wikipedia-index.json http://127.0.0.1:8090/druid/indexer/v1/task{\"task\":\"index_wikipedia_2018-10-25T18:58:30.005Z\"}imply版本安装wget https://static.imply.io/release/imply-2.7.9.tar.gz tar xvf imply-2.7.9.tar imply版本单机启动 nohup bin/supervise -c conf/supervise/quickstart.conf &gt; quickstart.log &amp;imply版本后台http://127.0.0.1:9095imply版本load数据bin/post-index-task --file quickstart/wikipedia-index.json 也可以用原生druid的方式curl -X 'POST' -H 'Content-Type:application/json' -d @wikipedia-index.json http://127.0.0.1:8090/druid/indexer/v1/task登入9095后台可以执行sql操作了" }, { "title": "Flink On Yarn", "url": "/posts/flink_on_yarn/", "categories": "Flink", "tags": "flink, streamsets, realtime", "date": "2018-10-23 00:00:00 +0000", "snippet": "配置环境变量HADOOP_CONF_DIR,将yarn的配置文件解压在此目录export HADOOP_CONF_DIR=/opt/soft/yarn-confstart yarn-session./yarn-session.sh -n 8 -s 8 -jm 1024 -tm 1024 -nm flink –dSubmit a job to YARNwget -O LICENSE-2.0.txt http://www.apache.org/licenses/LICENSE-2.0.txthadoop fs -copyFromLocal LICENSE-2.0.txt /tmp./bin/flink run ./examples/batch/WordCount.jar --input hdfs:///tmp/LICENSE-2.0.txt --output hdfs:///tmp/wordcount-result.txt" }, { "title": "Python Iterator TypeError: object of type 'listiterator' has no len()", "url": "/posts/python_Iterator_Iterable/", "categories": "python", "tags": "python, python", "date": "2018-09-28 00:00:00 +0000", "snippet": "在计算的len的时候碰到TypeError: object of type 'listiterator' has no len()说明这个对象是个iterator，是没有len的，翻了下google普遍的做法是使用len(list(iterator))&gt;&gt;&gt; l1 = [1, 2, 3]&gt;&gt;&gt; it = iter(l1)&gt;&gt;&gt; it&lt;listiterator object at 0x1013089d0&gt;&gt;&gt;&gt; type(it)&lt;type 'listiterator'&gt;&gt;&gt;&gt; l2 = list(it)&gt;&gt;&gt; l2[1, 2, 3]&gt;&gt;&gt; list(it)[]&gt;&gt;&gt; l2[1, 2, 3]&gt;&gt;&gt; l1[1, 2, 3]&gt;&gt;&gt; &gt;&gt;&gt; l1 = [1, 2, 3]&gt;&gt;&gt; it = iter(l1)&gt;&gt;&gt; len(list(it))3&gt;&gt;&gt; list(it)[]注意这个terator：list(it)是不能再用的，也就是重复遍历的话只有第一次有数据的&gt;&gt;&gt; l1 = [1, 2, 3]&gt;&gt;&gt; it = iter(l1)&gt;&gt;&gt; for i in it:... print i... 123&gt;&gt;&gt; for i in it:... print i... &gt;&gt;&gt; for i in l1:... print i... 123&gt;&gt;&gt; for i in l1:... print i... 123&gt;&gt;&gt;" }, { "title": "pyspider爬取并解析网页中table数据的例子", "url": "/posts/pyspider_table/", "categories": "python", "tags": "python, python", "date": "2018-09-25 00:00:00 +0000", "snippet": "主要爬取一些第三方接口参数，字段，说明信息，有很多个下面这种类似的页面，这些都是table数据&lt;table class=\"confluenceTable\"&gt; &lt;colgroup&gt; &lt;col style=\"width: 130.0px;\" /&gt; &lt;col style=\"width: 77.0px;\" /&gt; &lt;col style=\"width: 384.0px;\" /&gt; &lt;/colgroup&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th class=\"confluenceTh\"&gt;参数&lt;/th&gt; &lt;th class=\"confluenceTh\"&gt;是否必填&lt;/th&gt; &lt;th class=\"confluenceTh\"&gt;说明&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=\"confluenceTd\"&gt;appid&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;Y&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;&lt;br /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=\"confluenceTd\"&gt;&lt;span&gt;idNo&lt;/span&gt;&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;Y&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;&lt;span&gt;证件号码&lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=\"confluenceTd\"&gt;&lt;span&gt;name&lt;/span&gt;&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;&lt;span&gt;Y&lt;/span&gt;&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;&lt;span&gt;姓名&lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;span&gt;photoStr&lt;/span&gt;&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;span&gt;Y&lt;/span&gt;&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;span&gt;照片文件&lt;/span&gt;&lt;br /&gt;&lt;span&gt;注意：原始图片不能超过 2M，且必须为 JPG 或 PNG 格式&lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;span&gt;sourcePhotoStr&lt;/span&gt;&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;span&gt;Y&lt;/span&gt;&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;span&gt;合作伙伴自己提供的可信比对源照片&lt;/span&gt;&lt;br /&gt;&lt;span&gt;注意：原始图片不能超过 2M，且必须为 JPG 或 PNG 格式&lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;span&gt;sourcePhotoType&lt;/span&gt;&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;span&gt;Y&lt;/span&gt;&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;span&gt;比对源照片类型&lt;/span&gt;&lt;br /&gt;&lt;span&gt;1：网纹照&lt;/span&gt;&lt;br /&gt;&lt;span&gt;2：高清照&lt;/span&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;transationid&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;Y&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;每次请求唯一的标识（和第三方接口中的orderno对应）&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;原本用pyspider的response应该就可以了，response.doc返回的本来就是PyQuery，于是遍历所有tr,然后遍历tr内的td获取text就好了， 发现 1)有的td内部有span标签的会获取不到数据,2) 有很多td的text本来就是空的，二期也没有表头，不能直接用doc获取整个页面的td计算， 也想过直接用etree,lxml.html 没招了，只好试一试BeautifulSoup详细代码from bs4 import BeautifulSoupfrom lxml.html import etreeimport lxml.htmlfor item in response.doc('.confluenceTable').items(): table_header_dict={} root = lxml.html.fromstring(item.html()) soup = BeautifulSoup(item.html()) for row in soup.findAll(\"tr\"): # 获取tr内的th,得到表头信息 th_cells = row.find_all(\"th\") if len(th_cells)&gt;0 : table_header_dict = self.get_table_header_dict(th_cells) #解析tr内的td,解析表格数据 trs = soup.findAll(\"tr\"); td_dict_data = self.parse_tddata_to_dict(table_header_dict,trs) 获取tr内的th,得到表头信息#获取表头信息def get_table_header_dict(self,th_cells): th_count = len(th_cells) #print th_count th_dict={} index =0 for i in range(th_count): temp = th_cells[i].text if ((temp =='参数')|(temp =='参数名')|(temp =='参数名称')|(temp =='名称')|(temp =='字段')|(temp =='字段名')|(temp='字段名称')): th_dict[i]= 'name' elif ('类型' in temp ): th_dict[i]= 'type' elif ((temp=='说明')|(temp=='备注')|(temp='参数说明')|(temp='字段说明')): th_dict[i]= 'desc' else : th_dict[i]= temp return th_dict#解析tr内的td,解析表格数据def parse_tddata_to_dict(self,table_header_dict,trs): ret_list = [] retuslt = {} for row in trs: # 获取表格内的所有td cells = row.findAll(\"td\") if len(cells)&gt;0 : index = 0 for i in range(len(cells)): #直接通过text得到文本内容 print cells[index].text retuslt[table_header_dict.get(index)] = cells[index].text index = index+1 ret_list.append(retuslt) #print len(ret_list) #print ret_list return ret_list;直接用PyQuery获取不到不知道为啥，for item in response.doc('.confluenceTable').items():for i in range(len(item('td'))): field_name = th_dict[i%len(th_dict)] # print i,th_count,th_dict[i%th_count] #这个 item('td')[i].text很多时候(内部有 &lt;span&gt;&lt;/span&gt;标签)获取不到数据 if item('td')[i] is not None and item('td')[i].text is not None: index = i%len(th_dict); field_name = th_dict[index] if 'name' in field_name or 'type' in field_name or 'desc' in field_name: td_data[field_name]=item('td')[i].text.encode(\"utf-8\") else: print th_dict[i%len(th_dict)] +' no data' if 'name' in field_name or 'type' in field_name or 'desc' in field_name: field_name = th_dict[i%len(th_dict)] td_data[field_name]='null' if i&gt;0 and i%len(th_dict) ==0: print td_data td_data_list.append(td_data) td_data = {} td_data['url'] =url td_data['title'] =title print td_data_list用lxml.html应该也可以的for item in response.doc('.confluenceTable').items(): root = lxml.html.fromstring(item.html()) print \"th header\" header_data = root.xpath('//tr/th//text()') print '=======================' print 'len(header_data):' print len(header_data) print \"td data\" td_data = root.xpath('//tr/td//text()') ''' for row in root.xpath('//tr/td//text()'): print([i for i in row.itertext()]) ''' print 'len(td_data):' print len(td_data) print '======================='最后入库数据，大概是这个样子*************************** 19. row *************************** fid: 3052 furl: http://abc.xyz.com/pages/viewpage.action?pageId=24841569ftitle: 【20180903】腾讯云-照片比对接口对接 - 风控业务需求 - Confluence fname: sourcePhotoType ftype: String fdesc: 比对源照片类型1：网纹照2：高清照*************************** 20. row *************************** fid: 3053 furl: http://abc.xyz.com/pages/viewpage.action?pageId=24841569ftitle: 【20180903】腾讯云-照片比对接口对接 - 风控业务需求 - Confluence fname: sourcePhotoType ftype: String fdesc: 比对源照片类型1：网纹照2：高清照20 rows in set (0.01 sec)获取嵌套table的数据&lt;div class=\"table-wrap\"&gt; &lt;table class=\"wrapped confluenceTable\"&gt; &lt;colgroup&gt; &lt;col /&gt; &lt;col /&gt; &lt;col /&gt; &lt;col /&gt; &lt;/colgroup&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th class=\"confluenceTh\"&gt;序号&lt;/th&gt; &lt;th class=\"confluenceTh\"&gt;服务&lt;/th&gt; &lt;th class=\"confluenceTh\"&gt;说明&lt;/th&gt; &lt;th colspan=\"1\" class=\"confluenceTh\"&gt;服务类型&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=\"confluenceTd\"&gt;01&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;查询接口&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;征信中心封装查询接口给前端请求同盾H5链接&lt;/td&gt; &lt;td rowspan=\"2\" class=\"confluenceTd\"&gt;查询接口&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=\"confluenceTd\"&gt;02&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;查询接口&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;征信中心将拿到的H5链接返回给前端&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=\"confluenceTd\"&gt;03&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;接收同盾登陆成功的回调&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;&lt;br /&gt;&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;回调接口&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;04&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;接收同盾抓取原始数据成功的回调&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;回调接口&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;05&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;请求数据&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;主动请求同盾的接口获取数据&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;br /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;06&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;数据逻辑&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;落mongo&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;br /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;07&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;查询接口&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;封装查询接口供请求方获取taskid&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;查询接口&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;08&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;查询接口&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;span&gt;封装查询接口供请求方获取运营商数据或中间状态&lt;/span&gt;&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;br /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt;&lt;div class=\"table-wrap\"&gt; &lt;table class=\"wrapped confluenceTable\"&gt; &lt;colgroup&gt; &lt;col style=\"width: 94.0px;\" /&gt; &lt;col style=\"width: 77.0px;\" /&gt; &lt;col style=\"width: 119.0px;\" /&gt; &lt;/colgroup&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class=\"highlight-grey confluenceTd\" data-highlight-colour=\"grey\"&gt;&lt;p&gt;参数&lt;/p&gt;&lt;/td&gt; &lt;td class=\"highlight-grey confluenceTd\" colspan=\"1\" data-highlight-colour=\"grey\"&gt;是否必传&lt;/td&gt; &lt;td class=\"highlight-grey confluenceTd\" data-highlight-colour=\"grey\"&gt;&lt;p&gt;含义&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=\"confluenceTd\"&gt;&lt;p&gt;appid&lt;/p&gt;&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;span&gt;Y&lt;/span&gt;&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;&lt;p&gt;业务线Spuid&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=\"confluenceTd\"&gt;&lt;p&gt;taskId&lt;/p&gt;&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;span&gt;Y&lt;/span&gt;&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;&lt;p&gt;任务id&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;span&gt;transationId&lt;/span&gt;&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;span&gt;Y&lt;/span&gt;&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;&lt;p&gt;请求的唯一标识&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt;&lt;h3 class=\"auto-cursor-target\" id=\"id-【20180830】同盾运营商数据对接-回调通知\"&gt;回调通知&lt;/h3&gt;&lt;p&gt;我们可以截取用户提交成功、原始报告获取结果（成功、失败、超时），魔方报告（成功、失败）。&lt;/p&gt;&lt;div class=\"table-wrap\"&gt; &lt;table class=\"confluenceTable\"&gt; &lt;colgroup&gt; &lt;col /&gt; &lt;col /&gt; &lt;col /&gt; &lt;/colgroup&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th class=\"confluenceTh\"&gt;字段名称&lt;/th&gt; &lt;th colspan=\"1\" class=\"confluenceTh\"&gt;&lt;span style=\"color: rgb(51,51,51);text-decoration: none;\"&gt;类型&lt;/span&gt;&lt;/th&gt; &lt;th class=\"confluenceTh\"&gt;&lt;span style=\"color: rgb(51,51,51);text-decoration: none;\"&gt;字段说明&lt;/span&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=\"confluenceTd\"&gt;notify_event&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;String&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;通知事件&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=\"confluenceTd\"&gt;notify_type&lt;/td&gt; &lt;td colspan=\"1\" class=\"confluenceTd\"&gt;String&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;&lt;p class=\"auto-cursor-target\"&gt;通知类型&lt;/p&gt; &lt;div class=\"table-wrap\"&gt; &lt;table class=\"confluenceTable\"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th class=\"confluenceTh\"&gt;参数&lt;/th&gt; &lt;th class=\"confluenceTh\"&gt;说明&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=\"confluenceTd\"&gt;ACQUIRE&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;任务创建 CREATED、任务成功 SUCCESS、任务失败 FAILURE、&lt;br /&gt;任务超时 TIMEOUT&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=\"confluenceTd\"&gt;REPORT&lt;/td&gt; &lt;td class=\"confluenceTd\"&gt;生成成功 SUCCESS、生成失败 FAILURE&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt; 这里第一个表不是规整的表，第二行少一列，只有三个td标签可以看到有个td里还包含一个table,结构都差不多，直接用find_all()不管是table,tr还是td都会有问题可以通过parent的parent来判断：内嵌的parent.parent应该是td标签tables = b4s_body.find_all('table')for table in tables: print table print table.parent.parent.name =='td'遍历tr，td,还需要校验下th,td的长度(注意查找的时候设置参数recursive=False，不查找内部的嵌套tr,td))。最后问题是如果没有th,或者th长度有问题。。。b4s_body = BeautifulSoup(response.doc.html())tables = b4s_body.find_all('table')for table in tables: #print table if table.parent.parent.name =='td': print 'skip table: ' print table continue table_childrens = table.children for table_children in table_childrens: is_tbody = table_children.name =='tbody' if is_tbody: trs = table_children.children for tr in trs: ths = tr.find_all('th',recursive=False) tds = tr.find_all('td',recursive=False) if len(ths)&gt;0: print 'len(ths)' print len(ths) elif len(tds)&gt;0: print 'len(tds)' print len(tds) else: print 'no trs tds' else: print 'no tbody:' print table_children最终的code@config(priority=2)def detail_page(self, response): # url,title,name,type,desc url = response.url title = response.doc.find('title').eq(0).text() #print type(response.doc) #print response.etree #print response.doc('table') header_array=[] last_sql_data_list = [] body = lxml.html.fromstring(response.doc('body').html()) b4s_body = BeautifulSoup(response.doc.html()) #print b4s_body #tbs = b4s_body.find_all(\"table\", recursive=False) #print len(tbs) tables = b4s_body.find_all('table') last_sql_data_list = [] for table in tables: #print table if table.parent.parent.name =='td': print 'skip table: ' print table continue tb_thead = table.find('thead') th_dict ={} if tb_thead is not None: print 'tb_thead is not None' th_trs = tb_thead.children th_dict = self.get_header_dict(th_trs) else: print 'has no tag thead: ',table table_childrens = table.children for table_children in table_childrens: has_tbody = table_children.name =='tbody' #has_thread = table_children.name =='thead' if has_tbody : trs = table_children.children print 'start:',table_children.name print table_children print 'len(th_dict)',len(th_dict) if len(th_dict)&lt;=0: print 'find' th_dict = self.get_header_dict(trs) #重新获取下trs trs = table_children.children td_dict_data_list = self.get_table_td_dict(trs,th_dict) print type(td_dict_data_list) sql_list_data=self.generate_sql_list_data(td_dict_data_list,url,title) print sql_list_data last_sql_data_list = last_sql_data_list + sql_list_data else: print 'no tbody:' print table_children print 'last_sql_data_list#####' print last_sql_data_list return last_sql_data_list; '''1,从th中提取出2,如果没有th，则提取class_='highlight-grey confluenceTd'3,1,2没有，则从普通td中的第一行提取'''def get_header_dict(self,trs): th_dict = {} th_dict_org = {} for tr in trs: th_count = 0 print 'get_header_dict: ',tr ths = tr.find_all('th',recursive=False) for th in ths: print th th_count = len(list(ths)) print th_count if th_count&lt;=0: ths = tr.find_all('td',class_='highlight-grey confluenceTd',recursive=False) th_count = len(list(ths)) print 'find highlight-grey confluenceTd: ',th_count if th_count&lt;=0: tds = tr.find_all('td',recursive=False) name = tds[0].text print 'name;:::::::::: ',name,len(tds) if name is not None and tds[0].text=='参数名': for i in range(len(tds)): temp = tds[i].text if ((temp =='参数')|(temp =='参数名')|(temp =='参数名称')|(temp =='名称')|(temp =='字段')|(temp =='字段名')|(temp=='字段名称')|(temp=='Field')): if ('name' in th_dict.values()): th_dict[i]= temp else: th_dict[i]= 'name' elif (('类型' ==temp)|(temp=='字段格式')|(temp=='参数类型')|(temp=='字段类型')|(temp=='Type')): if ('type' in th_dict.values()): th_dict[i]= temp else: th_dict[i]= 'type' elif ((temp=='中文含义')|(temp=='含义')|(temp=='说明')|(temp=='备注')|(temp=='参数说明')|(temp=='字段说明')|(temp=='描述')|(temp=='字段描述')|(temp=='Comment')): if ('desc' in th_dict.values()): th_dict[i]= temp else: th_dict[i]= 'desc' else : th_dict[i]= temp print \"from td, th_dict: \"+json.dumps(th_dict, encoding=\"UTF-8\", ensure_ascii=False) return th_dict if th_count &gt;0: for i in range(th_count): print i temp = ths[i].text th_dict_org[i] = temp print 'temp###### ',temp if ((temp =='参数')|(temp =='参数名')|(temp =='参数名称')|(temp =='名称')|(temp =='字段')|(temp =='字段名')|(temp=='字段名称')|(temp=='Field')): if ('name' in th_dict.values()): th_dict[i]= temp else: th_dict[i]= 'name' elif (('类型' ==temp)|(temp=='字段格式')|(temp=='参数类型')|(temp=='字段类型')|(temp=='Type')): if ('type' in th_dict.values()): th_dict[i]= temp else: th_dict[i]= 'type' elif ((temp=='中文含义')|(temp=='含义')|(temp=='说明')|(temp=='备注')|(temp=='参数说明')|(temp=='字段说明')|(temp=='描述')|(temp=='字段描述')|(temp=='Comment')): if ('desc' in th_dict.values()): th_dict[i]= temp else: th_dict[i]= 'desc' else : th_dict[i]= temp if th_count &lt;=0: print 'no th_dict' print 'skip this tr',tr if th_count&gt;0: break; print \"th_dict: \"+json.dumps(th_dict, encoding=\"UTF-8\", ensure_ascii=False) print \"th_dict_org: \"+json.dumps(th_dict_org, encoding=\"UTF-8\", ensure_ascii=False) return th_dict;def get_table_td_dict(self,trs,th_dict): th_count = len(th_dict) td_dict_list = [] for tr in trs: result = {} tds = tr.find_all('td',recursive=False) tr_children = tr.children td_count = len(tds) tr_children_count = len(list(tr_children)) #比较下表头的长度作为校验 if th_count &lt;=0 or td_count !=th_count: print 'skip a tr',th_count,td_count print tr continue else: #print tr for i in range(td_count): td_text = tds[i].text result[th_dict.get(i)] = td_text if td_text is None: print 'tds[i]: ',tds[i] result[th_dict.get(i)] = 'null' td_dict_list.append(result) print \"result: \"+json.dumps(result, encoding=\"UTF-8\", ensure_ascii=False) print len(td_dict_list) return td_dict_listdef generate_sql_list_data(self,td_dict_data,url,title): resultlist = [] for td_data_item in td_dict_data: templist= [] #print len(td_data_item) templist.append(url) templist.append(title) fname = td_data_item.get('name') if fname is None : print \"skip generate_sql_list_data: \"+ json.dumps(td_data_item, encoding=\"UTF-8\", ensure_ascii=False) continue templist.append(fname) ftype = td_data_item.get('type') if ftype is None : templist.append(\"null\") else: templist.append(ftype) fdesc = td_data_item.get('desc') if fdesc is None : templist.append(\"null\") else: templist.append(fdesc) #print len(templist) print 'llllllllllllllll' print '\\n'.join(templist) resultlist.append(templist) #print \"resultlist: \" #print len(resultlist) #print resultlist return resultlist def on_result(self,result): self.mysqlStore.insert(result)\t" }, { "title": "pyspider爬取豆瓣电影", "url": "/posts/pyspider_douban/", "categories": "python", "tags": "python, python", "date": "2018-09-19 00:00:00 +0000", "snippet": "安装略pip install pyspider使用mysql替换SQLite$ cat mysql.json { \"taskdb\": \"mysql+taskdb://canal:canal@172.28.3.159:3306/pyspider\", \"projectdb\": \"mysql+projectdb://canal:canal@172.28.3.159:3306/pyspider\", \"resultdb\": \"mysql+resultdb://canal:canal@172.28.3.159:3306/pyspider\", \"message_queue\": \"redis://:test123@172.28.3.158:6379/0\", \"webui\": { \"username\": \"admin\", \"password\": \"admin\", \"need-auth\": true }, \"scheduler\" : { \"xmlrpc-host\": \"0.0.0.0\", \"delete-time\": 3600 }}启动时指定文件pyspider --config mysql.json爬取豆瓣电影分享一个爬取豆瓣电影存入mysql库的例子，需要先建好表 CREATE TABLE `movies` ( `url` varchar(256) NOT NULL, `title` varchar(128) DEFAULT NULL, `score` float(4,1) DEFAULT NULL, `commenter_counts` int(11) DEFAULT NULL, `tags` varchar(512) DEFAULT NULL, `actors` varchar(512) DEFAULT NULL, `related_info` text, `img` text) ENGINE=InnoDB DEFAULT CHARSET=utf8然后按照官网的样式写python代码就好了#!/usr/bin/env python# -*- encoding: utf-8 -*-# Created on 2018-09-19 11:04:50# Project: donbanjsfrom pyspider.libs.base_handler import *import sysimport pymysqlreload(sys)#asii 乱码问题sys.setdefaultencoding('utf-8')class MysqlStore(object): def insert(self,result): if result: db = pymysql.connect(host='172.28.3.159', port=3306,user='canal', passwd='canal', db='pyspider', charset='utf8') cursor = db.cursor() sql = \"INSERT INTO movies(url,title,score,commenter_counts,tags,actors,related_info,img) VALUES (%s,%s,%s,%s,%s,%s,%s,%s)\" try: print sql print result cursor.executemany(sql,result) db.commit() except Exception as e: # 如果发生错误则回滚 print 'error' print e db.rollback() # 关闭游标 finally: cursor.close() # 关闭数据库连接 db.close() class Handler(BaseHandler): crawl_config = { } headers = { 'User-Agent': r'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.90 Safari/537.36 2345Explorer/9.3.2.17331', 'Referer': 'https://movie.douban.com', 'Connection': 'keep-alive' } def __init__(self): self.mysqlStore=MysqlStore() @every(minutes=24 * 60) def on_start(self): self.crawl('https://movie.douban.com/tag/#/', callback=self.index_page,headers=self.headers,timeout=180,fetch_type='js',js_script=''' function(){ window.scrollTo(0,document.body.scrollHeight); } ''') @config(age=10 * 24 * 60 * 60) def index_page(self, response): print 'aaaaa' for each in response.doc('li &gt; span').items(): print each if '全部' not in each.text(): for i in range(50): tag='https://movie.douban.com/j/new_search_subjects?sort=T&amp;range=0,10&amp;tags='+each.text()+'&amp;start='+str(20*i) self.crawl(tag, callback=self.list_page,headers=self.headers,timeout=180) def list_page(self, response): for i in range(20): List=response.json['data'][i]['url'] self.crawl(List,callback=self.detail_page) @config(priority=2) def detail_page(self, response): print '###### ' +response.url url = response.url title = response.doc('h1 &gt; span').text() score = response.doc('.rating_num').text() commenter_counts = response.doc('.rating_sum span').text(), tags = response.doc('.tags-body &gt; a').text() actors = response.doc('.actor a').text() related_info = response.doc('.related-info &gt; .indent').text() img = response.doc('#mainpic img').attr('src') ''' return { \"url\": response.url, \"title\": response.doc('h1 &gt; span').text(), \"score\":response.doc('.rating_num').text(), \"commenter_counts\":response.doc('.rating_sum span').text(), \"tags\":response.doc('.tags-body &gt; a').text(), \"actors\":response.doc('.actor a').text(), \"related_info\":response.doc('.related-info &gt; .indent').text(), \"img\":response.doc('#mainpic img').attr('src') } ''' return [(url,title,score,commenter_counts,tags,actors,related_info,img)] def on_result(self,result): print result self.mysqlStore.insert(result) #super(Handler,self).on_result(result)" }, { "title": "Streamsets 源码流程梳理", "url": "/posts/streamsets/", "categories": "Java", "tags": "Java, streamsets, realtime", "date": "2018-08-31 00:00:00 +0000", "snippet": "启动入口,模块bootstrapBootstrapMain.javamain，模块containerDataCollectorMain.java继承自Main.java,模块container-commonApi接口创建pipelinePipelineStoreResource.javahttp://127.0.0.1:18630/rest/v1/pipeline/test2?autoGeneratePipelineId=true&amp;description=ccccc启动pipelineManagerResource.javahttp://127.0.0.1:18630/rest/v1/pipelines/startStandaloneRunner.javaManagerResource.start()--&gt; runner.start()(Runner runner = manager.getRunner(pipelineId, rev))--&gt;StandaloneRunner.start()stack2018-01-03 01:02:21,988 [user:*admin] [pipeline:test/test19628fc5-95de-42cd-ba29-f55760e1d256] [runner:] [thread:ProductionPipelineRunnable-test19628fc5-95de-42cd-ba29-f55760e1d256-test] ERROR MysqlSource - Error connecting to MySql binlog: BinaryLogClient was unable to connect in 5000msjava.util.concurrent.TimeoutException: BinaryLogClient was unable to connect in 5000ms at com.github.shyiko.mysql.binlog.BinaryLogClient.connect(BinaryLogClient.java:644) at com.streamsets.pipeline.stage.origin.mysql.MysqlSource.init(MysqlSource.java:103) at com.streamsets.pipeline.api.base.BaseStage.init(BaseStage.java:52) at com.streamsets.datacollector.runner.StageRuntime.init(StageRuntime.java:156) at com.streamsets.datacollector.runner.StagePipe.init(StagePipe.java:105) at com.streamsets.datacollector.runner.StagePipe.init(StagePipe.java:53) at com.streamsets.datacollector.runner.Pipeline.initPipe(Pipeline.java:299) at com.streamsets.datacollector.runner.Pipeline.init(Pipeline.java:214) at com.streamsets.datacollector.execution.runner.common.ProductionPipeline.run(ProductionPipeline.java:96) at com.streamsets.datacollector.execution.runner.common.ProductionPipelineRunnable.run(ProductionPipelineRunnable.java:79) at com.streamsets.datacollector.execution.runner.standalone.StandaloneRunner.start(StandaloneRunner.java:668) at com.streamsets.datacollector.execution.runner.common.AsyncRunner.lambda$start$3(AsyncRunner.java:149) at com.streamsets.datacollector.execution.runner.common.AsyncRunner$$Lambda$30/1593004381.call(Unknown Source) at com.streamsets.pipeline.lib.executor.SafeScheduledExecutorService$SafeCallable.call(SafeScheduledExecutorService.java:233) at java.util.concurrent.FutureTask.run(FutureTask.java:266)ProductionPipelineRunner.run() try { if (originPipe.getStage().getStage() instanceof PushSource) { runPushSource(); } else { runPollSource(); } } catch (Throwable throwable) {}//runPushSource originPipe.process(offsetTracker.getOffsets(), batchSize, this);//SourcePipe.process getStage().execute(offsets, batchSize);ProductionPipelineRunner.run()—&gt;ProductionPipelineRunner.processPipe()—&gt;StagePipe.process()—&gt;StageRuntime.execute public void execute(final Map&lt;String, String&gt; offsets, final int batchSize) throws StageException { Callable&lt;String&gt; callable = () -&gt; { switch (getDefinition().getType()) { case SOURCE: if(getStage() instanceof PushSource) { ((PushSource)getStage()).produce(offsets, batchSize); return null; } // fall through default: throw new IllegalStateException(Utils.format(\"Unknown stage type: '{}'\", getDefinition().getType())); } }; execute(callable, null, null); } public String execute( final String previousOffset, final int batchSize, final Batch batch, final BatchMaker batchMaker, ErrorSink errorSink, EventSink eventSink ) throws StageException { Callable&lt;String&gt; callable = new Callable&lt;String&gt;() { @Override public String call() throws Exception { String newOffset = null; switch (getDefinition().getType()) { case SOURCE: { newOffset = ((Source) getStage()).produce(previousOffset, batchSize, batchMaker); break; } case PROCESSOR: { ((Processor) getStage()).process(batch, batchMaker); break; } case EXECUTOR: case TARGET: { ((Target) getStage()).write(batch); break; } default: { throw new IllegalStateException(Utils.format(\"Unknown stage type: '{}'\", getDefinition().getType())); } } return newOffset; } }; return execute(callable, errorSink, eventSink); }target为例，这里可以是kudu,jdbc等KuduTarget public void write(final Batch batch) throws StageException { try { if (!batch.getRecords().hasNext()) { // No records - take the opportunity to clean up the cache so that we don't hold on to memory indefinitely cacheCleaner.periodicCleanUp(); } writeBatch(batch); } catch (Exception e) { throw throwStageException(e); } }JdbcTarget public void write(Batch batch) throws StageException { if (!batch.getRecords().hasNext()) { // No records - take the opportunity to clean up the cache so that we don't hold on to memory indefinitely cacheCleaner.periodicCleanUp(); } // jdbc target always commit batch execution final boolean perRecord = false; JdbcUtil.write(batch, schema, tableNameEval, tableNameVars, tableNameTemplate, caseSensitive, recordWriters, errorRecordHandler, perRecord); }" }, { "title": "使用Spring Cloud Sleuth、Zipkin、Kafka、Mysql实现分布式追踪", "url": "/posts/distributed-tracing/", "categories": "Java", "tags": "Java, streamsets, realtime", "date": "2018-08-30 00:00:00 +0000", "snippet": "tracing-zipkin-server zipkin-server 实现package com.tpc.zipkinserver;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.sleuth.zipkin.stream.EnableZipkinStreamServer;@SpringBootApplication@EnableZipkinStreamServerpublic class ZipkinServerApplication {\tpublic static void main(String[] args) {\t\tSpringApplication.run(ZipkinServerApplication.class, args);\t}} 想看表结构，所以后端存储这里用的mysqlzipkin.storage.type: mysql kafka配置spring.cloud.stream.kafka.binder.brokers: 1172.28.3.159:9092,172.28.3.158:9092spring.cloud.stream.kafka.binder.zkNodes: 172.28.3.169:2181/kafkaroot完整的配置文件spring.application.name: tracing-zipkin-serverspring.cloud.stream.kafka.binder.brokers: 1172.28.3.159:9092,172.28.3.158:9092spring.cloud.stream.kafka.binder.zkNodes: 172.28.3.169:2181/kafkarootspring.sleuth.enabled: falsezipkin.storage.type: mysqlspring.datasource.schema[0]: classpath:/mysql.sqlspring.datasource.url: jdbc:mysql://172.28.3.159:3306/zipkin?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=falsespring.datasource.username: canalspring.datasource.password: canalspring.datasource.driver-class-name: com.mysql.jdbc.Driverspring.datasource.initialize: true服务提供者provider与消费者consumer需要引入配置spring.sleuth.sampler.percentage: 1.0spring.cloud.stream.kafka.binder.brokers: 1172.28.3.159:9092,172.28.3.158:9092spring.cloud.stream.kafka.binder.zkNodes: 172.28.3.169:2181/kafkarootgithub-distributed-tracing" }, { "title": "recover table structure from .frm files with MySQL Utilities", "url": "/posts/mysql_recover_only_from_frm/", "categories": "MySQL", "tags": "mysql, MySQL Utilities", "date": "2018-07-30 00:00:00 +0000", "snippet": "数据崩溃了，仅剩下.frm文件安装python ./setup.py buildpython ./setup.py install恢复表结构 mysqlfrm --diagnostic /var/lib/mysql/afsbak/y004_f_import_info.frm MySQL Utilities-Download How to Install MySQL Utilities" }, { "title": "otter支持钉钉短信等报警", "url": "/posts/otter_alarm/", "categories": "MySQL", "tags": "otter, binlog", "date": "2018-07-11 00:00:00 +0000", "snippet": "目前只支持邮件报警，发送邮件的代码在DefaultAlarmService里边public void doSend(AlarmMessage data) throws Exception { SimpleMailMessage mail = new SimpleMailMessage(); // 只发送纯文本 mail.setFrom(username); mail.setSubject(TITLE);// 主题 mail.setText(data.getMessage());// 邮件内容 String receiveKeys[] = StringUtils.split(StringUtils.replace(data.getReceiveKey(), \";\", \",\"), \",\"); SystemParameter systemParameter = systemParameterService.find(); List&lt;String&gt; mailAddress = new ArrayList&lt;String&gt;(); for (String receiveKey : receiveKeys) { String receiver = convertToReceiver(systemParameter, receiveKey); String strs[] = StringUtils.split(StringUtils.replace(receiver, \";\", \",\"), \",\"); for (String str : strs) { if (isMail(str)) { if (str != null) { mailAddress.add(str); } } else if (isSms(str)) { // do nothing } } } if (!mailAddress.isEmpty()) { mail.setTo(mailAddress.toArray(new String[mailAddress.size()])); doSendMail(mail); }}首先会从报警规则里的receiveKey，获取receiver，这个receiver应该是按”;”分割的，这里先替换“;”为“,”，然后按照”,”分割所以只要增加钉钉，手机号码的代码就好了public void doSend(AlarmMessage data) throws Exception { SimpleMailMessage mail = new SimpleMailMessage(); // 只发送纯文本 mail.setFrom(username); mail.setSubject(TITLE);// 主题 mail.setText(data.getMessage());// 邮件内容 String receiveKeys[] = StringUtils.split(StringUtils.replace(data.getReceiveKey(), \";\", \",\"), \",\"); SystemParameter systemParameter = systemParameterService.find(); List&lt;String&gt; mailAddress = new ArrayList&lt;String&gt;(); for (String receiveKey : receiveKeys) { String receiver = convertToReceiver(systemParameter, receiveKey); String strs[] = StringUtils.split(StringUtils.replace(receiver, \";\", \",\"), \",\"); for (String str : strs) { if (isMail(str)) { if (str != null) { mailAddress.add(str); } } else if (isSms(str)) { // do nothing } } } if (!mailAddress.isEmpty()) { mail.setTo(mailAddress.toArray(new String[mailAddress.size()])); doSendMail(mail); } doSendDDmsg(String.format(\"from otter alarm msg: %s\",data.getMessage()));}坑！坑！坑！更新完之后出现Caused by: javax.mail.MessagingException: Could not connect to SMTP host: smtp.exmail.qq.com, port: 25\tat com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:1961) ~[mail-1.4.7.jar:1.4.7]\tat com.sun.mail.smtp.SMTPTransport.protocolConnect(SMTPTransport.java:654) ~[mail-1.4.7.jar:1.4.7]\tat javax.mail.Service.connect(Service.java:295) ~[mail-1.4.7.jar:1.4.7]\tat org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSenderImpl.java:389) ~[spring-context-support-3.1.2.RELEASE.jar:3.1.2.RELEASE]\t... 12 common frames omittedCaused by: javax.net.ssl.SSLException: Unrecognized SSL message, plaintext connection?\tat sun.security.ssl.InputRecord.handleUnknownRecord(InputRecord.java:710) ~[na:1.8.0_111]\tat sun.security.ssl.InputRecord.read(InputRecord.java:527) ~[na:1.8.0_111]\tat sun.security.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:973) ~[na:1.8.0_111]\tat sun.security.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1375) ~[na:1.8.0_111]\tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1403) ~[na:1.8.0_111]\tat sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1387) ~[na:1.8.0_111]\tat com.sun.mail.util.SocketFetcher.configureSSLSocket(SocketFetcher.java:549) ~[mail-1.4.7.jar:1.4.7]\tat com.sun.mail.util.SocketFetcher.createSocket(SocketFetcher.java:354) ~[mail-1.4.7.jar:1.4.7]\tat com.sun.mail.util.SocketFetcher.getSocket(SocketFetcher.java:211) ~[mail-1.4.7.jar:1.4.7]\tat com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:1927) ~[mail-1.4.7.jar:1.4.7]按理没啥改动，就增加了http的jar包$ ls lib/httpc*lib/httpclient-4.5.2.jar lib/httpcore-4.4.4.jarmanager.biz这个包复原回去又能调用，最后看了下腾讯企业邮箱的ssl端口应该是465，换了端口好了otter.manager.monitor.email.host = smtp.exmail.qq.comotter.manager.monitor.email.stmp.port = 465期间还试过不改端口25，就是不使用ssl,去掉socketFactory的配置也ok&lt;bean id=\"mailSender\" class=\"org.springframework.mail.javamail.JavaMailSenderImpl\"&gt; &lt;property name=\"host\" value=\"${otter.manager.monitor.email.host}\" /&gt; &lt;property name=\"username\" value=\"${otter.manager.monitor.email.username}\" /&gt; &lt;property name=\"password\" value=\"${otter.manager.monitor.email.password}\" /&gt; &lt;property name=\"defaultEncoding\" value=\"UTF-8\" /&gt; &lt;property name=\"javaMailProperties\"&gt; &lt;props&gt; &lt;prop key=\"mail.smtp.auth\"&gt;true&lt;/prop&gt; &lt;prop key=\"mail.smtp.timeout\"&gt;25000&lt;/prop&gt; &lt;prop key=\"mail.smtp.port\"&gt;${otter.manager.monitor.email.stmp.port:465}&lt;/prop&gt; &lt;!-- &lt;prop key=\"mail.smtp.socketFactory.port\"&gt;${otter.manager.monitor.email.stmp.port:465}&lt;/prop&gt; &lt;prop key=\"mail.smtp.socketFactory.fallback\"&gt;false&lt;/prop&gt; &lt;prop key=\"mail.smtp.socketFactory.class\"&gt;javax.net.ssl.SSLSocketFactory&lt;/prop&gt; --&gt; &lt;prop key=\"mail.smtp.starttls.enable\"&gt;${otter.manager.monitor.mail.smtp.starttls.enable}&lt;/prop&gt; &lt;prop key=\"mail.smtp.ssl.enable\"&gt;${otter.manager.monitor.mail.smtp.ssl.enable}&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt;&lt;/bean&gt;虽然看起来是端口问题，但是不确定为何在没有引入httpclient后可以使用25端口正常发送邮件注意钉钉自定义机器人的消息长度貌似有限制，官网说是content最大长度5000，实际测试貌似是20000String ddMsg = msg.substring(0,20001);" }, { "title": "otter支持kafka作为数据源", "url": "/posts/otter/", "categories": "MySQL", "tags": "otter, binlog", "date": "2018-03-20 00:00:00 +0000", "snippet": "三种模式前端修改给canal增加参数，也就是修改canalparamter.List&lt;List&lt;DataSourcing&gt;&gt; groupDbAddresses = canal.getCanalParameter().getGroupDbAddresses();if(canal.getCanalParameter().getSourcingType().isKafka()){ String topicList = canal.getCanalParameter().getKafkaTopicList(); DataSourcing dataSourcing = groupDbAddresses.get(0).get(0); String host = dataSourcing.getDbAddress().getHostString(); int port = dataSourcing.getDbAddress().getPort();}切记看下是不是没修改form.xml，不然提交没法验证来着。获取不到表单的数据\t\t\t&lt;field name=\"localBinlogDirectory\"\t\t\t\tdisplayName=\"本地localBinlog目录\"&gt;\t\t\t\t&lt;fm-validators:if test=\"sourcingType.value == 'LOCALBINLOG'\"&gt;\t\t\t\t\t&lt;fm-validators:required-validator&gt;\t\t\t\t\t\t&lt;message&gt;数据源为LOCALBINLOG时必须填写${displayName}&lt;/message&gt;\t\t\t\t\t&lt;/fm-validators:required-validator&gt;\t\t\t\t&lt;/fm-validators:if&gt;\t\t\t&lt;/field&gt;\t\t\t&lt;field name=\"kafkaTopicList\"\t\t\t\tdisplayName=\"kafka的topic列表\"&gt;\t\t\t\t&lt;fm-validators:if test=\"sourcingType.value == 'KAFKA'\"&gt;\t\t\t\t\t&lt;fm-validators:required-validator&gt;\t\t\t\t\t\t&lt;message&gt;数据源为KAFKA时必须填写${displayName}&lt;/message&gt;\t\t\t\t\t&lt;/fm-validators:required-validator&gt;\t\t\t\t&lt;/fm-validators:if&gt;\t\t\t&lt;/field&gt;\t\t\t&lt;field name=\"positions\" displayName=\"位点信息\"&gt;\t\t\t\t&lt;fm-validators:regexp-validator pattern=\"^(\\{.*\\}\\;)+$\"&gt;\t\t\t\t\t&lt;message&gt;${displayName} 不符合格式（{\"journalName\":\"\",\"position\":0,\"timestamp\":0};）&lt;/message&gt;\t\t\t\t&lt;/fm-validators:regexp-validator&gt;\t\t\t&lt;/field&gt;" }, { "title": "ML/DL/AI/NLP自然语言处理资源集合", "url": "/posts/NLPAgg/", "categories": "Datascience", "tags": "ML, Datascience", "date": "2016-10-12 00:00:00 +0000", "snippet": " TensorFlow练习7: 基于RNN生成古诗词 用TensorFlow生成周杰伦歌词 使用深度学习进行中文自然语言处理之序列标注 《深度学习框架Keras使用》by 小润 知乎地址 (https://zhuanlan.zhihu.com/p/22953023)，github地址 如何用 word2vec 计算两个句子之间的相似度？ 《How to Generate a Good Word Embedding?》导读 " }, { "title": "fnlp初试", "url": "/posts/fnlp/", "categories": "NLP", "tags": "nlp, Datascience", "date": "2016-10-11 00:00:00 +0000", "snippet": "安装需要注意的是，去先Releases下载三个文件放入源码目录内的”models”文件夹里，其中 seg.m 分词模型 pos.m 词性标注模型 dep.m 依存句法分析模型 git clone https://github.com/xpqiu/fnlp.git cd fnlp/ mvn install -Dmaven.test.skip=true mvn dependency:copy-dependencies -DoutputDirectory=libs其中最后边这条是命令行调用需要的命令行调用中文分词fnlp]# java -Xmx1024m -Dfile.encoding=UTF-8 -classpath \"fnlp-core/target/fnlp-core-2.1-SNAPSHOT.jar:libs/trove4j-3.0.3.jar:libs/commons-cli-1.2.jar\" org.fnlp.nlp.cn.tag.CWSTagger -s models/seg.m \"自然语言是人类 交流和思维的主要工具，是人类智慧的结晶。\"自然 语言 是 人类 交流 和 思维 的 主要 工具 ， 是 人类 智慧 的 结晶 。中文词性标注fnlp]# java -Xmx1024m -Dfile.encoding=UTF-8 -classpath \"fnlp-core/target/fnlp-core-2.1-SNAPSHOT.jar:libs/trove4j-3.0.3.jar:libs/commons-cli-1.2.jar\" org.fnlp.nlp.cn.tag.POSTagger -s models/seg.m models/pos.m \"周杰伦出生于台湾，生日为79年1月18日，他曾经的绯闻女友是蔡依林。\"周杰伦/人名 出生/动词 于/介词 台湾/地名 ，/动词 生日/名词 为/介词 79年/时间短语 1月/时间短语 18日/时间短语 ，/标点 他/人称代词 曾经/形容词 的/结构助词 绯闻/名词 女友/名词 是/动词 蔡依林/人名 。/标点实体名标注java -Xmx1024m -Dfile.encoding=UTF-8 -classpath \"fnlp-core/target/fnlp-core-2.1-SNAPSHOT.jar:libs/trove4j-3.0.3.jar:libs/commons-cli-1.2.jar\" org.fnlp.nlp.cn.tag.NERTagger -s models/seg.m models/pos.m \"詹姆斯·默多克和丽贝卡·布鲁克斯 鲁珀特·默多克旗下的美国小报《纽约邮报》的职员被公司律师告知，保存任何也许与电话窃听及贿赂有关的文件。\"{美国=地名, 纽约=地名, 詹姆斯·默多克=人名, 鲁珀特·默多克=人名, 丽贝卡·布鲁克斯=人名}HanLPNLPIRBosonNLPhttp://bosonnlp.com/demo" }, { "title": "Elasticsearch 搜索过程代码整理", "url": "/posts/LR/", "categories": "distributed", "tags": "distributed, Search, Elasticsearch", "date": "2016-09-17 00:00:00 +0000", "snippet": "前面的处理跟索引阶段差不多，对照参考elasticsearch-1.3.0 之索引代码粗略梳理先来个term的query{\"query\":{\"term\":{\"content\":\"a\"}}}下面multi_match的Query{ \"query\": { \"multi_match\": { \"query\" : \"我的宝马多少马力\", \"fields\" : [\"title\", \"content\"] } }}Query query = parseContext.parseInnerQuery()// 最后是一个DisjunctionMaxQuery((title:我 title:的 title:宝 title:马 title:多 title:少 title:马 title:力) | (query.term.content:我 query.term.content:的 query.term.content:宝 query.term.content:马 query.term.content:多 query.term.content:少 query.term.content:马 query.term.content:力))从RestController说起RestController.dispatchRequest--&gt;RestController.executeHandler--&gt;BaseRestHandler.handleRequest()--&gt;RestSearchAction.handleRequest()--&gt;NodeClient(AbstractClient).search--&gt;NodeClient.execute()--&gt;TransportSearchAction.execute--&gt;TransportAction.execute--&gt;TransportSearchAction.doExecute--&gt;TransportSearchQueryAndFetchAction(TransportAction).execute--&gt;TransportSearchQueryThenFetchAction.doExecuteTransportSearchQueryThenFetchAction的doExecute中启动一个异步task AsyncAction protected void doExecute(SearchRequest searchRequest, ActionListener&lt;SearchResponse&gt; listener) { new AsyncAction(searchRequest, listener).start(); }在start中主要分两个过程queryPhase.execute(searchService.executeQueryPhase)与fetchPhase.execute(searchService.executeFetchPhase)queryPhase.execute流程AsyncAction.start--&gt;AsyncAction.performFirstPhase--&gt;TransportSearchQueryThenFetchAction.sendExecuteFirstPhase--&gt;SearchService.sendExecuteQuery--&gt;SearchService.executeQueryPhase--&gt;queryPhase.execute在SearchService.executeQueryPhase的中首先调用createAndPutContext创建SearchContext，createAndPutContext创建SearchContext，并且接入activeContextsfinal SearchContext createAndPutContext(ShardSearchRequest request) throws ElasticsearchException { SearchContext context = createContext(request, null); boolean success = false; try { activeContexts.put(context.id(), context); context.indexShard().searchService().onNewContext(context); success = true; return context; } finally { if (!success) { freeContext(context); } }}createContext中创建SearchContextIndexService indexService = indicesService.indexServiceSafe(request.index());IndexShard indexShard = indexService.shardSafe(request.shardId());SearchShardTarget shardTarget = new SearchShardTarget(clusterService.localNode().id(), request.index(), request.shardId());Engine.Searcher engineSearcher = searcher == null ? indexShard.acquireSearcher(\"search\") : searcher;SearchContext context = new DefaultSearchContext(idGenerator.incrementAndGet(), request, shardTarget, engineSearcher, indexService, indexShard, scriptService, cacheRecycler, pageCacheRecycler, bigArrays);SearchContext.setCurrent(context);try { context.scroll(request.scroll()); context.useSlowScroll(request.useSlowScroll()); parseTemplate(request); parseSource(context, request.source()); parseSource(context, request.extraSource()); // if the from and size are still not set, default them if (context.from() == -1) { context.from(0); } if (context.size() == -1) { context.size(10); } // pre process dfsPhase.preProcess(context); queryPhase.preProcess(context); fetchPhase.preProcess(context); // compute the context keep alive long keepAlive = defaultKeepAlive; if (request.scroll() != null &amp;&amp; request.scroll().keepAlive() != null) { keepAlive = request.scroll().keepAlive().millis(); } context.keepAlive(keepAlive);} parseSource中包含Query的解析过程// nothing to parse...if (source == null || source.length() == 0) { return;}XContentParser parser = null;try { String sourceStr = new String(source.toBytes()); parser = XContentFactory.xContent(source).createParser(source); XContentParser.Token token; token = parser.nextToken(); if (token != XContentParser.Token.START_OBJECT) { throw new ElasticsearchParseException(\"Expected START_OBJECT but got \" + token.name() + \" \" + parser.currentName()); } while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) { if (token == XContentParser.Token.FIELD_NAME) { String fieldName = parser.currentName(); parser.nextToken(); SearchParseElement element = elementParsers.get(fieldName);//QueryParseElement if (element == null) { throw new SearchParseException(context, \"No parser for element [\" + fieldName + \"]\"); } element.parse(parser, context); } else { if (token == null) { throw new ElasticsearchParseException(\"End of query source reached but query is not complete.\"); } else { throw new ElasticsearchParseException(\"Expected field name but got \" + token.name() + \" \\\"\" + parser.currentName() + \"\\\"\"); } } }} 上边的两个语句都是query，source还是bytes，可以String sourceStr = new String(source.toBytes())直接转成String直观；parser = XContentFactory.xContent(source).createParser(source);这句很关键SearchParseElement是QueryParseElement，QueryParseElement.parse的方法public class QueryParseElement implements SearchParseElement { @Override public void parse(XContentParser parser, SearchContext context) throws Exception { context.parsedQuery(context.queryParserService().parse(parser)); }}终于看到queryParserService,这个就是IndexQueryParserService,IndexQueryParserService中的调用public ParsedQuery parse(XContentParser parser) { return parse(cache.get(), parser);}public ParsedQuery parse(QueryParseContext context, XContentParser parser) { try { return innerParse(context, parser); } catch (IOException e) { throw new QueryParsingException(index, \"Failed to parse\", e); }}private ParsedQuery innerParse(QueryParseContext parseContext, XContentParser parser) throws IOException, QueryParsingException { parseContext.reset(parser); try { if (strict) { parseContext.parseFlags(EnumSet.of(ParseField.Flag.STRICT)); } Query query = parseContext.parseInnerQuery();// if (query == null) { query = Queries.newMatchNoDocsQuery(); } return new ParsedQuery(query, parseContext.copyNamedFilters()); } finally { parseContext.reset(null); }}cache是CloseableThreadLocal ，这个是包装的ThreadLocalQuery的解析过程主要在parseInnerQuerypublic Query parseInnerQuery() throws IOException, QueryParsingException { // move to START object XContentParser.Token token; if (parser.currentToken() != XContentParser.Token.START_OBJECT) { token = parser.nextToken(); if (token != XContentParser.Token.START_OBJECT) { throw new QueryParsingException(index, \"[_na] query malformed, must start with start_object\"); } } token = parser.nextToken(); if (token != XContentParser.Token.FIELD_NAME) { throw new QueryParsingException(index, \"[_na] query malformed, no field after start_object\"); } String queryName = parser.currentName(); // move to the next START_OBJECT token = parser.nextToken(); if (token != XContentParser.Token.START_OBJECT &amp;&amp; token != XContentParser.Token.START_ARRAY) { throw new QueryParsingException(index, \"[_na] query malformed, no field after start_object\"); } QueryParser queryParser = indexQueryParser.queryParser(queryName); if (queryParser == null) { throw new QueryParsingException(index, \"No query registered for [\" + queryName + \"]\"); } Query result = queryParser.parse(this); if (parser.currentToken() == XContentParser.Token.END_OBJECT || parser.currentToken() == XContentParser.Token.END_ARRAY) { // if we are at END_OBJECT, move to the next one... parser.nextToken(); } return result;}依据name获取 QueryParser，第一个语句是TermQueryParser，第二个语句MultiMatchQueryParserMatchQueryParser解析的语句比较多 NAME, “match_phrase”, “matchPhrase”, “match_phrase_prefix”, “matchPhrasePrefix”, “matchFuzzy”, “match_fuzzy”, “fuzzy_match”，其中name就是matchQueryParser queryParser = indexQueryParser.queryParser(queryName);query的解析，第一个语句最后解析成TermQuery,第二条解析成DisjunctionMaxQueryQuery result = queryParser.parse(this)queryPhase.execute(context)内部会调用Lucene的IndexSearcher的search()第二阶段是在第一阶段sendExecuteFirstPhase的回调onFirstPhaseResult中调用innerMoveToSecondPhase，主要是调用子类的moveToSecondPhase，TransportSearchQueryThenFetchAction.moveToSecondPhase()在5.1.1版本中，已经改为AsyncAction(SearchQueryThenFetchAsyncAction)AsyncAction在TransportTasksAction了？TransportTasksAction-&gt;doExecute()protected void doExecute(Task task, TasksRequest request, ActionListener&lt;TasksResponse&gt; listener) { new AsyncAction(task, request, listener).start();}都会走到这一步this.asyncSender = interceptor.interceptSender(this::sendRequestInternal);default AsyncSender interceptSender(AsyncSender sender) { return sender;}public final &lt;T extends TransportResponse&gt; void sendRequest(final DiscoveryNode node, final String action, final TransportRequest request, final TransportRequestOptions options, TransportResponseHandler&lt;T&gt; handler) { asyncSender.sendRequest(node, action, request, options, handler); } private &lt;T extends TransportResponse&gt; void sendRequestInternal(final DiscoveryNode node, final String action, final TransportRequest request, final TransportRequestOptions options, TransportResponseHandler&lt;T&gt; handler) {...}顺便理了下Primary与Replica，TransportService中的sendRequestInternalif (node == null) {throw new IllegalStateException(\"can't send request to a null node\");}final long requestId = newRequestId();final TimeoutHandler timeoutHandler;try {if (options.timeout() == null) { timeoutHandler = null;} else { timeoutHandler = new TimeoutHandler(requestId);}TransportResponseHandler&lt;T&gt; responseHandler = new ContextRestoreResponseHandler&lt;&gt;(threadPool.getThreadContext().newStoredContext(), handler);clientHandlers.put(requestId, new RequestHolder&lt;&gt;(responseHandler, node, action, timeoutHandler));if (lifecycle.stoppedOrClosed()) { // if we are not started the exception handling will remove the RequestHolder again and calls the handler to notify // the caller. It will only notify if the toStop code hasn't done the work yet. throw new TransportException(\"TransportService is closed stopped can't send request\");}if (timeoutHandler != null) { assert options.timeout() != null; timeoutHandler.future = threadPool.schedule(options.timeout(), ThreadPool.Names.GENERIC, timeoutHandler);}if (node.equals(localNode)) { sendLocalRequest(requestId, action, request);} else { transport.sendRequest(node, requestId, action, request, options);}省取了部分代码，暂时不看TimeoutHandler，就是sendLocalRequest()执行本节点操作或transport.sendRequest()发送消息出去？看下localprivate void sendLocalRequest(long requestId, final String action, final TransportRequest request) { final RequestHandlerRegistry reg = adapter.getRequestHandler(action); final String executor = reg.getExecutor(); if (ThreadPool.Names.SAME.equals(executor)) { //noinspection unchecked reg.processMessageReceived(request, channel); } else { threadPool.executor(executor).execute(new AbstractRunnable() { @Override protected void doRun() throws Exception { //noinspection unchecked reg.processMessageReceived(request, channel); }主要是 reg.processMessageReceived(request, channel);public void processMessageReceived(Request request, TransportChannel channel) throws Exception { final Task task = taskManager.register(channel.getChannelType(), action, request); if (task == null) { handler.messageReceived(request, channel); } else { boolean success = false; try { // ReplicaOperationTransportHandler/PrimaryOperationTransportHandler handler.messageReceived(request, new TransportChannelWrapper(taskManager, task, channel), task); success = true; } finally { if (success == false) { taskManager.unregister(task); } } }}这里的handler注册位于TransportReplicationAction里面transportService.registerRequestHandler(actionName, request, ThreadPool.Names.SAME, new OperationTransportHandler());transportService.registerRequestHandler(transportPrimaryAction, () -&gt; new ConcreteShardRequest&lt;&gt;(request), executor, new PrimaryOperationTransportHandler());// we must never reject on because of thread pool capacity on replicastransportService.registerRequestHandler(transportReplicaAction, () -&gt; new ConcreteShardRequest&lt;&gt;(replicaRequest), executor, true, true, new ReplicaOperationTransportHandler());PrimaryOperationTransportHandler的messageReceived方法public void messageReceived(ConcreteShardRequest&lt;Request&gt; request, TransportChannel channel, Task task) { new AsyncPrimaryAction(request.request, request.targetAllocationID, channel, (ReplicationTask) task).run();}ReplicaOperationTransportHandler的messageReceived方法public void messageReceived(ConcreteShardRequest&lt;ReplicaRequest&gt; requestWithAID, TransportChannel channel, Task task) throws Exception { new AsyncReplicaAction(requestWithAID.request, requestWithAID.targetAllocationID, channel, (ReplicationTask) task).run();}6.0.0-alpha1 中Primary与Replicaclass PrimaryOperationTransportHandler implements TransportRequestHandler&lt;ConcreteShardRequest&lt;Request&gt;&gt; { @Override public void messageReceived(ConcreteShardRequest&lt;Request&gt; request, TransportChannel channel, Task task) { new AsyncPrimaryAction(request.request, request.targetAllocationID, channel, (ReplicationTask) task).run(); }}class ReplicaOperationTransportHandler implements TransportRequestHandler&lt;ConcreteShardRequest&lt;ReplicaRequest&gt;&gt; { public void messageReceived(ConcreteShardRequest&lt;ReplicaRequest&gt; requestWithAID, TransportChannel channel, Task task) throws Exception { new AsyncReplicaAction(requestWithAID.request, requestWithAID.targetAllocationID, channel, (ReplicationTask) task).run(); }}PrimaryAsyncPrimaryAction.onResponse--&gt;ReplicationOperation.execute--&gt;primary.perform--&gt;PrimaryShardReference.perform--&gt;TransportShardBulkAction.shardOperationOnPrimaryReplicaAsyncReplicaAction.onResponse--&gt;TransportShardBulkAction.shardOperationOnReplicaElasticSearch：剖析query_and_fetch和query_then_fetch的区别" }, { "title": "google tensorflow notes", "url": "/posts/tensorflow/", "categories": "Datascience", "tags": "ML, Datascience", "date": "2016-06-30 00:00:00 +0000", "snippet": "google tensorflow的安装可以参考文档Google tensorflow Download and Setup在自己的Mac上安装，这里选择了Virtualenv installation，也可以选择Anaconda或者其他安装方式Install pip and Virtualenv:sudo pip install --upgrade virtualenv Create a Virtualenv environment in the directory ~/tensorflow:virtualenv --system-site-packages ./tensorflowActivate the environment and use pip to install TensorFlow inside it:tensorflow/bin/activatepip install --upgrade https://storage.googleapis.com/tensorflow/mac/tensorflow-0.7.1-cp27-none-any.whlWhen you are done using TensorFlow, deactivate the environment.(tensorflow)$ deactivateTo use TensorFlow later you will have to activate the Virtualenv environment again:source tensorflow/bin/activate测试是否安装oktensorflow) bogon:develop bogon$ pythonPython 2.7.5 (default, Aug 25 2013, 00:04:04) [GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwinType \"help\", \"copyright\", \"credits\" or \"license\" for more information.&gt;&gt;&gt; import tensorflow as tf&gt;&gt;&gt; hello = tf.constant('Hello, TensorFlow!')&gt;&gt;&gt; sess = tf.Session()&gt;&gt;&gt; print(sess.run(hello))Hello, TensorFlow!&gt;&gt;&gt; a = tf.constant(10)&gt;&gt;&gt; b = tf.constant(32)&gt;&gt;&gt; print(sess.run(a + b))42&gt;&gt;&gt; 实例学习TensorFlow-Examples这个感觉挺好的，有代码，notebook。相关算法有Linear Regression,Logistic Regression，Convolutional Neural Network，Recurrent Neural Network (LSTM) .etc bogon$ git clone https://github.com/aymericdamien/TensorFlow-Examples.git运行一个CNN的例子tensorflow) bogon:3 - Neural Networks bogon$ python convolutional_network.py Succesfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.Extracting /tmp/data/train-images-idx3-ubyte.gz/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/gzip.py:268: VisibleDeprecationWarning: converting an array with ndim &gt; 0 to an index will result in an error in the future chunk = self.extrabuf[offset: offset + size]/Users/bogon/develop/tensorflow/TensorFlow-Examples/examples/3 - Neural Networks/input_data.py:35: VisibleDeprecationWarning: converting an array with ndim &gt; 0 to an index will result in an error in the future data = data.reshape(num_images, rows, cols, 1)Succesfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.Extracting /tmp/data/train-labels-idx1-ubyte.gzSuccesfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.Extracting /tmp/data/t10k-images-idx3-ubyte.gzSuccesfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.Extracting /tmp/data/t10k-labels-idx1-ubyte.gzIter 1280, Minibatch Loss= 30910.765625, Training Accuracy= 0.25781Iter 2560, Minibatch Loss= 16850.156250, Training Accuracy= 0.39062Iter 3840, Minibatch Loss= 18461.570312, Training Accuracy= 0.51562Iter 5120, Minibatch Loss= 10053.062500, Training Accuracy= 0.67188...Iter 99840, Minibatch Loss= 738.179016, Training Accuracy= 0.91406Optimization Finished!Testing Accuracy: 0.941406" }, { "title": "Mechine Learning原理公式整理", "url": "/posts/ML/", "categories": "Datascience", "tags": "ML, Datascience", "date": "2016-06-13 00:00:00 +0000", "snippet": "线性回归一元方程可表示为:\\[h_\\theta(x)=\\theta_0 + \\theta_1 x\\]多元方程可表示为:\\[h_\\theta(x)=\\theta_0 + \\theta_1 x_1+...+\\theta_n x_n\\]可以统一写成如下格式:\\[h_\\theta(x) =\\sum_{i=0}^n (\\theta_i x_i)\\]其中\\(x_0\\)为0梯度下降法损失函数（loss/error fuction）为\\[J(\\theta) = \\frac 1 2 \\sum_{i=1}^m (h_\\theta(x^{(i)})-y^{(i)})^2\\]梯度(batch)计算\\[\\theta_j := \\theta_j - \\alpha\\frac\\partial{\\partial\\theta_j}J(\\theta)\\]又\\[\\frac\\partial{\\partial\\theta_j}(h_\\theta(x)-y)^2\\]\\[＝2 (h_\\theta(x)-y) \\frac\\partial{\\partial\\theta_j}(h_\\theta(x)-y)\\]\\[＝2 (h_\\theta(x)-y) \\frac\\partial{\\partial\\theta_j}(\\sum_{i=0}^n (\\theta_i x_i)-y)\\]\\[＝2 (h_\\theta(x)-y) x_j\\]其中\\(\\sum_{i=0}^n (\\theta_i x_i)\\)由于是对\\(\\theta_j\\)求导数，最后仅剩下\\(x_j\\)于是\\[\\frac\\partial{\\partial\\theta_j}J(\\theta)＝\\frac\\partial{\\partial\\theta_j} \\frac 1 2 \\sum_{i=1}^m (h_\\theta(x^{(i)})-y^{(i)})^2\\]\\[＝\\sum_{i=1}^m \\frac 1 2 2 (y^{(i)}-h_\\theta(x^{(i)})) x_j^{(i)}\\]\\[＝\\sum_{i=1}^m (y^{(i)}-h_\\theta(x^{(i)})) x_j^{(i)}\\]最终，梯度(batch)计算公式为\\[\\theta_j := \\theta_j - \\alpha \\sum_{i=1}^m (h_\\theta(x^{(i)})-y^{(i)}) x_j^{(i)}\\]\\[= \\theta_j + \\alpha \\sum_{i=1}^m (y^{(i)}-h_\\theta(x^{(i)})) x_j^{(i)}\\]随机梯度下降法为repeat{ for i=1 to m {\\(\\theta_j := \\theta_j + \\alpha (y^{(i)}-h_\\theta(x^{(i)})) x_j^{(i)}\\) } }Logistic函数（或者称 Sigmoid函数）\\[g(z)=\\frac 1 {1+e^{(-z)}}\\]令\\[z=\\theta_0 + \\theta_1 x_1+...+\\theta_n x_n=\\sum_{i=0}^n (\\theta_i x_i)=\\theta^{(T)}x\\]则\\[g(z)=g(\\theta^{T}x)=\\frac 1 {1+e^{(-\\theta^{T}x)}}＝h_\\theta(x)\\]函数\\(h_\\theta(x)\\)的含义，表示结果取1 时的概率，对于输入x，分类结果为类别0和类别1的概率，可表示为：\\[P(y=1|x;\\theta)=h_\\theta(x)\\]\\(P(y=0|x;\\theta)=1-h_\\theta(x)\\)假设现在有m个相互独立的观察事件\\(y(y^{(1)},y^{(2)},y^{(3)},...,y^{(m)})\\), 则一个事件\\(y^{(i)}\\)发生的概率为(\\(y^{(i)}=1\\))\\[p(y^{(i)})=p^{y^{(i)}} {(1-p)}^{1-y^{(i)}}\\]即\\[p(y|x;\\theta)=h_\\theta(x)^{y^{(i)}}(1-h_\\theta(x))^{1-y^{(i)}}\\]似然函数\\[L(\\theta)=\\prod_{j=0}^m (h_\\theta(x_i)^{y_i}*(1-h_\\theta(x_i))^{1-y_i})\\]对数似然函数\\(l(\\theta)=log(L(\\theta))=\\sum_1^m(y_ilogh_\\theta(x_i)+(1-y_i)log(1-h_\\theta(x_i)))\\)23333loss(Cost)函数\\[J(\\theta)=-\\frac 1 m l(\\theta)\\]结合梯度下降法求最小值时的公式\\[\\theta_i = \\theta_i - \\alpha\\frac\\partial{\\partial\\theta_i}J(\\theta)\\]则\\[\\frac\\partial{\\partial\\theta_j}J(\\theta)＝-\\frac 1 m \\sum_1^m{((y_i \\frac 1 {h_\\theta(x)})}{\\frac\\partial{\\partial\\theta_j}{h_\\theta(x)}}-{(1-y_i)\\frac 1 {(1-h_\\theta(x))}}{\\frac\\partial{\\partial\\theta_j}{h_\\theta(x)})}\\]\\(\\frac\\partial{\\partial\\theta_j}J(\\theta)\\)求导数\\[\\begin {aligned}\\frac\\partial{\\partial\\theta_j}J(\\theta)\\\\ &amp;＝ -\\frac 1 m \\sum_1^m{(y_i* \\frac 1 {h_\\theta(x_i)}}{\\frac\\partial{\\partial\\theta_j}{h_\\theta(x_i)}}-{(1-y_i)\\frac 1 {(1-h_\\theta(x_i))}}{\\frac\\partial{\\partial\\theta_j}{h_\\theta(x_i)})}\\\\ &amp;=-\\frac 1 m \\sum_1^m({y_i* \\frac 1 {g(\\theta^{T}x_i)}}-{(1-y_i)\\frac 1{(1-g(\\theta^{T}x_i))}}){\\frac\\partial{\\partial\\theta_j}{g(\\theta^{T}x_i)}}\\\\ &amp;=-\\frac 1 m \\sum_1^m({y_i* \\frac 1 {g(\\theta^{T}x_i)}}-{(1-y_i)\\frac 1 {(1-g(\\theta^{T}x_i))}}){g(\\theta^{T}x_i){(1-{g(\\theta^{T}x_i))}}}{\\frac\\partial{\\partial\\theta_j}{(\\theta^{T}{x_i})}}\\\\ &amp;=-\\frac 1 m \\sum_1^m{(({y_i*{(1-g(\\theta^{T}x_i)}})-{(1-y_i)}{g(\\theta^{T}x_i})})x_i^j\\\\ &amp;=-\\frac 1 m \\sum_1^m{(y_i-g(\\theta^{T}x_i))}x_i^j\\\\ &amp;=-\\frac 1 m \\sum_1^mx_i^j\\\\ \\end {aligned}\\]梯度下降与回归方法 从中心极限定理到正太分布到极大释然函数到平方和最小函数能求解出最佳theta 批量梯度：每次迭代计算theta使用所有样本 随机梯度：没读取一条样本就迭代对theta进行更新 改进后的随机梯度下降 逻辑回归 softmax Gradient Descent (SGD BGD) 牛顿法 拟牛顿法 BGFS L-BGFS 求解过程 注意误差函数：E（w）=∑[h（x-y]^2/2 梯度求解 wi=wi-η∂E/∂wi ∂E/∂wi=∑（h(x)-y(xi)决策树 ID3,C4.5 信息增益(最大信息增益)/信息增益率 CART 基尼系数Gini 最好的划分就是使得GINI_Gain最小的划分。（回归树：最小平方残差、最小绝对残差等） 相关课程资源 cs231n CS224d cs229 " }, { "title": " 学习使用Xgboost4j", "url": "/posts/Xgboost/", "categories": "Xgboost", "tags": "ML, Datascience, Xgboost, , rank", "date": "2016-05-19 00:00:00 +0000", "snippet": "Xgboost4j使用Java训练rank(Learning to Rank)模型，跟一般算法不同， 这里数据有个组的概念，可以通过DMatrix的setGroup()方法设置，参数是一个int数组,这里还是用demo中rank的package ml.dmlc.xgboost4j.java.example;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import ml.dmlc.xgboost4j.java.Booster;import ml.dmlc.xgboost4j.java.DMatrix;import ml.dmlc.xgboost4j.java.XGBoost;import ml.dmlc.xgboost4j.java.XGBoostError;public class L2rankTrain {\t\tpublic static void main(String[] args) {\t\ttry {\t\t\tDMatrix trainMat = new DMatrix(\"xgboost/xgboost/demo/rank/mq2008.train\");\t\t\tDMatrix testMat = new DMatrix(\"xgboost/xgboost/demo/rank/mq2008.test\");\t\t\tDMatrix valiMat = new DMatrix(\t\t\t\t\t\"xgboost/xgboost/demo/rank/mq2008.test\");\t\t\tString trainGroupFile = \"xgboost/xgboost/demo/rank/mq2008.train.group\";\t\t\tString testGroupFile = \"xgboost/xgboost/demo/rank/mq2008.test.group\";\t\t\tString valiGroupFile = \"xgboost/xgboost/demo/rank/mq2008.test.group\";\t\t\tBufferedReader trainBr = new BufferedReader(new FileReader(\t\t\t\t\ttrainGroupFile));\t\t\tBufferedReader testBr = new BufferedReader(new FileReader(\t\t\t\t\ttestGroupFile));\t\t\tString line = null;\t\t\t\t\t\tList trainGroupValueList = new ArrayList&lt;Integer&gt;();\t\t\tList testGroupValueList = new ArrayList&lt;Integer&gt;();\t\t\twhile ((line = trainBr.readLine()) != null) {\t\t\t\ttrainGroupValueList.add(Integer.parseInt(line));\t\t\t}\t\t\twhile ((line = testBr.readLine()) != null) {\t\t\t\ttestGroupValueList.add(Integer.parseInt(line));\t\t\t}\t\t\tint[] trainGroupArr = new int[trainGroupValueList.size()];\t\t\tfor (int i = 0; i &lt; trainGroupArr.length; i++) {\t\t\t\ttrainGroupArr[i] = (int) trainGroupValueList.get(i);\t\t\t}\t\t\tint[] testGroupArr = new int[testGroupValueList.size()];\t\t\tfor (int i = 0; i &lt; testGroupArr.length; i++) {\t\t\t\ttestGroupArr[i] = (int) testGroupValueList.get(i);\t\t\t}\t\t\tHashMap&lt;String, Object&gt; params = new HashMap&lt;String, Object&gt;();\t\t\tparams.put(\"eta\", 0.1);\t\t\tparams.put(\"gamma\", 1.0);\t\t\tparams.put(\"min_child_weight\", 0.1);\t\t\tparams.put(\"max_depth\", 6);\t\t\tparams.put(\"silent\", 1);\t\t\t// rank:pairwise rank:ndcg\t\t\tparams.put(\"objective\", \"rank:pairwise\");\t\t\ttrainMat.setGroup(trainGroupArr);\t\t\ttestMat.setGroup(testGroupArr);\t\t\tHashMap&lt;String, DMatrix&gt; watches = new HashMap&lt;String, DMatrix&gt;();\t\t\twatches.put(\"train\", trainMat);\t\t\twatches.put(\"test\", testMat);\t\t\t// watches.put(\"val\", value);\t\t\tint round = 4;\t\t\tBooster booster = XGBoost.train(trainMat, params, round, watches,\t\t\t\t\tnull, null);//\t\t\tbooster.saveModel(modelPath);//\t\t\tXGBoost.loadModel(modelPath);//\t\t\tXGBoost.loadModel(in);\t\t\t// predict\t\t\tfloat[][] predicts = booster.predict(testMat);\t\t\tSystem.out.println(\"predicts.length: \" + predicts.length);\t\t\tfor (int i = 0; i &lt; predicts.length; i++) {\t\t\t\tfloat[] pred = predicts[i];\t\t\t\tfor (int j = 0; j &lt; pred.length; j++) {\t\t\t\t\tSystem.out.println(pred[j]);\t\t\t\t}\t\t\t}\t\t} catch (Exception e) {\t\t\te.printStackTrace();\t\t}\t}}Java调用训练好的model文件, 其中模型文件是rank产生的0004.modelpublic class LoadRankModelTest {\t\tpublic static void main(String[] args) throws XGBoostError {\t //测试数据\t\tDMatrix testMat = new DMatrix(\"xgboost/xgboost/demo/rank/mq2008.test\");\t\t//load model \t\tBooster booster2 = XGBoost.loadModel(\"xgboost/xgboost/demo/rank/0004.model\");\t\t//预测\t\tfloat[][] preds = booster2.predict(testMat, true);\t\t//testMat.setGroup();\t\tfor (int i = 0; i &lt; preds.length; i++) {\t\t\tfloat[] pred = preds[i];\t\t\tfor (int j = 0; j &lt; pred.length; j++) {\t\t\t\tSystem.out.println(\"i: \"+i+\" pred: \"+pred[j]);\t\t\t}\t\t}\t}}看Api,模型文件也可以从InputStream得到File f = new File(\"xgboost/xgboost/demo/rank/0004.model\");try {\tInputStream input = new FileInputStream(f);\t\t\tBooster booster2 = XGBoost.loadModel(input);\t\tDMatrix testMat = new DMatrix(\"xgboost/xgboost/demo/rank/mq2008.test\");\t\t//Booster booster2 = XGBoost.loadModel(\"xgboost/xgboost/demo/rank/0004.model\");\t\tfloat[][] preds = booster2.predict(testMat, true);\t\tfor (int i = 0; i &lt; preds.length; i++) {\t\t\tfloat[] pred = preds[i];\t\t\tfor (int j = 0; j &lt; pred.length; j++) {\t\t\t\tSystem.out.println(\"i: \"+i+\" pred: \"+pred[j]);\t\t\t}\t\t}\t\t} catch (XGBoostError e) {\tSystem.out.println(\"XGBoostError: \"+e);} catch (FileNotFoundException e) {\tSystem.out.println(\"FileNotFoundException: \"+e);} catch (IOException e) {\tSystem.out.println(\"e: \"+e);}这里DMatrix很多时候不可能直接是文件，这时就不能通过DMatrix(String dataPath)来的得到测试的数据了。这里可以先构造List&lt;LabeledPoint&gt;LabeledPoint可以认为是SVM格式一行数据，然后通过这个list的iter构造DMatrixFile svmFormatFile = new File(TEST_SVM_FORMAT_FILE_PATH);try {\tBufferedReader bfReader = new BufferedReader(new FileReader(svmFormatFile));\tString line=null;\t//line=bfReader.readLine();\tjava.util.List&lt;LabeledPoint&gt; blist = new java.util.LinkedList&lt;LabeledPoint&gt;();\twhile((line=bfReader.readLine())!=null){\t\tString[] lines = line.split(\" \");\t\tfloat label = Float.parseFloat(lines[0]);\t\tfloat[] fVals = new float[lines.length-2];\t\tint[] indices = new int[lines.length-2];\t\t\t\tfor (int i = 2; i &lt; lines.length; i++) {\t\t\tString[] futureAndVal = lines[i].split(\":\");\t\t\tfVals[i-2]= Float.parseFloat(futureAndVal[1]);\t\t\tindices[i-2] = Integer.parseInt(futureAndVal[0]);\t\t}\t\tLabeledPoint lp = LabeledPoint.fromSparseVector(label, indices, fVals);\t\t//LabeledPoint lp = LabeledPoint.fromDenseVector(label, fVals);\t\tblist.add(lp);\t}\t\tDMatrix testMat = new DMatrix(blist.iterator(), null);\t\tBooster booster2 = XGBoost.loadModel(\"xgboost/xgboost/demo/rank/0004.model\");\tfloat[][] preds = booster2.predict(testMat, true);\tfor (int i = 0; i &lt; preds.length; i++) {\t\tfloat[] pred = preds[i];\t\tfor (int j = 0; j &lt; pred.length; j++) {\t\t\tSystem.out.println(\"i: \"+i+\" pred: \"+pred[j]);\t\t}\t}}catch(XGBoostError xGBoostError){\tSystem.out.println(\"xGBoostError: \"+xGBoostError);} catch(IOException e){\tSystem.out.println(\"e: \"+e);}" }, { "title": "Learning to Rank ", "url": "/posts/LTR/", "categories": "Datascience", "tags": "ML, Datascience", "date": "2016-04-22 00:00:00 +0000", "snippet": "数据格式0 qid:10050 1:0.434944 2:0.000000 3:0.000000 4:1.000000 5:0.425455 6:0.000000 7:0.000000 8:0.000000 9:0.000000 10:0.000000 11:0.423479 12:0.000000 13:0.000000 14:1.000000 15:0.412193 16:0.643254 17:0.142857 18:0.000000 19:0.500000 20:0.638407 21:1.000000 22:0.958198 23:0.946106 24:0.936481 25:0.000000 26:0.000000 27:0.000000 28:0.000000 29:0.000000 30:0.000000 31:0.000000 32:0.000000 33:0.733195 34:0.000000 35:0.000000 36:0.000000 37:0.979925 38:0.922568 39:0.924231 40:0.918143 41:0.666667 42:0.739726 43:0.000000 44:0.009367 45:0.250000 46:0.000000 #docid = GX264-67-3123911 inc = 1 prob = 0.1893570 qid:10056 1:0.179567 2:0.000000 3:0.000000 4:0.000000 5:0.174455 6:0.000000 7:0.000000 8:0.000000 9:0.000000 10:0.000000 11:0.002800 12:0.000000 13:0.000000 14:0.000000 15:0.002287 16:0.084188 17:1.000000 18:0.571429 19:0.000000 20:0.084561 21:0.017313 22:0.220225 23:0.306690 24:0.295506 25:0.000000 26:0.000000 27:0.000000 28:0.000000 29:0.000000 30:0.000000 31:0.000000 32:0.000000 33:0.000000 34:0.000000 35:0.000000 36:0.000000 37:0.018289 38:0.220830 39:0.306274 40:0.297002 41:0.000000 42:0.000000 43:0.000000 44:0.264231 45:0.473684 46:0.172414 #docid = GX000-03-7721182 inc = 1 prob = 0.08974522 qid:10056 1:0.114551 2:1.000000 3:0.666667 4:0.000000 5:0.143302 6:0.000000 7:0.000000 8:0.000000 9:0.000000 10:0.000000 11:0.229690 12:1.000000 13:0.821326 14:0.000000 15:0.330058 16:0.012862 17:0.708333 18:0.571429 19:0.050000 20:0.013133 21:0.795735 22:0.842889 23:0.857526 24:0.842199 25:0.778357 26:0.905145 27:1.000000 28:0.870033 29:0.720071 30:0.673076 31:0.959066 32:0.621171 33:0.000000 34:0.000000 35:0.000000 36:0.000000 37:0.889891 38:0.914435 39:0.948256 40:0.910097 41:0.500000 42:0.178571 43:0.000000 44:1.000000 45:0.578947 46:0.655172 #docid = GX001-20-2991462 inc = 0.0971783377719955 prob = 0.9787070 qid:10056 1:0.015480 2:0.000000 3:0.000000 4:0.000000 5:0.009346 6:0.000000 7:0.000000 8:0.000000 9:0.000000 10:0.000000 11:0.043660 12:0.000000 13:0.000000 14:0.000000 15:0.044096 16:0.005016 17:0.291667 18:0.571429 19:0.100000 20:0.005135 21:0.272555 22:0.166655 23:0.080059 24:0.077839 25:0.000000 26:0.000000 27:0.000000 28:0.000000 29:0.000000 30:0.000000 31:0.000000 32:0.000000 33:0.000000 34:0.000000 35:0.000000 36:0.000000 37:0.269664 38:0.157425 39:0.074903 40:0.069359 41:0.500000 42:0.133929 43:0.000000 44:0.001745 45:0.052632 46:0.000000 #docid = GX002-91-6093726 inc = 1 prob = 0.04653321 qid:10056 1:0.065015 2:0.111111 3:0.333333 4:0.000000 5:0.065421 6:0.000000 7:0.000000 8:0.000000 9:0.000000 10:0.000000 11:0.093772 12:0.113496 13:0.407389 14:0.000000 15:0.113168 16:0.007609 17:0.166667 18:0.571429 19:0.150000 20:0.007693 21:0.672292 22:0.784546 23:0.700592 24:0.809056 25:0.330412 26:0.000000 27:0.000000 28:0.000000 29:0.357165 30:0.000000 31:0.000000 32:0.000000 33:0.000000 34:0.000000 35:0.000000 36:0.000000 37:0.694775 38:0.803481 39:0.725529 40:0.826979 41:1.000000 42:0.250000 43:0.000000 44:0.135091 45:0.105263 46:0.034483 #docid = GX004-37-11235977 inc = 0.0572482685995155 prob = 0.8672482 qid:10056 1:0.133127 2:0.888889 3:1.000000 4:0.000000 5:0.161994 6:0.000000 7:0.000000 8:0.000000 9:0.000000 10:0.000000 11:0.246180 12:0.809717 13:1.000000 14:0.000000 15:0.323971 16:0.011540 17:0.541667 18:0.428571 19:0.150000 20:0.011761 21:0.838357 22:0.897991 23:0.900076 24:0.897615 25:0.813411 26:1.000000 27:0.918560 28:0.915127 29:1.000000 30:1.000000 31:1.000000 32:1.000000 33:0.000000 34:0.000000 35:0.000000 36:0.000000 37:0.900711 38:0.956808 39:0.971849 40:0.954784 41:1.000000 42:0.241071 43:0.000000 44:0.172420 45:1.000000 46:1.000000 #docid = GX012-07-6597432 inc = 1 prob = 0.9831190 qid:10056 1:0.000000 2:0.000000 3:0.333333 4:0.333333 5:0.000000 6:0.000000 7:0.000000 8:0.000000 9:0.000000 10:0.000000 11:0.028872 12:0.000000 13:0.413937 14:0.380640 15:0.051310 16:0.000000 17:0.000000 18:0.142857 19:0.250000 20:0.000000 21:0.344383 22:0.342126 23:0.065642 24:0.172238 25:0.000000 26:0.000000 27:0.000000 28:0.000000 29:0.575903 30:0.110355 31:0.037870 32:0.076987 33:0.530176 34:0.000000 35:0.000000 36:0.000000 37:0.467593 38:0.408779 39:0.174411 40:0.169594 41:1.000000 42:0.285714 43:0.000000 44:0.000000 45:0.000000 46:0.000000 #docid = GX106-64-0336730 inc = 1 prob = 0.08308651 qid:10056 1:0.052632 2:0.000000 3:0.000000 4:0.000000 5:0.046729 6:0.000000 7:0.000000 8:0.000000 9:0.000000 10:0.000000 11:0.108311 12:0.000000 13:0.000000 14:0.000000 15:0.108686 16:0.004253 17:0.083333 18:0.714286 19:0.350000 20:0.004389 21:0.768296 22:0.878078 23:0.724629 24:0.905898 25:0.000000 26:0.000000 27:0.000000 28:0.000000 29:0.000000 30:0.000000 31:0.000000 32:0.000000 33:0.000000 34:0.000000 35:0.000000 36:0.000000 37:0.766041 38:0.870349 39:0.723306 40:0.898199 41:1.000000 42:0.303571 43:0.000000 44:0.252919 45:0.157895 46:0.000000 #docid = GX142-64-2472087 inc = 0.0506903970754654 prob = 0.3921230 qid:10056 1:0.009288 2:0.000000 3:0.000000 4:1.000000 5:0.012461 6:0.000000 7:0.000000 8:0.000000 9:0.000000 10:0.000000 11:0.057557 12:0.000000 13:0.000000 14:1.000000 15:0.088138 16:0.000864 17:0.000000 18:0.000000 19:1.000000 20:0.001101 21:0.776012 22:0.783169 23:0.554848 24:0.771985 25:0.000000 26:0.000000 27:0.000000 28:0.000000 29:0.000000 30:0.000000 31:0.000000 32:0.000000 33:0.781721 34:0.930813 35:1.000000 36:0.898506 37:0.895931 38:0.877806 39:0.672227 40:0.808451 41:1.000000 42:1.000000 43:0.000000 44:0.000000 45:0.000000 46:0.000000 #docid = GX161-43-7991020 inc = 1 prob = 0.5050191 qid:10056 1:0.055728 2:0.000000 3:0.000000 4:0.000000 5:0.049844 6:0.000000 7:0.000000 8:0.000000 9:0.000000 10:0.000000 11:0.206377 12:0.000000 13:0.000000 14:0.000000 15:0.206964 16:0.002423 17:0.000000 18:0.714286 19:0.550000 20:0.002593 21:1.000000 22:0.936061 23:0.858554 24:0.859561 25:0.000000 26:0.000000 27:0.000000 28:0.000000 29:0.000000 30:0.000000 31:0.000000 32:0.000000 33:0.000000 34:0.000000 35:0.000000 36:0.000000 37:1.000000 38:0.921210 39:0.856579 40:0.845357 41:1.000000 42:0.598214 43:0.000000 44:0.000000 45:0.000000 46:0.000000 #docid = GX169-00-10359237 inc = 1 prob = 0.2698951 qid:10056 1:0.160991 2:0.000000 3:0.000000 4:0.000000 5:0.155763 6:0.000000 7:0.000000 8:0.000000 9:0.000000 10:0.000000 11:0.431296 12:0.000000 13:0.000000 14:0.000000 15:0.431691 16:0.008032 17:0.000000 18:0.714286 19:0.550000 20:0.008202 21:0.947859 22:1.000000 23:1.000000 24:1.000000 25:0.000000 26:0.000000 27:0.000000 28:0.000000 29:0.000000 30:0.000000 31:0.000000 32:0.000000 33:0.000000 34:0.000000 35:0.000000 36:0.000000 37:0.951447 38:1.000000 39:1.000000 40:1.000000 41:1.000000 42:0.607143 43:0.000000 44:0.000000 45:0.000000 46:0.000000 #docid = GX207-04-13100446 inc = 1 prob = 0.7793110 qid:10056 1:0.009288 2:0.000000 3:0.000000 4:0.000000 5:0.003115 6:0.000000 7:0.000000 8:0.000000 9:0.000000 10:0.000000 11:0.036442 12:0.000000 13:0.000000 14:0.000000 15:0.036946 16:0.002203 17:0.000000 18:1.000000 19:0.200000 20:0.002288 21:0.530088 22:0.583607 23:0.442096 24:0.748607 25:0.000000 26:0.000000 27:0.000000 28:0.000000 29:0.000000 30:0.000000 31:0.000000 32:0.000000 33:0.000000 34:0.000000 35:0.000000 36:0.000000 37:0.520742 38:0.563572 39:0.439313 40:0.729926 41:0.500000 42:0.151786 43:0.000000 44:0.000000 45:0.000000 46:0.379310 #docid = GX239-68-0758843 inc = 0.023928833150798 prob = 0.286562其中第一列表示标签label值，label值表示则其排在第i位置的dcg为：\\[dcg(i)=\\frac{2^{label(i)}+1}{\\log(i+1)}\\]对于文档i与j，设打分函数为F(X)（X=w1v1+w2v2+w3v3+…+wnvn）,则F(Xi)-F(Xj)越大，i排在j前面的概率越高,即F(Xi)-F(Xj)表示文档i排在j前面的概率但是概率的范围应该是[0,1]之间，参考逻辑斯蒂回归的归一化函数归一化得\\[P_(ij)=\\frac {e^{F(x_i)-F(x_j)}} {1+e^{F(x_i)-F(x_j)}} \\\\=\\frac {e^{\\sigma {(s_i-s_j)}}} {1+e^{\\sigma {(s_i-s_j)}}}\\\\=\\frac 1 {1+e^{-\\sigma {(s_i-s_j)}}} \\\\\\]定义其真实概率为\\[\\overline {P_{ij}}=\\frac 1 2 {(1+S_{ij})}\\]交叉熵函数\\[C=yln(1-a)+aln(1-y)\\]即:\\[C=-\\overline P_{ij}logP_{ij}-(1-{\\overline{P_{ij}}})log(1-P_{ij})\\]或?\\[C=-\\overline P_{ij}lnP_{ij}-(1-{\\overline{P_{ij}}})ln(1-P_{ij})\\]化简得\\(C=\\frac 1 2(1-S_{ij})(s_i-s_j)+log{(1+e^{-(s_i-s_j)})}\\)" }, { "title": "SolrCloud Leader Elect", "url": "/posts/solr-leader-elect/", "categories": "distributed", "tags": "distributed, Search, SolrCloud", "date": "2015-10-20 00:00:00 +0000", "snippet": "SolrCloud 领导选举，最小seq,这点有点同Kafka seq(0)主要有两部分，一个是集群的leader选举过程，一个是collection的shard的leader选举过程集群的leader选举 主要相关的类：OverseerElectionContext 相关节点：/overseer_elect/election可以说leader候选节点，/overseer_elect/election是选举出来的leader [zk: 172.16.113.253:2182,172.16.113.254:2182(CONNECTED) 56] ls /overseer_elect/election[166405419031556844-172.17.52.154:8080_solr-n_0000000117, 166405419031556837-172.17.52.155:8080_solr-n_0000000115][zk: 172.16.113.253:2182,172.16.113.254:2182(CONNECTED) 57] get /overseer_elect/electionnullcZxid = 0x36002c1fe2ctime = Fri May 06 06:02:06 EDT 2016mZxid = 0x36002c1fe2mtime = Fri May 06 06:02:06 EDT 2016pZxid = 0x36002d5efecversion = 234dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 0numChildren = 2集群leader的大致流程调用关系SolrDispatchFilter.init()–&gt;SolrDispatchFilter.createCoreContainer()–&gt;CoreContainer.load()–&gt;ZkContainer.initZooKeeper()–&gt;new ZkController()–&gt;new SolrZkClient()与ZkController.init()中都有选举相关代码在SolrZkClient()的主要代码///overseer_elect/election下seq最小的节点为leaderElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName());ElectionContext prevContext = overseerElector.getContext();if (prevContext != null) { prevContext.cancelElection();}overseerElector.setup(context);//选出seq最小的节点作为leaderoverseerElector.joinElection(context, true);在ZkController.init()的主要代码if (!zkRunOnly) { overseerElector = new LeaderElector(zkClient); this.overseer = new Overseer(shardHandler, updateShardHandler, adminPath, zkStateReader, this, cc.getConfig()); ElectionContext context = new OverseerElectionContext(zkClient, overseer, getNodeName()); overseerElector.setup(context); overseerElector.joinElection(context, false); }看起来都差不多，主要是两行代码，overseerElector.setup(context)也没干啥事，就是确保/overseer_elect/election节点存在，有就直接返回，没有就创建overseerElector.setup(context);overseerElector.joinElection(context, false);主要看joinElection(ElectionContext context, boolean replacement)，逻辑主要在joinElection(ElectionContext context, boolean replacement,boolean joinAtHead)中实现 /** * Begin participating in the election process. Gets a new sequential number * and begins watching the node with the sequence number before it, unless it * is the lowest number, in which case, initiates the leader process. If the * node that is watched goes down, check if we are the new lowest node, else * watch the next lowest numbered node. * * @return sequential node number */public int joinElection(ElectionContext context, boolean replacement,boolean joinAtHead) throws KeeperException, InterruptedException, IOException { context.joinedElectionFired(); final String shardsElectZkPath = context.electionPath + LeaderElector.ELECTION_NODE; long sessionId = zkClient.getSolrZooKeeper().getSessionId(); String id = sessionId + \"-\" + context.id; String leaderSeqPath = null; boolean cont = true; int tries = 0; while (cont) { try { if(joinAtHead){ log.info(\"node {} Trying to join election at the head \", id); /** * \"/overseer_elect/election\"中序号最小的节点为leader * 类似n_0000000001 or n_0000000003中较小的节点 */ List&lt;String&gt; nodes = OverseerCollectionProcessor.getSortedElectionNodes(zkClient); if(nodes.size() &lt;2){ leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null, CreateMode.EPHEMERAL_SEQUENTIAL, false); } else { String firstInLine = nodes.get(1); log.info(\"The current head: {}\", firstInLine); Matcher m = LEADER_SEQ.matcher(firstInLine); if (!m.matches()) { throw new IllegalStateException(\"Could not find regex match in:\" + firstInLine); } leaderSeqPath = shardsElectZkPath + \"/\" + id + \"-n_\"+ m.group(1); zkClient.create(leaderSeqPath, null, CreateMode.EPHEMERAL, false); log.info(\"Joined at the head {}\", leaderSeqPath ); } } else { leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null, CreateMode.EPHEMERAL_SEQUENTIAL, false); } context.leaderSeqPath = leaderSeqPath; cont = false; } catch (ConnectionLossException e) { // we don't know if we made our node or not... List&lt;String&gt; entries = zkClient.getChildren(shardsElectZkPath, null, true); boolean foundId = false; for (String entry : entries) { String nodeId = getNodeId(entry); if (id.equals(nodeId)) { // we did create our node... foundId = true; break; } } if (!foundId) { cont = true; if (tries++ &gt; 20) { throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e); } try { Thread.sleep(50); } catch (InterruptedException e2) { Thread.currentThread().interrupt(); } } } catch (KeeperException.NoNodeException e) { // we must have failed in creating the election node - someone else must // be working on it, lets try again if (tries++ &gt; 20) { context = null; throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e); } cont = true; try { Thread.sleep(50); } catch (InterruptedException e2) { Thread.currentThread().interrupt(); } } } int seq = getSeq(leaderSeqPath); // checkIfIamLeader(seq, context, replacement); return seq;}暂且不关注joinAtHead这段,首先创建的节点是(shardsElectZkPath + “/” + id + “-n_”),注意这里-n_后边是没有序列号的(类似/overseer_elect/election/166405419031556844-172.17.52.154:8080solr-n，正常的应该是/overseer_elect/election/166405419031556844-172.17.52.154:8080_solr-n_0000000117)，最多尝试20次，这样会导致后边拿到的int行seq为0，自然是最小的？ leaderSeqPath = zkClient.create(shardsElectZkPath + \"/\" + id + \"-n_\", null, CreateMode.EPHEMERAL_SEQUENTIAL, false);getSeq从n_0000000117的串中取出int序列号，这里的nStringSequence是n_xxxxxxxpublic static int getSeq(String nStringSequence) { int seq = 0; Matcher m = LEADER_SEQ.matcher(nStringSequence); if (m.matches()) { seq = Integer.parseInt(m.group(1)); } else { throw new IllegalStateException(\"Could not find regex match in:\" + nStringSequence); } return seq;}在checkIfIamLeader()中判断自己是不是leader,首先与最小的比较，如果小于或等于最小的加入选举，不然找到自己的最靠前的位置(就是插入到seqs保持seqs从小到大排列不变)，并插入，并对前一个节点(这里的index为i - 2，因为i就是找到的比自己大的，i-1就是本身)进行监听 /** * Check if the candidate with the given n_* sequence number is the leader. * If it is, set the leaderId on the leader zk node. If it is not, start * watching the candidate that is in line before this one - if it goes down, check * if this candidate is the leader again. * * @param replacement has someone else been the leader already? */ private void checkIfIamLeader(final int seq, final ElectionContext context, boolean replacement) throws KeeperException, InterruptedException, IOException { context.checkIfIamLeaderFired(); // get all other numbers... final String holdElectionPath = context.electionPath + ELECTION_NODE; List&lt;String&gt; seqs = zkClient.getChildren(holdElectionPath, null, true); sortSeqs(seqs); List&lt;Integer&gt; intSeqs = getSeqs(seqs); if (intSeqs.size() == 0) { log.warn(\"Our node is no longer in line to be leader\"); return; } if (seq &lt;= intSeqs.get(0)) { if(seq == intSeqs.get(0) &amp;&amp; !context.leaderSeqPath.equals(holdElectionPath+\"/\"+seqs.get(0)) ) {//somebody else already became the leader with the same sequence id , not me log.info(\"was going be leader {} , seq(0) {}\",context.leaderSeqPath,holdElectionPath+\"/\"+seqs.get(0));//but someone else jumped the line retryElection(context,false);//join at the tail again return; } // first we delete the node advertising the old leader in case the ephem is still there // first we delete the node advertising the old leader in case the ephem is still there try { // 通通先删除再说，后边我会自己注册上去的 zkClient.delete(context.leaderPath, -1, true); }catch (KeeperException.NoNodeException nne){ //no problem }catch (InterruptedException e){ throw e; } catch (Exception e) { //failed to delete the leader node log.error(\"leader elect delete error\",e); retryElection(context, false); return; // fine } try { //我要自己注册上去了，登基成leader了 runIamLeaderProcess(context, replacement); } catch (KeeperException.NodeExistsException e) { log.error(\"node exists\",e); retryElection(context, false); return; } } else { // I am not the leader - watch the node below me int i = 1; for (; i &lt; intSeqs.size(); i++) { int s = intSeqs.get(i); if (seq &lt; s) { // we found who we come before - watch the guy in front break; } } int index = i - 2; if (index &lt; 0) { log.warn(\"Our node is no longer in line to be leader\"); return; } try { String watchedNode = holdElectionPath + \"/\" + seqs.get(index); zkClient.getData(watchedNode, watcher = new ElectionWatcher(context.leaderSeqPath , watchedNode,seq, context) , null, true); } catch (KeeperException.SessionExpiredException e) { throw e; } catch (KeeperException e) { log.warn(\"Failed setting watch\", e); // we couldn't set our watch - the node before us may already be down? // we need to check if we are the leader again checkIfIamLeader(seq, context, true); } } }判定自己为leader后,在runIamLeaderProcess里调用OverseerElectionContext.runLeaderProcess()需要将节点id(如：{“id”:”166405419031556837-172.17.52.155:8080_solr-n_0000000115”})到/overseer_elect/leader，void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs) throws KeeperException, InterruptedException { log.info(\"I am going to be the leader {}\", id); final String id = leaderSeqPath .substring(leaderSeqPath.lastIndexOf(\"/\") + 1); ZkNodeProps myProps = new ZkNodeProps(\"id\", id); zkClient.makePath(leaderPath, ZkStateReader.toJSON(myProps), CreateMode.EPHEMERAL, true); if(pauseBeforeStartMs &gt;0){ try { Thread.sleep(pauseBeforeStartMs); } catch (InterruptedException e) { Thread.interrupted(); log.warn(\"Wait interrupted \", e); } } overseer.start(id);}collection的shard的leader选举 主要相关的类：ShardLeaderElectionContext 相关节点：/collections/collection/leader_elect/shard1/election(shardN表示这个collection得shard)可以说某个shard对应的leader候选节点，/collections/collection/leaders/shard1是选举出来的leader [zk: 172.16.113.253:2182,172.16.113.254:2182(CONNECTED) 8] ls /collections/song/leader_elect/shard1/election[166405419031556844-core_node1-n_0000000028, 166405419031556837-core_node2-n_0000000026][zk: 172.16.113.253:2182,172.16.113.254:2182(CONNECTED) 9] get /collections/song/leaders/shard1 { \"core\":\"song_shard1_replica1\", \"node_name\":\"172.17.52.155:8080_solr\", \"base_url\":\"http://172.17.52.155:8080/solr\"}cZxid = 0x36002d5ea2ctime = Tue Sep 06 05:18:13 EDT 2016mZxid = 0x36002d5ea2mtime = Tue Sep 06 05:18:13 EDT 2016pZxid = 0x36002d5ea2cversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x24f30d8d21372e5dataLength = 125numChildren = 0Shard的leader选举的大致流程调用关系SolrDispatchFilter.init()–&gt;SolrDispatchFilter.createCoreContainer()–&gt;CoreContainer.load()–&gt;CoreContainer.create()–&gt;CoreContainer.registerCore–&gt;ZkContainer.registerInZk()–&gt;ZkController.register–&gt;ZkController.joinElectionZkController.joinElection中 private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException { // look for old context - if we find it, cancel it String collection = cd.getCloudDescriptor().getCollectionName(); final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName(); ContextKey contextKey = new ContextKey(collection, coreNodeName); ElectionContext prevContext = electionContexts.get(contextKey); if (prevContext != null) { prevContext.cancelElection(); } String shardId = cd.getCloudDescriptor().getShardId(); Map&lt;String,Object&gt; props = new HashMap&lt;&gt;(); // we only put a subset of props into the leader node props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl()); props.put(ZkStateReader.CORE_NAME_PROP, cd.getName()); props.put(ZkStateReader.NODE_NAME_PROP, getNodeName()); ZkNodeProps ourProps = new ZkNodeProps(props); ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId, collection, coreNodeName, ourProps, this, cc); leaderElector.setup(context); electionContexts.put(contextKey, context); leaderElector.joinElection(context, false); }选举逻辑也是那两行代码，不过context现在是ShardLeaderElectionContextoverseerElector.setup(context);overseerElector.joinElection(context, false);其他逻辑与集群大致一样，选择/collections/collection/leader_elect/shard1/election下seq最小的最为leader，将leader信息set到/collections/collection/leaders/shard1节点；最后runIamLeaderProcess中调用ShardLeaderElectionContext的runLeaderProcess，这段才是最大的差别context.runLeaderProcess(weAreReplacement,0); @Override void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStart) throws KeeperException, InterruptedException, IOException { log.info(\"Running the leader process for shard \" + shardId); String coreName = leaderProps.getStr(ZkStateReader.CORE_NAME_PROP); // clear the leader in clusterstate ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, ZkStateReader.LEADER_PROP, ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP, collection); Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m)); int leaderVoteWait = cc.getZkController().getLeaderVoteWait(); if (!weAreReplacement) { waitForReplicasToComeUp(weAreReplacement, leaderVoteWait); } try (SolrCore core = cc.getCore(coreName)) { if (core == null) { cancelElection(); throw new SolrException(ErrorCode.SERVER_ERROR, \"Fatal Error, SolrCore not found:\" + coreName + \" in \" + cc.getCoreNames()); } // should I be leader? if (weAreReplacement &amp;&amp; !shouldIBeLeader(leaderProps, core, weAreReplacement)) { rejoinLeaderElection(leaderSeqPath, core); return; } log.info(\"I may be the new leader - try and sync\"); // we are going to attempt to be the leader // first cancel any current recovery core.getUpdateHandler().getSolrCoreState().cancelRecovery(); if (weAreReplacement) { // wait a moment for any floating updates to finish try { Thread.sleep(2500); } catch (InterruptedException e) { Thread.currentThread().interrupt(); throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, e); } } boolean success = false; try { success = syncStrategy.sync(zkController, core, leaderProps, weAreReplacement); } catch (Exception e) { SolrException.log(log, \"Exception while trying to sync\", e); success = false; } UpdateLog ulog = core.getUpdateHandler().getUpdateLog(); if (!success) { boolean hasRecentUpdates = false; if (ulog != null) { // TODO: we could optimize this if necessary UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates(); try { hasRecentUpdates = !recentUpdates.getVersions(1).isEmpty(); } finally { recentUpdates.close(); } } if (!hasRecentUpdates) { // we failed sync, but we have no versions - we can't sync in that case // - we were active // before, so become leader anyway log.info(\"We failed sync, but we have no versions - we can't sync in that case - we were active before, so become leader anyway\"); success = true; } } // solrcloud_debug if (log.isDebugEnabled()) { try { RefCounted&lt;SolrIndexSearcher&gt; searchHolder = core .getNewestSearcher(false); SolrIndexSearcher searcher = searchHolder.get(); try { log.debug(core.getCoreDescriptor().getCoreContainer() .getZkController().getNodeName() + \" synched \" + searcher.search(new MatchAllDocsQuery(), 1).totalHits); } finally { searchHolder.decref(); } } catch (Exception e) { throw new SolrException(ErrorCode.SERVER_ERROR, null, e); } } if (!success) { rejoinLeaderElection(leaderSeqPath, core); return; } log.info(\"I am the new leader: \" + ZkCoreNodeProps.getCoreUrl(leaderProps) + \" \" + shardId); core.getCoreDescriptor().getCloudDescriptor().setLeader(true); } boolean isLeader = true; try { super.runLeaderProcess(weAreReplacement, 0); } catch (Exception e) { isLeader = false; SolrException.log(log, \"There was a problem trying to register as the leader\", e); try (SolrCore core = cc.getCore(coreName)) { if (core == null) { log.debug(\"SolrCore not found:\" + coreName + \" in \" + cc.getCoreNames()); return; } core.getCoreDescriptor().getCloudDescriptor().setLeader(false); // we could not publish ourselves as leader - try and rejoin election rejoinLeaderElection(leaderSeqPath, core); } } if (isLeader) { // check for any replicas in my shard that were set to down by the previous leader try { startLeaderInitiatedRecoveryOnReplicas(coreName); } catch (Exception exc) { // don't want leader election to fail because of // an error trying to tell others to recover } } }如果选举leader成功还要做相关的Recovery工作，会启动一个LeaderInitiatedRecoveryThread线程startLeaderInitiatedRecoveryOnReplicas(coreName);在LeaderInitiatedRecoveryThread线程中通过HttpSolrServer发送Recovery请求,中间省略部分代码RequestRecovery recoverRequestCmd = new RequestRecovery();recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);recoverRequestCmd.setCoreName(coreNeedingRecovery);HttpSolrServer server = new HttpSolrServer(recoveryUrl);server.setSoTimeout(60000);server.setConnectionTimeout(15000);server.request(recoverRequestCmd);在CoreAdminHandler的handleRequestInternal可以找到对应Action的处理逻辑case REQUESTRECOVERY: { this.handleRequestRecoveryAction(req, rsp); break;}SolrCloud GroupCaused by: java.lang.OutOfMemoryError: Java heap space at org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.&lt;init&gt;(SegmentTermsEnumFrame.java:53) at org.apache.lucene.codecs.blocktree.SegmentTermsEnum.&lt;init&gt;(SegmentTermsEnum.java:78) at org.apache.lucene.codecs.blocktree.FieldReader.iterator(FieldReader.java:156) at org.apache.lucene.index.ExitableDirectoryReader$ExitableTerms.iterator(ExitableDirectoryReader.java:141) at org.apache.lucene.index.TermContext.build(TermContext.java:94) at org.apache.lucene.search.TermQuery.createWeight(TermQuery.java:191) at org.apache.lucene.search.IndexSearcher.createWeight(IndexSearcher.java:851) at org.apache.lucene.search.BooleanWeight.&lt;init&gt;(BooleanWeight.java:57) at org.apache.lucene.search.BooleanQuery.createWeight(BooleanQuery.java:184) at org.apache.lucene.search.IndexSearcher.createWeight(IndexSearcher.java:851) at org.apache.lucene.search.BooleanWeight.&lt;init&gt;(BooleanWeight.java:57) at org.apache.lucene.search.BooleanQuery.createWeight(BooleanQuery.java:184) at org.apache.lucene.search.FilteredQuery.createWeight(FilteredQuery.java:81) at org.apache.lucene.search.IndexSearcher.createWeight(IndexSearcher.java:851) at org.apache.lucene.search.IndexSearcher.createNormalizedWeight(IndexSearcher.java:834) at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:485) at org.apache.solr.search.Grouping.searchWithTimeLimiter(Grouping.java:456) at org.apache.solr.search.Grouping.execute(Grouping.java:407) at org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:492) at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:255) at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:143) at org.apache.solr.core.SolrCore.execute(SolrCore.java:2064) at org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:654) at org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:450) at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:227) at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:196) at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652) at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585) at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577) at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223) at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)solr3.5 分布式groupby源码分析" }, { "title": "Elasticsearch堆大小与swap设置 ", "url": "/posts/Elasticsearch/", "categories": "Lucene", "tags": "Lucene, Search, Elasticsearch", "date": "2015-10-19 00:00:00 +0000", "snippet": "Heap: Sizing and SwappingHeap: Sizing and Swapping Give Half Your Memory To Lucene Don’t Cross 30.5G Swapping Is the Death of Performance" }, { "title": "ScyllaDB: world's fastest NoSQL column store database(claims to be up to 10x faster)", "url": "/posts/ScyllaDb/", "categories": "distributed", "tags": "distributed, ScyllaDB, Cassandra", "date": "2015-09-26 00:00:00 +0000", "snippet": "ScyllaDB: world’s fastest NoSQL column store database(claims to be up to 10x faster) 1 000 000 transactions per second per server" }, { "title": "Cassandra种种", "url": "/posts/Cassandra/", "categories": "distributed", "tags": "distributed, Cassandra", "date": "2015-09-18 00:00:00 +0000", "snippet": "一致性等级ConsistencyLevelConfiguring data consistency-官方文档Apache Cassandra™ 2.0ANY (0),ONE (1),TWO (2),THREE (3),QUORUM (4),ALL (5),LOCAL_QUORUM(6, true),EACH_QUORUM (7),SERIAL (8),LOCAL_SERIAL(9),LOCAL_ONE (10, true);维护最终一致性 逆熵（Anti-Entropy）读修复（Read Repair）提示移交（Hinted Handoff）分布式删除" }, { "title": "Solr5自定义逗号分词器", "url": "/posts/solr5Tokenizer/", "categories": "distributed", "tags": "distributed, Search", "date": "2015-09-18 00:00:00 +0000", "snippet": "参考WhitespaceTokenizer写一个叫CommaTokenizer的Tokenizer，继承CharTokenizerpackage com.xxx.yyy.zzz.analyzer;import org.apache.lucene.analysis.core.WhitespaceTokenizerFactory;import org.apache.lucene.analysis.util.CharTokenizer;import org.apache.lucene.util.AttributeFactory;/** * CommaTokenizer * * may see {@link WhitespaceTokenizerFactory} */public final class CommaTokenizer extends CharTokenizer {\tpublic CommaTokenizer() {\t}\tpublic CommaTokenizer(AttributeFactory factory) {\t\tsuper(factory);\t}\t@Override\tprotected boolean isTokenChar(int c) {\t\treturn !(c == 44);\t\t// return !Character.isWhitespace(c);\t}}参考WhitespaceTokenizer写一个叫CommaTokenizerFactory的TokenizerFactory，继承TokenizerFactorypackage com.xxx.yyy.xxx.analyzer;import org.apache.lucene.analysis.core.WhitespaceTokenizerFactory;import org.apache.lucene.analysis.util.TokenizerFactory;import org.apache.lucene.util.AttributeFactory;import java.util.Map;public class CommaTokenizerFactory extends TokenizerFactory { public CommaTokenizerFactory(Map&lt;String,String&gt; args) { super(args); if (!args.isEmpty()) { throw new IllegalArgumentException(\"Unknown parameters: \" + args); } } @Override public CommaTokenizer create(AttributeFactory factory) { return new CommaTokenizer(factory); }}schema定义与配置&lt;field name=\"comma_name\" type=\"comma_str\" indexed=\"true\" stored=\"true\" omitNorms=\"true\"/&gt;&lt;field name=\"comma_pattern_name\" type=\"comma_pattern\" indexed=\"true\" stored=\"true\" omitNorms=\"true\"/&gt;&lt;fieldType name=\"comma_str\" class=\"solr.TextField\" positionIncrementGap=\"100\"&gt; &lt;analyzer&gt; &lt;tokenizer class=\"com.xxx.yyy.zzz.CommaTokenizerFactory\"/&gt; &lt;/analyzer&gt;&lt;/fieldType&gt;&lt;fieldType name=\"comma_pattern\" class=\"solr.TextField\" positionIncrementGap=\"100\"&gt; &lt;analyzer&gt; &lt;tokenizer class=\"solr.PatternTokenizerFactory\" pattern=\", *\" /&gt; &lt;/analyzer&gt;&lt;/fieldType&gt;没错，这玩意也可以用PatternTokenizerFactory搞定 ElasticSearch+Solr几个案例笔记" }, { "title": "libsvm And liblinear", "url": "/posts/libsvmAndliblinear/", "categories": "Datascience", "tags": "ML, Datascience", "date": "2015-09-17 00:00:00 +0000", "snippet": "目前使用的Java版本pom依赖\t&lt;dependency&gt;\t\t&lt;groupId&gt;tw.edu.ntu.csie&lt;/groupId&gt;\t\t&lt;artifactId&gt;libsvm&lt;/artifactId&gt;\t\t&lt;version&gt;3.17&lt;/version&gt;\t&lt;/dependency&gt;\t\t&lt;dependency&gt;\t\t&lt;groupId&gt;de.bwaldvogel&lt;/groupId&gt;\t\t&lt;artifactId&gt;liblinear&lt;/artifactId&gt;\t\t&lt;version&gt;1.95&lt;/version&gt;\t&lt;/dependency&gt;数据（下标，值（index,value））封装，Java版还是看liblinear,libsvm是C风格的各种不习惯。FeatureNode代表一条数据，包含index,valuepublic class FeatureNode implements Feature { public final int index; public double value; public FeatureNode( final int index, final double value ) { if (index &lt; 0) throw new IllegalArgumentException(\"index must be &gt;= 0\"); this.index = index; this.value = value; } /** * @since 1.9 */ public int getIndex() { return index; } /** * @since 1.9 */ public double getValue() { return value; } /** * @since 1.9 */ public void setValue(double value) { this.value = value; } @Override public int hashCode() { final int prime = 31; int result = 1; result = prime * result + index; long temp; temp = Double.doubleToLongBits(value); result = prime * result + (int)(temp ^ (temp &gt;&gt;&gt; 32)); return result; } @Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; FeatureNode other = (FeatureNode)obj; if (index != other.index) return false; if (Double.doubleToLongBits(value) != Double.doubleToLongBits(other.value)) return false; return true; } @Override public String toString() { return \"FeatureNode(idx=\" + index + \", value=\" + value + \")\"; }" }, { "title": "Solr5.x &&SolrCloud", "url": "/posts/Solr5/", "categories": "distributed", "tags": "distributed, Search", "date": "2015-09-17 00:00:00 +0000", "snippet": "Solr5 相比Solr4或更低版本，感觉最大的Future就是不依赖于其他Serlet容器了。不再需要部署war到Jetty或者Tomcat了。酸爽！单独的服务进程。算是开包装即用，离ES又近了一步！通过zkcli.sh更新配置Lucene5.x-ReleaseNoteSolr5.0-ReleaseNoteCollections API删除一个collection,collection名字+action=DELETEhttp://host:port/solr/admin/collections?action=DELETE&amp;name=gamereloadhttp://localhost:8983/solr/admin/collections?action=RELOAD&amp;name=gameCLUSTERSTATUShttp://172.16.82.188:8983/solr/admin/collections?action=CLUSTERSTATUS用collection用zkCli.sh比较方便,其中/data/solr/game 就是conf文件路径，包括solr.xml,solrconfig.xml,schema.xml等./bin/solr create_collection -c game -d /data/solr/game -shards 2 -replicationFactor 1启动solrcloud，只需每台执行./bin/solr start -c -m 2g -z zkhost:zkport还有个问题是如果连接的zk串使用chroot,需要bootstrap./server/scripts/cloud-scripts/zkcli.sh -zkhost 127.0.0.1:2181 \\ -cmd bootstrap -solrhome /server/solr创建core./bin/solr create_collection -c appcloud -d /data/solr/theme-cloud -shards 3 -replicationFactor 2创建到指定节点http://host1:port/solr/admin/collections?action=CREATE&amp;name=music&amp;collection.configName=music&amp;numShards=1&amp;replicationFactor=2&amp;maxShardsPerNode=1&amp;createNodeSet=host2:8080_solr,host3:8080_solrCLUSTERSTATUS请求URLhttp://host:port/solr/admin/collections?action=CLUSTERSTATUS返回值，这里还是看appcloud的&lt;response&gt; &lt;lst name=\"responseHeader\"&gt; &lt;int name=\"status\"&gt;0&lt;/int&gt; &lt;int name=\"QTime\"&gt;45&lt;/int&gt; &lt;/lst&gt; &lt;lst name=\"cluster\"&gt; &lt;lst name=\"collections\"&gt; &lt;lst name=\"app_package\"&gt;...&lt;/lst&gt; &lt;lst name=\"appcloud\"&gt; &lt;lst name=\"shards\"&gt; &lt;lst name=\"shard1\"&gt; &lt;str name=\"range\"&gt;80000000-d554ffff&lt;/str&gt; &lt;str name=\"state\"&gt;active&lt;/str&gt; &lt;lst name=\"replicas\"&gt; &lt;lst name=\"core_node3\"&gt; &lt;str name=\"state\"&gt;active&lt;/str&gt; &lt;str name=\"core\"&gt;appcloud_shard1_replica2&lt;/str&gt; &lt;str name=\"node_name\"&gt;172.16.82.186:8983_solr&lt;/str&gt; &lt;str name=\"base_url\"&gt;http://172.16.82.186:8983/solr&lt;/str&gt; &lt;/lst&gt; &lt;lst name=\"core_node6\"&gt; &lt;str name=\"state\"&gt;active&lt;/str&gt; &lt;str name=\"core\"&gt;appcloud_shard1_replica1&lt;/str&gt; &lt;str name=\"node_name\"&gt;172.16.82.186:9000_solr&lt;/str&gt; &lt;str name=\"base_url\"&gt;http://172.16.82.186:9000/solr&lt;/str&gt; &lt;str name=\"leader\"&gt;true&lt;/str&gt; &lt;/lst&gt; &lt;/lst&gt; &lt;/lst&gt; &lt;lst name=\"shard2\"&gt; &lt;str name=\"range\"&gt;d5550000-2aa9ffff&lt;/str&gt; &lt;str name=\"state\"&gt;active&lt;/str&gt; &lt;lst name=\"replicas\"&gt; &lt;lst name=\"core_node4\"&gt; &lt;str name=\"state\"&gt;active&lt;/str&gt; &lt;str name=\"core\"&gt;appcloud_shard2_replica2&lt;/str&gt; &lt;str name=\"node_name\"&gt;172.16.82.186:9000_solr&lt;/str&gt; &lt;str name=\"base_url\"&gt;http://172.16.82.186:9000/solr&lt;/str&gt; &lt;/lst&gt; &lt;lst name=\"core_node5\"&gt; &lt;str name=\"state\"&gt;active&lt;/str&gt; &lt;str name=\"core\"&gt;appcloud_shard2_replica1&lt;/str&gt; &lt;str name=\"node_name\"&gt;172.16.82.188:8983_solr&lt;/str&gt; &lt;str name=\"base_url\"&gt;http://172.16.82.188:8983/solr&lt;/str&gt; &lt;str name=\"leader\"&gt;true&lt;/str&gt; &lt;/lst&gt; &lt;/lst&gt; &lt;/lst&gt; &lt;lst name=\"shard3\"&gt; &lt;str name=\"range\"&gt;2aaa0000-7fffffff&lt;/str&gt; &lt;str name=\"state\"&gt;active&lt;/str&gt; &lt;lst name=\"replicas\"&gt; &lt;lst name=\"core_node1\"&gt; &lt;str name=\"state\"&gt;active&lt;/str&gt; &lt;str name=\"core\"&gt;appcloud_shard3_replica1&lt;/str&gt; &lt;str name=\"node_name\"&gt;172.16.82.186:8983_solr&lt;/str&gt; &lt;str name=\"base_url\"&gt;http://172.16.82.186:8983/solr&lt;/str&gt; &lt;/lst&gt; &lt;lst name=\"core_node2\"&gt; &lt;str name=\"state\"&gt;active&lt;/str&gt; &lt;str name=\"core\"&gt;appcloud_shard3_replica2&lt;/str&gt; &lt;str name=\"node_name\"&gt;172.16.82.188:8983_solr&lt;/str&gt; &lt;str name=\"base_url\"&gt;http://172.16.82.188:8983/solr&lt;/str&gt; &lt;str name=\"leader\"&gt;true&lt;/str&gt; &lt;/lst&gt; &lt;/lst&gt; &lt;/lst&gt; &lt;/lst&gt; &lt;str name=\"maxShardsPerNode\"&gt;2&lt;/str&gt; &lt;lst name=\"router\"&gt; &lt;str name=\"name\"&gt;compositeId&lt;/str&gt; &lt;/lst&gt; &lt;str name=\"replicationFactor\"&gt;2&lt;/str&gt; &lt;str name=\"autoAddReplicas\"&gt;false&lt;/str&gt; &lt;str name=\"configName\"&gt;appcloud&lt;/str&gt; &lt;/lst&gt; &lt;lst name=\"game1\"&gt;...&lt;/lst&gt; &lt;lst name=\"theme101\"&gt;...&lt;/lst&gt; &lt;lst name=\"theme\"&gt;...&lt;/lst&gt; &lt;/lst&gt; &lt;arr name=\"live_nodes\"&gt; &lt;str&gt;172.16.82.188:8983_solr&lt;/str&gt; &lt;str&gt;172.16.82.186:9000_solr&lt;/str&gt; &lt;str&gt;172.16.82.186:8983_solr&lt;/str&gt; &lt;/arr&gt; &lt;/lst&gt;&lt;/response&gt;boostHow_can_I_boost_the_score_of_newer_documentshow-to-boost-fields-in-solrFunctionQueryproduct 乘法ClientUtils.escapeQueryChars与QueryParser.escape()的异同很明显，QueryParser.escape()不对空格做处理，可以将空格转义成其他符号如”\\“,如可以将”Better Than Revenge”转换成”Better\\Than\\ Revenge”ClientUtils.escapeQueryCharspublic static String escapeQueryChars(String s) { StringBuilder sb = new StringBuilder(); for (int i = 0; i &lt; s.length(); i++) { char c = s.charAt(i); // These characters are part of the query syntax and must be escaped if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~' || c == '*' || c == '?' || c == '|' || c == '&amp;' || c == ';' || c == '/' || Character.isWhitespace(c)) { sb.append('\\\\'); } sb.append(c); } return sb.toString(); }QueryParser.escape() public static String escape(String s) { StringBuilder sb = new StringBuilder(); for (int i = 0; i &lt; s.length(); i++) { char c = s.charAt(i); // These characters are part of the query syntax and must be escaped if (c == '\\\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '\\\"' || c == '{' || c == '}' || c == '~' || c == '*' || c == '?' || c == '|' || c == '&amp;' || c == '/') { sb.append('\\\\'); } sb.append(c); } return sb.toString(); }扩展词库更新$ ls solr-5.2.1/server/solr-webapp/webapp/WEB-INF/classes/ext.dic IKAnalyzer.cfg.xml stopword.dic前缀搜索中的坑，形如songname:(Better Than Reveng*),歌名为Better Than Revenge，搜索词中间包含空格(对query进行trim()比不可少)&lt;field name=\"suggest_field\" type=\"suggest_type\" indexed=\"true\" stored=\"false\"/&gt;&lt;copyField source=\"name\" dest=\"suggest_field\"/&gt;&lt;fieldType name=\"suggest_type\" class=\"solr.TextField\"\tpositionIncrementGap=\"100\"&gt;\t&lt;analyzer type=\"index\"&gt;\t\t&lt;charFilter class=\"solr.PatternReplaceCharFilterFactory\"\t\t\tpattern=\"\\s*\" replacement=\"\" /&gt;\t\t&lt;filter class=\"solr.LowerCaseFilterFactory\" /&gt;\t\t&lt;filter class=\"solr.TrimFilterFactory\" /&gt;\t\t&lt;tokenizer class=\"solr.KeywordTokenizerFactory\" /&gt;\t&lt;/analyzer&gt;\t&lt;analyzer type=\"query\"&gt;\t\t&lt;charFilter class=\"solr.PatternReplaceCharFilterFactory\"\t\t\tpattern=\"\\s*\" replacement=\"\" /&gt;\t\t&lt;filter class=\"solr.LowerCaseFilterFactory\" /&gt;\t\t&lt;filter class=\"solr.TrimFilterFactory\" /&gt;\t\t&lt;tokenizer class=\"solr.KeywordTokenizerFactory\" /&gt;\t&lt;/analyzer&gt;&lt;/fieldType&gt;&lt;fieldType name=\"suggest_string\" class=\"solr.TextField\"\tpositionIncrementGap=\"100\"&gt;\t&lt;analyzer type=\"index\"&gt;\t\t&lt;tokenizer class=\"solr.NGramTokenizerFactory\" minGramSize=\"2\"\t\t\tmaxGramSize=\"250\" /&gt;\t\t&lt;filter class=\"solr.LowerCaseFilterFactory\" /&gt;\t\t&lt;filter class=\"solr.TrimFilterFactory\" /&gt;\t\t&lt;filter class=\"solr.PatternReplaceFilterFactory\" pattern=\"([/\\s+])\"\t\t\treplacement=\"-\" replace=\"all\" /&gt;\t&lt;/analyzer&gt;\t&lt;analyzer type=\"query\"&gt;\t\t&lt;tokenizer class=\"solr.EdgeNGramTokenizerFactory\"\t\t\tminGramSize=\"2\" maxGramSize=\"250\" /&gt;\t\t&lt;filter class=\"solr.LowerCaseFilterFactory\" /&gt;\t\t&lt;filter class=\"solr.TrimFilterFactory\" /&gt;\t\t&lt;filter class=\"solr.PatternReplaceFilterFactory\" pattern=\"([/\\s+])\"\t\t\treplacement=\"-\" replace=\"all\" /&gt;\t&lt;/analyzer&gt;&lt;/fieldType&gt;参考链接Solr wildcard query with whitespace" }, { "title": "Elasticsearch笔记", "url": "/posts/Elasticsearch-notes/", "categories": "distributed", "tags": "distributed, Search, Elasticsearch", "date": "2015-09-17 00:00:00 +0000", "snippet": "安装配置这里使用的2.3.3版本，这个版本默认不能用root直接启动。具体参考Bootstrap.java中的代码public static void initializeNatives(Path tmpFile, boolean mlockAll, boolean seccomp, boolean ctrlHandler) { final ESLogger logger = Loggers.getLogger(Bootstrap.class); // check if the user is running as root, and bail if (Natives.definitelyRunningAsRoot()) { if (Boolean.parseBoolean(System.getProperty(\"es.insecure.allow.root\"))) { logger.warn(\"running as ROOT user. this is a bad idea!\"); } else { throw new RuntimeException(\"don't run elasticsearch as root.\"); } }可以通过参数-Des.insecure.allow.root=true 来实现bin/elasticsearch -Des.insecure.allow.root=true 先给Elasticsearch启动，建立一个账户Elasticsearch运行账户：ElasticsearchElasticsearch环境路径：/data/elasticsearch新增用户并将/data/elasticsearch目录权限给Elasticsearch用户组(mac os新增用户elasticsearch，加入elasticsearch组)mkdir /data/elasticsearch/useradd elasticsearchpasswd elasticsearchchown -R elasticsearch:elasticsearch /data/elasticsearch/cd /data/elasticsearch/wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.3.3/elasticsearch-2.3.3.tar.gztar zxvf elasticsearch-2.3.3.tar.gz chown -R elasticsearch:elasticsearch elasticsearch-2.3.3su elasticsearchcd /data/elasticsearch/elasticsearch-2.3.3bin/elasticsearch安装ik分词,medcl大神更新很快wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v1.9.3/elasticsearch-analysis-ik-1.9.3.zipunzip elasticsearch-analysis-ik-1.9.3.zip -d ./plugins/ikcreate an index,pretty 返回数据格式不一样curl -XPUT 'localhost:9200/indexname'curl -XPUT 'localhost:9200/indexname?pretty'Index and Query a Documentindex a simple indexname document，indextypebash-3.2$ curl -XPUT 'localhost:9200/indexname/indextype/1?pretty' -d '{ \"name\": \"John Doe\"}'{ \"_index\" : \"indexname\", \"_type\" : \"indextype\", \"_id\" : \"1\", \"_version\" : 3, \"_shards\" : { \"total\" : 2, \"successful\" : 1, \"failed\" : 0 }, \"created\" : false}retrieve that documentcurl -XGET 'localhost:9200/indexname/indextype/1?pretty'{ \"_index\" : \"indexname\", \"_type\" : \"indextype\", \"_id\" : \"1\", \"_version\" : 3, \"found\" : true, \"_source\" : { \"name\" : \"John Doe\" }}list All indicesbash-3.2$ curl 'localhost:9200/_cat/indices?v'health status index pri rep docs.count docs.deleted store.size pri.store.sizeyellow open index 5 1 0 0 795b 795byellow open customer2 5 1 0 0 795b 795byellow open twitter 5 1 0 0 795b 795byellow open db_news 5 1 1 0 4.2kb 4.2kbyellow open indexname 5 1 1 0 7.1kb 7.1kbyellow open customer 5 1 1 0 3.5kb 3.5kbDelete an Indexbash-3.2$ curl -XDELETE 'localhost:9200/customer?pretty'{ \"acknowledged\" : true}bash-3.2$ curl -XDELETE 'localhost:9200/indexname?pretty'{ \"acknowledged\" : true}bash-3.2$ curl -XDELETE 'localhost:9200/customer2?pretty'{ \"acknowledged\" : true}ik分词测试sense建立type,newscurl -XPUT 'localhost:9200/index'mappingPOST /index/news/_mapping -d’{ fulltext: { \"_all\": { \"analyzer\": \"ik_max_word\", \"search_analyzer\": \"ik_max_word\", \"term_vector\": \"no\", \"store\": \"false\" }, \"properties\": { \"content\": { \"type\": \"string\", \"store\": \"no\", \"term_vector\": \"with_positions_offsets\", \"analyzer\": \"ik_max_word\", \"search_analyzer\": \"ik_max_word\", \"include_in_all\": \"true\", \"boost\": 8 } } }}索引bash-3.2$ curl -XPOST http://localhost:9200/index/news/1 -d '{\"content\":\"权力的游戏琼恩雪诺的身世彩蛋你有发现吗 琼恩雪诺的真实身世\"}'bash-3.2$ curl -XPOST http://localhost:9200/index/news/1 -d '{\"content\":\"iPhone 7为啥取消64GB？苹果太有心计\"}'bash-3.2$ curl -XPOST http://localhost:9200/index/news/1 -d '{\"content\":\"马克飞象是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述\"}'curl -XPOST http://localhost:9200/index/news/3 -d '{\"content\":\"身高差近30cm,王子文是怎么穿上吴亦凡的衣服的\"}'curl -XPOST http://localhost:9200/index/news/4 -d '{\"content\":\"霍建华胡歌邓超李易峰吴亦凡黄晓明 颜高任性！那些不受发型限制的男星\"}'curl -XPOST http://localhost:9200/index/news/2 -d '{\"content\":\"《欧洲攻略》热拍 梁朝伟吴亦凡唐嫣现身\"}'curl -XPOST http://localhost:9200/index/news/1 -d '{\"content\":\"吴亦凡被爆签约华谊 TFBOYS真实相貌疑曝光\"}'curl -XPOST http://localhost:9200/index/news/5 -d '{\"content\":\"干了6年都不觉得人家不称职，从冯大辉加入一路产品高歌猛进，融资一轮比一轮顺，都没觉得人家不称职，现在人家要走了，要兑现你许下的期权，人就突然不称职了，钱啊，真是照妖镜啊\"}'查询queryhttp://172.16.82.188:9200/index/news/_searchGET{ \"query\": { \"match_phrase\": { \"content\" : { \"query\" : \"冯大辉\" } } }}termGET {\"query\" : { \"term\" : { \"content\" : \"冯\" }}}boolean查询must,should,must_not must: 文档必须完全匹配条件 should: should下面会带一个以上的条件，至少满足一个条件，这个文档就符合should must_not: 文档必须不匹配条件 ####　elasticsearch5.1.1配置ERROR: bootstrap checks failedmax file descriptors [65535] for elasticsearch process is too low, increase to at least [65536]max number of threads [1024] for user [elasticsearch] is too low, increase to at least [2048]max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]修改vim /etc/security/limits.d/90-nproc.conf* soft nproc 2048root soft nproc unlimited修改vim /etc/security/limits.d/90-nproc.conf* soft nofile 65536* hard nofile 65536修改 /etc/sysctl.confsysctl -w vm.max_map_count=262144ansjcurl -XPUT 127.0.0.1:9200/test -d '{ \"settings\" : { \"number_of_shards\" : 1, \"number_of_replicas\" : 0 }, \"mappings\" : { \"test\" : { \"_all\" : { \"enabled\" : false }, \"properties\" : { \"name\" : { \"type\" : \"string\", \"analyzer\" : \"index_ansj\", \"search_analyzer\" : \"query_ansj\" } } } }}'indexcurl -XPUT 'http://127.0.0.1:9200/test/test/1' -d '{ \"name\" : \"中国人民万岁\", \"post_date\" : \"2009-11-15T14:12:12\", \"message\" : \"trying out Elasticsearch\"}'queryhttp://127.0.0.1:9200/test/test/_search?q=name:%E4%B8%AD%E5%9B%BDanalyze测试http://172.17.32.128:9200/_cat/test/analyze?text=%E4%B8%AD%E5%9B%BD%E6%9C%80%E5%A4%A7%E5%AF%B9%E4%BF%84%E9%99%86%E8%B7%AF%E5%8F%A3%E5%B2%B8%E8%BF%8E%E4%B8%AD%E5%9B%BD%E5%9C%A8%E4%BF%84%E5%8A%A1%E5%B7%A5%E4%BA%BA%E5%91%98%E8%BF%94%E4%B9%A1%E6%BD%AE&amp;analyzer=query_ansjcurl http://172.17.32.128:9200/_analyze?text=中国最大对俄陆路口岸迎中国在俄务工人员返乡潮&amp;analyzer=query_ansj&amp;pretty=true2.3版本的参考文档，可以看看Breaking changes 2.3-Breaking changes 2.2-Breaking changes 2.1-Breaking changes 2.0-Breaking changes 1.6-Breaking changes 1.4-Breaking changes 1.0-Breaking changes 参考 Search in Depth Elasticsearch 权威指南 Elasticsearch Reference2.3 Elasticsearch 权威指南翻译 " }, { "title": "Some Machine Learning Tutorials OR Examples ", "url": "/posts/ML-Tutorial/", "categories": "Datascience", "tags": "ML, Datascience", "date": "2015-09-16 00:00:00 +0000", "snippet": "Multiclass and multilabelOvR （One-Vs-The-Rest）基于iris数据集的多分类问题&gt;&gt;&gt; from sklearn import datasets&gt;&gt;&gt; from sklearn.multiclass import OneVsRestClassifier&gt;&gt;&gt; iris = datasets.load_iris()&gt;&gt;&gt; X, y = iris.data, iris.target&gt;&gt;&gt; from sklearn.svm import LinearSVC&gt;&gt;&gt; OneVsRestClassifier(LinearSVC(random_state=0)).fit(X, y).predict(X)OvO （One-Versus-One）&gt;&gt;&gt; from sklearn import datasets&gt;&gt;&gt; from sklearn.multiclass import OneVsOneClassifier&gt;&gt;&gt; from sklearn.svm import LinearSVC&gt;&gt;&gt; iris = datasets.load_iris()&gt;&gt;&gt; X, y = iris.data, iris.target&gt;&gt;&gt; OneVsOneClassifier(LinearSVC(random_state=0)).fit(X, y).predict(X)分类结果array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])其中iris属性数据iris.data 也就X。&gt;&gt;&gt; Xarray([[ 5.1, 3.5, 1.4, 0.2], [ 4.9, 3. , 1.4, 0.2], [ 4.7, 3.2, 1.3, 0.2], [ 4.6, 3.1, 1.5, 0.2], [ 5. , 3.6, 1.4, 0.2], [ 5.4, 3.9, 1.7, 0.4], [ 4.6, 3.4, 1.4, 0.3], [ 5. , 3.4, 1.5, 0.2], [ 4.4, 2.9, 1.4, 0.2], [ 4.9, 3.1, 1.5, 0.1], [ 5.4, 3.7, 1.5, 0.2], [ 4.8, 3.4, 1.6, 0.2], [ 4.8, 3. , 1.4, 0.1], [ 4.3, 3. , 1.1, 0.1], [ 5.8, 4. , 1.2, 0.2], [ 5.7, 4.4, 1.5, 0.4], [ 5.4, 3.9, 1.3, 0.4], [ 5.1, 3.5, 1.4, 0.3], [ 5.7, 3.8, 1.7, 0.3], [ 5.1, 3.8, 1.5, 0.3], [ 5.4, 3.4, 1.7, 0.2], [ 5.1, 3.7, 1.5, 0.4], [ 4.6, 3.6, 1. , 0.2], [ 5.1, 3.3, 1.7, 0.5], [ 4.8, 3.4, 1.9, 0.2], [ 5. , 3. , 1.6, 0.2], [ 5. , 3.4, 1.6, 0.4], [ 5.2, 3.5, 1.5, 0.2], [ 5.2, 3.4, 1.4, 0.2], [ 4.7, 3.2, 1.6, 0.2], [ 4.8, 3.1, 1.6, 0.2], [ 5.4, 3.4, 1.5, 0.4], [ 5.2, 4.1, 1.5, 0.1], [ 5.5, 4.2, 1.4, 0.2], [ 4.9, 3.1, 1.5, 0.1], [ 5. , 3.2, 1.2, 0.2], [ 5.5, 3.5, 1.3, 0.2], [ 4.9, 3.1, 1.5, 0.1], [ 4.4, 3. , 1.3, 0.2], [ 5.1, 3.4, 1.5, 0.2], [ 5. , 3.5, 1.3, 0.3], [ 4.5, 2.3, 1.3, 0.3], [ 4.4, 3.2, 1.3, 0.2], [ 5. , 3.5, 1.6, 0.6], [ 5.1, 3.8, 1.9, 0.4], [ 4.8, 3. , 1.4, 0.3], [ 5.1, 3.8, 1.6, 0.2], [ 4.6, 3.2, 1.4, 0.2], [ 5.3, 3.7, 1.5, 0.2], [ 5. , 3.3, 1.4, 0.2], [ 7. , 3.2, 4.7, 1.4], [ 6.4, 3.2, 4.5, 1.5], [ 6.9, 3.1, 4.9, 1.5], [ 5.5, 2.3, 4. , 1.3], [ 6.5, 2.8, 4.6, 1.5], [ 5.7, 2.8, 4.5, 1.3], [ 6.3, 3.3, 4.7, 1.6], [ 4.9, 2.4, 3.3, 1. ], [ 6.6, 2.9, 4.6, 1.3], [ 5.2, 2.7, 3.9, 1.4], [ 5. , 2. , 3.5, 1. ], [ 5.9, 3. , 4.2, 1.5], [ 6. , 2.2, 4. , 1. ], [ 6.1, 2.9, 4.7, 1.4], [ 5.6, 2.9, 3.6, 1.3], [ 6.7, 3.1, 4.4, 1.4], [ 5.6, 3. , 4.5, 1.5], [ 5.8, 2.7, 4.1, 1. ], [ 6.2, 2.2, 4.5, 1.5], [ 5.6, 2.5, 3.9, 1.1], [ 5.9, 3.2, 4.8, 1.8], [ 6.1, 2.8, 4. , 1.3], [ 6.3, 2.5, 4.9, 1.5], [ 6.1, 2.8, 4.7, 1.2], [ 6.4, 2.9, 4.3, 1.3], [ 6.6, 3. , 4.4, 1.4], [ 6.8, 2.8, 4.8, 1.4], [ 6.7, 3. , 5. , 1.7], [ 6. , 2.9, 4.5, 1.5], [ 5.7, 2.6, 3.5, 1. ], [ 5.5, 2.4, 3.8, 1.1], [ 5.5, 2.4, 3.7, 1. ], [ 5.8, 2.7, 3.9, 1.2], [ 6. , 2.7, 5.1, 1.6], [ 5.4, 3. , 4.5, 1.5], [ 6. , 3.4, 4.5, 1.6], [ 6.7, 3.1, 4.7, 1.5], [ 6.3, 2.3, 4.4, 1.3], [ 5.6, 3. , 4.1, 1.3], [ 5.5, 2.5, 4. , 1.3], [ 5.5, 2.6, 4.4, 1.2], [ 6.1, 3. , 4.6, 1.4], [ 5.8, 2.6, 4. , 1.2], [ 5. , 2.3, 3.3, 1. ], [ 5.6, 2.7, 4.2, 1.3], [ 5.7, 3. , 4.2, 1.2], [ 5.7, 2.9, 4.2, 1.3], [ 6.2, 2.9, 4.3, 1.3], [ 5.1, 2.5, 3. , 1.1], [ 5.7, 2.8, 4.1, 1.3], [ 6.3, 3.3, 6. , 2.5], [ 5.8, 2.7, 5.1, 1.9], [ 7.1, 3. , 5.9, 2.1], [ 6.3, 2.9, 5.6, 1.8], [ 6.5, 3. , 5.8, 2.2], [ 7.6, 3. , 6.6, 2.1], [ 4.9, 2.5, 4.5, 1.7], [ 7.3, 2.9, 6.3, 1.8], [ 6.7, 2.5, 5.8, 1.8], [ 7.2, 3.6, 6.1, 2.5], [ 6.5, 3.2, 5.1, 2. ], [ 6.4, 2.7, 5.3, 1.9], [ 6.8, 3. , 5.5, 2.1], [ 5.7, 2.5, 5. , 2. ], [ 5.8, 2.8, 5.1, 2.4], [ 6.4, 3.2, 5.3, 2.3], [ 6.5, 3. , 5.5, 1.8], [ 7.7, 3.8, 6.7, 2.2], [ 7.7, 2.6, 6.9, 2.3], [ 6. , 2.2, 5. , 1.5], [ 6.9, 3.2, 5.7, 2.3], [ 5.6, 2.8, 4.9, 2. ], [ 7.7, 2.8, 6.7, 2. ], [ 6.3, 2.7, 4.9, 1.8], [ 6.7, 3.3, 5.7, 2.1], [ 7.2, 3.2, 6. , 1.8], [ 6.2, 2.8, 4.8, 1.8], [ 6.1, 3. , 4.9, 1.8], [ 6.4, 2.8, 5.6, 2.1], [ 7.2, 3.2, 6. , 1.8], [ 6.2, 2.8, 4.8, 1.8], [ 6.1, 3. , 4.9, 1.8], [ 6.4, 2.8, 5.6, 2.1], [ 7.2, 3. , 5.8, 1.6], [ 7.4, 2.8, 6.1, 1.9], [ 7.9, 3.8, 6.4, 2. ], [ 6.4, 2.8, 5.6, 2.2], [ 6.3, 2.8, 5.1, 1.5], [ 6.1, 2.6, 5.6, 1.4], [ 7.7, 3. , 6.1, 2.3], [ 6.3, 3.4, 5.6, 2.4], [ 6.4, 3.1, 5.5, 1.8], [ 6. , 3. , 4.8, 1.8], [ 6.9, 3.1, 5.4, 2.1], [ 6.7, 3.1, 5.6, 2.4], [ 6.9, 3.1, 5.1, 2.3], [ 5.8, 2.7, 5.1, 1.9], [ 6.8, 3.2, 5.9, 2.3], [ 6.7, 3.3, 5.7, 2.5], [ 6.7, 3. , 5.2, 2.3], [ 6.3, 2.5, 5. , 1.9], [ 6.5, 3. , 5.2, 2. ], [ 6.2, 3.4, 5.4, 2.3], [ 5.9, 3. , 5.1, 1.8]])目标属性，iris.target&gt;&gt;&gt; yarray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])Gradient Boosting regressionprint(__doc__)# Author: Peter Prettenhofer &lt;peter.prettenhofer@gmail.com&gt;## License: BSD 3 clauseimport numpy as npimport matplotlib.pyplot as pltfrom sklearn import ensemblefrom sklearn import datasetsfrom sklearn.utils import shufflefrom sklearn.metrics import mean_squared_error################################################################################ Load databoston = datasets.load_boston()X, y = shuffle(boston.data, boston.target, random_state=13)X = X.astype(np.float32)offset = int(X.shape[0] * 0.9)X_train, y_train = X[:offset], y[:offset]X_test, y_test = X[offset:], y[offset:]################################################################################ Fit regression modelparams = {'n_estimators': 500, 'max_depth': 4, 'min_samples_split': 1, 'learning_rate': 0.01, 'loss': 'ls'}clf = ensemble.GradientBoostingRegressor(**params)clf.fit(X_train, y_train)mse = mean_squared_error(y_test, clf.predict(X_test))print(\"MSE: %.4f\" % mse)################################################################################ Plot training deviance# compute test set deviancetest_score = np.zeros((params['n_estimators'],), dtype=np.float64)for i, y_pred in enumerate(clf.staged_predict(X_test)): test_score[i] = clf.loss_(y_test, y_pred)plt.figure(figsize=(12, 6))plt.subplot(1, 2, 1)plt.title('Deviance')plt.plot(np.arange(params['n_estimators']) + 1, clf.train_score_, 'b-', label='Training Set Deviance')plt.plot(np.arange(params['n_estimators']) + 1, test_score, 'r-', label='Test Set Deviance')plt.legend(loc='upper right')plt.xlabel('Boosting Iterations')plt.ylabel('Deviance')################################################################################ Plot feature importancefeature_importance = clf.feature_importances_# make importances relative to max importancefeature_importance = 100.0 * (feature_importance / feature_importance.max())sorted_idx = np.argsort(feature_importance)pos = np.arange(sorted_idx.shape[0]) + .5plt.subplot(1, 2, 2)plt.barh(pos, feature_importance[sorted_idx], align='center')plt.yticks(pos, boston.feature_names[sorted_idx])plt.xlabel('Relative Importance')plt.title('Variable Importance')plt.show()结果" }, { "title": "TiDB-A Distributed SQL Database", "url": "/posts/DistributedDatabase/", "categories": "distributed", "tags": "distributed", "date": "2015-09-06 00:00:00 +0000", "snippet": "TiDB-A Distributed SQL DatabaseTiDB-A Distributed SQL Databasecockroach" }, { "title": "LIBSVM notes", "url": "/posts/LIBSVM/", "categories": "Datascience", "tags": "ML, Datascience", "date": "2015-09-05 00:00:00 +0000", "snippet": "LIBSVM – A Library for Support Vector Machinessvm的使用其中参数：-s SVC是SVM分类器，SVR是SVM回归0 -- C-SVC\t\t(multi-class classification)1 -- nu-SVC\t\t(multi-class classification)2 -- one-class SVM\t3 -- epsilon-SVR\t(regression)4 -- nu-SVR\t\t(regression)-t 核函数的类型: kernel_type : set type of kernel function (default 2)0 -- linear: u'*v1 -- polynomial: (gamma*u'*v + coef0)^degree2 -- radial basis function: exp(-gamma*|u-v|^2)3 -- sigmoid: tanh(gamma*u'*v + coef0)4 -- precomputed kernel (kernel values in training_set_file)分类,Classify a binary data with polynomial kernel (u’v+1)^3 and C = 10svmtrain -s 0 -c 10 -t 1 -g 1 -r 1 -d 3 回归svm_light - select between classification (c), regression (r), and preference ranking (p)LIBLINEAR – A Library for Large Linear ClassificationIntroductionLIBLINEAR is a linear classifier for data with millions of instances and features. It supports L2-regularized classifiers L2-loss linear SVM, L1-loss linear SVM, and logistic regression (LR) L1-regularized classifiers (after version 1.4) L2-loss linear SVM and logistic regression (LR) L2-regularized support vector regression (after version 1.9) L2-loss linear SVR and L1-loss linear SVR.Main features of LIBLINEAR include Same data format as LIBSVM, our general-purpose SVM solver, and also similar usage Multi-class classification: 1) one-vs-the rest, 2) Crammer &amp; Singer Cross validation for model evaulation Automatic parameter selection Probability estimates (logistic regression only) Weights for unbalanced data MATLAB/Octave, Java, Python, Ruby interfacesMulticlass classification with libSvmunzip libsvm.zip cd libsvm-3.21/wget \"http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/iris.scale\"more iris.scale ./svm-train svm-train iris.scale ./svm-train iris.scale ./svm-predict iris.scale iris.scale.model iris.scale.output 预测[root@bogon libsvm-3.21]# ./svm-predict iris.scale iris.scale.model iris.scale.output Accuracy = 97.3333% (146/150) (classification)iris的数据格式,包含3个类的数据1 1:-0.722222 2:-0.166667 3:-0.864407 4:-0.833333 1 1:-0.555556 2:0.5 3:-0.79661 4:-0.916667 1 1:-0.833333 3:-0.864407 4:-0.916667 1 1:-0.444444 2:0.416667 3:-0.830508 4:-0.916667 1 1:-0.611111 2:0.0833333 3:-0.864407 4:-0.916667 2 1:0.5 3:0.254237 4:0.0833333 2 1:0.166667 3:0.186441 4:0.166667 2 1:0.444444 2:-0.0833334 3:0.322034 4:0.166667 2 1:-0.333333 2:-0.75 3:0.0169491 4:-4.03573e-08 2 1:0.222222 2:-0.333333 3:0.220339 4:0.166667 2 1:-0.222222 2:-0.333333 3:0.186441 4:-4.03573e-08 2 1:0.111111 2:0.0833333 3:0.254237 4:0.25 2 1:-0.666667 2:-0.666667 3:-0.220339 4:-0.25 2 1:0.277778 2:-0.25 3:0.220339 4:-4.03573e-08 2 1:-0.5 2:-0.416667 3:-0.0169491 4:0.0833333 2 1:-0.611111 2:-1 3:-0.152542 4:-0.25 2 1:-0.111111 2:-0.166667 3:0.0847457 4:0.166667 2 1:-0.0555556 2:-0.833333 3:0.0169491 4:-0.25 2 1:-1.32455e-07 2:-0.25 3:0.254237 4:0.0833333 2 1:-0.277778 2:-0.25 3:-0.118644 4:-4.03573e-08 2 1:0.333333 2:-0.0833334 3:0.152542 4:0.0833333 2 1:-0.277778 2:-0.166667 3:0.186441 4:0.166667 2 1:-0.166667 2:-0.416667 3:0.0508474 4:-0.25 2 1:0.0555554 2:-0.833333 3:0.186441 4:0.166667 2 1:-0.277778 2:-0.583333 3:-0.0169491 4:-0.166667 2 1:-0.111111 3:0.288136 4:0.416667 2 1:-1.32455e-07 2:-0.333333 3:0.0169491 4:-4.03573e-08 2 1:0.111111 2:-0.583333 3:0.322034 4:0.166667 2 1:-1.32455e-07 2:-0.333333 3:0.254237 4:-0.0833333 2 1:0.166667 2:-0.25 3:0.118644 4:-4.03573e-08 2 1:0.277778 2:-0.166667 3:0.152542 4:0.0833333 2 1:0.388889 2:-0.333333 3:0.288136 4:0.0833333 2 1:0.333333 2:-0.166667 3:0.355932 4:0.333333 2 1:-0.0555556 2:-0.25 3:0.186441 4:0.166667 2 1:-0.222222 2:-0.5 3:-0.152542 4:-0.25 2 1:-0.333333 2:-0.666667 3:-0.0508475 4:-0.166667 2 1:-0.333333 2:-0.666667 3:-0.0847458 4:-0.25 2 1:-0.166667 2:-0.416667 3:-0.0169491 4:-0.0833333 2 1:-0.0555556 2:-0.416667 3:0.38983 4:0.25 2 1:-0.388889 2:-0.166667 3:0.186441 4:0.166667 2 1:-0.0555556 2:0.166667 3:0.186441 4:0.25 2 1:0.333333 2:-0.0833334 3:0.254237 4:0.166667 2 1:0.111111 2:-0.75 3:0.152542 4:-4.03573e-08 2 1:-0.277778 2:-0.166667 3:0.0508474 4:-4.03573e-08 2 1:-0.333333 2:-0.583333 3:0.0169491 4:-4.03573e-08 2 1:-0.333333 2:-0.5 3:0.152542 4:-0.0833333 2 1:-1.32455e-07 2:-0.166667 3:0.220339 4:0.0833333 2 1:-0.166667 2:-0.5 3:0.0169491 4:-0.0833333 2 1:-0.611111 2:-0.75 3:-0.220339 4:-0.25 2 1:-0.277778 2:-0.416667 3:0.0847457 4:-4.03573e-08 2 1:-0.222222 2:-0.166667 3:0.0847457 4:-0.0833333 2 1:-0.222222 2:-0.25 3:0.0847457 4:-4.03573e-08 2 1:0.0555554 2:-0.25 3:0.118644 4:-4.03573e-08 2 1:-0.555556 2:-0.583333 3:-0.322034 4:-0.166667 2 1:-0.222222 2:-0.333333 3:0.0508474 4:-4.03573e-08 3 1:0.111111 2:0.0833333 3:0.694915 4:1 3 1:-0.166667 2:-0.416667 3:0.38983 4:0.5 3 1:0.555555 2:-0.166667 3:0.661017 4:0.666667 3 1:0.111111 2:-0.25 3:0.559322 4:0.416667 3 1:0.222222 2:-0.166667 3:0.627119 4:0.75 3 1:0.833333 2:-0.166667 3:0.898305 4:0.666667 3 1:-0.666667 2:-0.583333 3:0.186441 4:0.333333 3 1:0.666667 2:-0.25 3:0.79661 4:0.416667 3 1:0.333333 2:-0.583333 3:0.627119 4:0.416667 预测结果,more iris.scale.output11111111111111111111111111111111111111111111111111222222222222222" }, { "title": "tcp状态迁移图 ", "url": "/posts/TCP/", "categories": "Protocols", "tags": "TCP/IP, Protocols, NetWork", "date": "2015-08-26 00:00:00 +0000", "snippet": "建立连接(三次握手） 第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认； 第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态； 第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。 完成三次握手，客户端与服务器开始传送数据，也就是ESTABLISHED状态。连接终止协议（tcp四次挥手） 客户端A发送一个FIN（M)，用来关闭客户A到服务器B的数据传送。 服务器B收到这个FIN，它发回一个ACK(M+1)，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。 服务器B关闭与客户端A的连接，发送一个FIN(N)给客户端A。 客户端A发回ACK(N+1)报文确认，并将确认序号设置为收到序号加1" }, { "title": "There are only two hard problems in distributed systems", "url": "/posts/twohardproblems/", "categories": "distributed", "tags": "distributed", "date": "2015-08-25 00:00:00 +0000", "snippet": "There are only two hard problems in distributed systemsMathias Verraes" }, { "title": "2015 OSC 珠海 流水账", "url": "/posts/OSC_ZH/", "categories": "OSC", "tags": "distributed, OSC", "date": "2015-08-24 00:00:00 +0000", "snippet": "Netty优化 智能心跳 Work线程避免做z阻塞类的操作 减少ChannelHandler的个数使用 不使用IdleStateHandler来做心跳的检查 write VS writeAndFlush 不要设置SO_SNDBUF\\SO_RECVBUF PooledByteBuf跨线程使用的坑 减少每个连接或会话的对象使用 NewSQL坐等本土Spanner＋F1 9月开源MyCAT &amp; SequoiaDB 大表跨区跨group的Join,你懂的 跟SequoiaDB结合 啥效应？ MicroService基于docker构建KVM非核心业务,小规模长时间试点部署" }, { "title": "Shadowsocks的作者被请喝茶", "url": "/posts/shadowsocks/", "categories": "VPN", "tags": "Shodawsocks, GFW\"", "date": "2015-08-23 00:00:00 +0000", "snippet": "不得不说，你国确实是一个神奇的国度周末醒来，刷了下动态，发现Shadowsocks的作者被请喝茶了，停止维护shadowsocks,只留下：Removed according to regulations.你国码农还能不能好好写代码。这也许是一个好事，说明xxx已经在技术上匮乏了，大概或许技术上真的禁不了了，只好禁人。AnyWay ,Thx,shadowsock的作者@clowwindy" }, { "title": "Google Spanner F1", "url": "/posts/google-f1-spanner/", "categories": "distributed", "tags": "distributed, Spanner", "date": "2015-08-23 00:00:00 +0000", "snippet": "Google Spanner and F1AbstractSpanner是可扩展的、多版本、全球分布式、同步复制数据库。是数据分布在全球范围内的系统，支持外部一致性的分布式事务。1 Introduction2 Implementation Universe。一个Spanner部署实例称之为一个Universe。目前全世界有3个。一个开发，一个测试，一个线上。因为一个Universe就能覆盖全球，不需要多个。 Zones. 每个Zone相当于一个数据中心，一个Zone内部物理上必须在一起。而一个数据中心可能有多个Zone。可以在运行时添加移除Zone。一个Zone可以理解为一个BigTable部署实例。 Universemaster: 监控这个universe里zone级别的状态信息 Placement driver：提供跨区数据迁移时管理功能 Zonemaster：相当于BigTable的Master。管理Spanserver上的数据。 Location proxy：存储数据的Location信息。客户端要先访问他才知道数据在那个Spanserver上。 Spanserver：相当于BigTable的ThunkServer。用于存储数据。2.1 SpannerServer 软件栈2.2 Directories and Placement2.3 Data Model3 TrueTime4 ConCurrency Control4.1 TimeStamp Managerment4.2 DetailsSpanner使用TrueTime来控制并发，实现外部一致性。支持以下几种事务。 读写事务RW 只读事务RO 快照读，客户端提供时间戳 快照读，客户端提供时间范围 5 Evaluation 5.1 MicroBenchmarks （微基准测试）5.2 Availability（可用性）5.3 TrueTime5.4 F16 Related Work7 Future Work论文(EN)地址：墙外-GoogleReseach墙内－OPEN文档中文翻译Google Spanner (中文版)–厦大数据库实验室References:论文阅读笔记 - Spanner: Google’sGlobally-Distributed Database" }, { "title": "数据库事务隔离一致性", "url": "/posts/db-tr/", "categories": "distributed", "tags": "distributed, 事务隔离一致性", "date": "2015-08-23 00:00:00 +0000", "snippet": "事务隔离级别 Read uncommitted(未提交读) 脏读，不可重复读，幻读 Read committed(已提交读) 不可重复读，幻读 Read Repeatable(可重复读取，InnoDB默认级别) 幻读 Serializable(可串行化)并发操作带来的数据不一致性 丢失数据修改： 两个事务T1和T2读入同一数据并进行修改，T2提交的结果破坏了T1提交的结果，导致T1的修改被T2覆盖 读“脏”数据： 一个事务读取某个失败事务运行过程中的数据(未提交的数据)，失败事务ROLLBACK 不可重复读： 事务T1读取数据后，T2执行了更新操作，修改了T1读取的数据. 幻读 or 产生“幽灵”数据： 可以简单理解，可重复读与update以及delete相关，幻读与insert有关，因为事务第一次读取数据之后给这些数据加了锁，其他事务不能修改这些数据。但这种方法无法锁住insert。MVCC 多版本控制乐观锁" }, { "title": "MySQL Binlog", "url": "/posts/mysql-binlog/", "categories": "MySQL", "tags": "mysql, binlog", "date": "2015-08-23 00:00:00 +0000", "snippet": "三种模式 模式1 Row Level 日志中会记录成每一行数据被修改的形式 模式2 Statement Leve 每一条会修改数据的sql都会记录到 master的bin-log中 模式3 Mixed" }, { "title": "Zookeeper", "url": "/posts/zookeeper/", "categories": "distributed", "tags": "distributed, Paxos, Zookeeper", "date": "2015-08-16 00:00:00 +0000", "snippet": "Zookeepeer 通信以及心跳机制Zookeepeer Leader 选举如何确定两张选票的大小注释已经写的很清楚了 选举轮数epoch的比较，这个大的，选票就大 选举轮数相同的话，比较(事务号)zxid，事务号大，选票也大 选举轮数，事务号都一样，比较节点的id,id大的选票也大 protected boolean totalOrderPredicate(long newId, long newZxid, long newEpoch, long curId, long curZxid, long curEpoch) { LOG.debug(\"id: \" + newId + \", proposed id: \" + curId + \", zxid: 0x\" + Long.toHexString(newZxid) + \", proposed zxid: 0x\" + Long.toHexString(curZxid)); if(self.getQuorumVerifier().getWeight(newId) == 0){ return false; } /* * We return true if one of the following three cases hold: * 1- New epoch is higher * 2- New epoch is the same as current epoch, but new zxid is higher * 3- New epoch is the same as current epoch, new zxid is the same * as current zxid, but server id is higher. */ return ((newEpoch &gt; curEpoch) || ((newEpoch == curEpoch) &amp;&amp; ((newZxid &gt; curZxid) || ((newZxid == curZxid) &amp;&amp; (newId &gt; curId)))));}LOOKING 状态时开启一轮新的选举首先是选举的轮数(electionEpoch/logicalclock)加1，并将选票更新为自己广播出去。synchronized(this){\t//electionEpoch 轮数增1 logicalclock++; //投票给自己（proposedLeader = leader（sid）; proposedZxid = zxid;proposedEpoch = epoch;） updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());//sid,zxid,epoch}LOG.info(\"New election. My id = \" + self.getId() + \", proposed zxid=0x\" + Long.toHexString(proposedZxid));//发送投票，构造ToSend（this.electionEpoch = logicalclock）sendNotifications();另一方面，会接受其他server 过来的投票，收到投票头进行选票的比较如果对方选举轮数比较靠前 需要更新逻辑时钟（选举轮数）， 清空收票箱（都是上一轮的投票） 因为现在选举轮数又一样了，所以需要再次PK下选票，再广播出去 // If notification &gt; current, replace and send messages out// 对方选举轮数靠前比自己大，更新选举轮数（逻辑时钟），清空收票箱（都是上一轮的投票），// 再比较（比较proposed）投递过来的与自己的比较，如果对方大了，更新为新的投票，不然还是投给自己if (n.electionEpoch &gt; logicalclock) { logicalclock = n.electionEpoch; recvset.clear(); if(totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) { updateProposal(n.leader, n.zxid, n.peerEpoch); } else { updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch()); } sendNotifications();如果当前自己的选举轮数靠前了，那还用比嘛？else if (n.electionEpoch &lt; logicalclock) { if(LOG.isDebugEnabled()){ LOG.debug(\"Notification election epoch is smaller than logicalclock. n.electionEpoch = 0x\" + Long.toHexString(n.electionEpoch) + \", logicalclock=0x\" + Long.toHexString(logicalclock)); } break;} 选举轮数一致，ok 那就pk下，看谁胜出//选举轮数一致，比较选票，将胜出的更新为新的选票并广播出去} else if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) { updateProposal(n.leader, n.zxid, n.peerEpoch); sendNotifications();}Zookeepeer 读写流程Read一致性保证   尽管zookeeper保证了大多数，但是如果client读取到这些大多数以外的节点,必然会读取到老数据，zookeeper可以通过执行sync来解决 watch机制可否？A,B均注册watcher到节点，当A更新节点数据时，server通知B，B执行watcher ZooKeeper-Consistency-GuaranteesZookeeper之分布式系统中生成全局唯一ID-SessionId 64位，其中高8位表示机器序列号，即所在的机器，后56为用当前时间的毫秒数随机 3.4.6之前使用右移操作，3.4.6使用无符号右移。避免负数导致无法区分机器序列号 3.5.0开始不实用毫秒数，而是使用了System.nanoTime避免人为改动系统时间可能导致的问题 3.4.5(3.4.6之前?)public static long initializeNextSession(long id) { long nextSid = 0; nextSid = (System.currentTimeMillis() &lt;&lt; 24) &gt;&gt; 8; nextSid = nextSid | (id &lt;&lt;56); return nextSid;}3.4.6public static long initializeNextSession(long id) { long nextSid = 0; nextSid = (System.currentTimeMillis() &lt;&lt; 24) &gt;&gt;&gt; 8; nextSid = nextSid | (id &lt;&lt;56); return nextSid;}3.5.0public static long initializeNextSession(long id) { long nextSid; nextSid = (Time.currentElapsedTime() &lt;&lt; 24) &gt;&gt;&gt; 8; nextSid = nextSid | (id &lt;&lt;56); return nextSid;}/*** Returns time in milliseconds as does System.currentTimeMillis(),* but uses elapsed time from an arbitrary epoch more like System.nanoTime().* The difference is that if somebody changes the system clock,* Time.currentElapsedTime will change but nanoTime won't. On the other hand,* all of ZK assumes that time is measured in milliseconds.* @return The time in milliseconds from some arbitrary point in time.*/public static long currentElapsedTime() { return System.nanoTime() / 1000000;}" }, { "title": "RPC分布式服务化SOA以及服务治理", "url": "/posts/soa/", "categories": "distributed", "tags": "distributed, MQ, kafka", "date": "2015-08-16 00:00:00 +0000", "snippet": "一句话：在这个分布式服务泛滥的时代，实际用RPC的多, 有完美服务治理的少。简单RPC实现到分布式服务开源实现dubbo为例服务治理" }, { "title": "Kafka以及类Kafka系列", "url": "/posts/kafka/", "categories": "distributed", "tags": "distributed, MQ, kafka", "date": "2015-08-16 00:00:00 +0000", "snippet": "Kafka副本复制机制客户端写patition的leader(master),slave主动拉取，ISR机制MetaqRocketMQ" }, { "title": "再回首Apache Spark", "url": "/posts/spark/", "categories": "spark", "tags": "ML, Datascience, spark, mllib", "date": "2015-08-16 00:00:00 +0000", "snippet": "转眼spark已经2.0 pre了SparkSpark MLlibSpark SqlSpark stream" }, { "title": "Kafka Schedule and Rmq NettyEncoder", "url": "/posts/Java-Code-Md/", "categories": "kafka", "tags": "kafka, rmq, scala, java", "date": "2015-08-15 00:00:00 +0000", "snippet": "JAVA CODE：public class NettyEncoder extends MessageToByteEncoder&lt;RemotingCommand&gt; { private static final Logger log = LoggerFactory.getLogger(RemotingHelper.RemotingLogName); @Override public void encode(ChannelHandlerContext ctx, RemotingCommand remotingCommand, ByteBuf out) throws Exception { try { ByteBuffer header = remotingCommand.encodeHeader(); out.writeBytes(header); byte[] body = remotingCommand.getBody(); if (body != null) { out.writeBytes(body); } } catch (Exception e) { log.error(\"encode exception, \" + RemotingHelper.parseChannelRemoteAddr(ctx.channel()), e); if (remotingCommand != null) { log.error(remotingCommand.toString()); } RemotingUtil.closeChannel(ctx.channel()); } }}SCALA CODE： def schedule(name: String, fun: ()=&gt;Unit, delay: Long, period: Long, unit: TimeUnit) = { debug(\"Scheduling task %s with initial delay %d ms and period %d ms.\" .format(name, TimeUnit.MILLISECONDS.convert(delay, unit), TimeUnit.MILLISECONDS.convert(period, unit))) ensureStarted val runnable = Utils.runnable { try { trace(\"Begining execution of scheduled task '%s'.\".format(name)) fun() } catch { case t: Throwable =&gt; error(\"Uncaught exception in scheduled task '\" + name +\"'\", t) } finally { trace(\"Completed execution of scheduled task '%s'.\".format(name)) } } if(period &gt;= 0) executor.scheduleAtFixedRate(runnable, delay, period, unit) else executor.schedule(runnable, delay, unit) }" }, { "title": "Redis-Cluster初探", "url": "/posts/Redis-Cluster3.0/", "categories": "redis", "tags": "distributed, redis3.x", "date": "2015-08-13 00:00:00 +0000", "snippet": "网上看着搭建一套redis集群好麻烦，搜了一圈blog,发现还是官网靠谱Redis cluster tutorial先安装ruby（ruby安装我还是比较烦的，最开始因为ruby安装复杂，且jekyll需要本地编译环境而放弃了不过这次用的rvm似乎很顺利就搞定了，jekyll的本地环境配置及主题更换(rvm管理ruby)）解压修改配置文件redis.conf,然后依次拷贝到其他节点，注意修改端口port 7000cluster-enabled yescluster-config-file nodes.confcluster-node-timeout 5000appendonly yes此时启动redissrc/redis-server ./redis.conf会出现如下日志18447:M 13 Aug 07:57:37.148 * Increased maximum number of open files to 10032 (it was originally set to 1024).18447:M 13 Aug 07:57:37.148 * No cluster configuration found, I'm c8b35a4356445746a9855d384b1c2111eacded8c _._ _.-``__ ''-._ _.-`` `. `_. ''-._ Redis 3.0.3 (00000000/0) 64 bit .-`` .-```. ```\\/ _.,_ ''-._ ( ' , .-` | `, ) Running in cluster mode |`-._`-...-` __...-.``-._|'` _.-'| Port: 10002 | `-._ `._ / _.-' | PID: 18447 `-._ `-._ `-./ _.-' _.-' |`-._`-._ `-.__.-' _.-'_.-'| | `-._`-._ _.-'_.-' | http://redis.io `-._ `-._`-.__.-'_.-' _.-' |`-._`-._ `-.__.-' _.-'_.-'| | `-._`-._ _.-'_.-' | `-._ `-._`-.__.-'_.-' _.-' `-._ `-.__.-' _.-' `-._ _.-' `-.__.-' 18447:M 13 Aug 07:57:37.158 # Server started, Redis version 3.0.318447:M 13 Aug 07:57:37.158 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.18447:M 13 Aug 07:57:37.158 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.18447:M 13 Aug 07:57:37.158 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.18447:M 13 Aug 07:57:37.158 * The server is now ready to accept connections on port 10002建立集群# src/redis-trib.rb create --replicas 1 172.16.82.186:10001 172.16.82.186:10002 172.16.82.187:10005 172.16.82.187:10006 172.16.82.188:10003 172.16.82.188:10004&gt;&gt;&gt; Creating clusterConnecting to node 172.16.82.186:10001: OKConnecting to node 172.16.82.186:10002: OKConnecting to node 172.16.82.187:10005: OKConnecting to node 172.16.82.187:10006: OKConnecting to node 172.16.82.188:10003: OKConnecting to node 172.16.82.188:10004: OK&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...Using 3 masters:172.16.82.186:10001172.16.82.187:10005172.16.82.188:10003Adding replica 172.16.82.187:10006 to 172.16.82.186:10001Adding replica 172.16.82.186:10002 to 172.16.82.187:10005Adding replica 172.16.82.188:10004 to 172.16.82.188:10003M: ea91dcad05e9d5b1ff46586a5cc7380133bdc72d 172.16.82.186:10001 slots:0-5460 (5461 slots) masterS: c8b35a4356445746a9855d384b1c2111eacded8c 172.16.82.186:10002 replicates 0fdc7426449ce43124b8da11f8d55e430dffaeebM: 0fdc7426449ce43124b8da11f8d55e430dffaeeb 172.16.82.187:10005 slots:5461-10922 (5462 slots) masterS: 52018afc6822a0fe37b873d1ac1502c8c4eaf576 172.16.82.187:10006 replicates ea91dcad05e9d5b1ff46586a5cc7380133bdc72dM: 1fa25db9c20217a1adacdcd6705747ec58daac21 172.16.82.188:10003 slots:10923-16383 (5461 slots) masterS: da09b9f765300ab64915685c2e5570da97d28813 172.16.82.188:10004 replicates 1fa25db9c20217a1adacdcd6705747ec58daac21Can I set the above configuration? (type 'yes' to accept): yes&gt;&gt;&gt; Nodes configuration updated&gt;&gt;&gt; Assign a different config epoch to each node&gt;&gt;&gt; Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join...&gt;&gt;&gt; Performing Cluster Check (using node 172.16.82.186:10001)M: ea91dcad05e9d5b1ff46586a5cc7380133bdc72d 172.16.82.186:10001 slots:0-5460 (5461 slots) masterM: c8b35a4356445746a9855d384b1c2111eacded8c 172.16.82.186:10002 slots: (0 slots) master replicates 0fdc7426449ce43124b8da11f8d55e430dffaeebM: 0fdc7426449ce43124b8da11f8d55e430dffaeeb 172.16.82.187:10005 slots:5461-10922 (5462 slots) masterM: 52018afc6822a0fe37b873d1ac1502c8c4eaf576 172.16.82.187:10006 slots: (0 slots) master replicates ea91dcad05e9d5b1ff46586a5cc7380133bdc72dM: 1fa25db9c20217a1adacdcd6705747ec58daac21 172.16.82.188:10003 slots:10923-16383 (5461 slots) masterM: da09b9f765300ab64915685c2e5570da97d28813 172.16.82.188:10004 slots: (0 slots) master replicates 1fa25db9c20217a1adacdcd6705747ec58daac21[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.命令行下各种操作还不熟悉，试了下jedis3.x差不多Set&lt;HostAndPort&gt; jedisClusterNodes = new HashSet&lt;HostAndPort&gt;(); jedisClusterNodes.add(new HostAndPort(\"172.16.82.186\", 10001)); jedisClusterNodes.add(new HostAndPort(\"172.16.82.186\", 10002)); jedisClusterNodes.add(new HostAndPort(\"172.16.82.187\", 10005)); jedisClusterNodes.add(new HostAndPort(\"172.16.82.187\", 10006)); jedisClusterNodes.add(new HostAndPort(\"172.16.82.188\", 10003)); jedisClusterNodes.add(new HostAndPort(\"172.16.82.188\", 10004)); JedisCluster jc = new JedisCluster(jedisClusterNodes); Random r = new Random(10000000);System.out.println(new String(jc.get(\"k\".getBytes())));for (int i = 0; i &lt; 1000000; i++) {\tString k = r.nextLong()+\"\"+i;\tSystem.out.println(k);\tString v = r.nextLong()+\"\"+i;\tjc.set(k, v);\t}System.out.println(jc.del(\"*\".getBytes()));System.out.println(\"====\");Codis 环境Codis 2.x源码安装(预先准备好go环境go学习笔记)go get -u -d github.com/CodisLabs/codis默认配置config.ini，修改下zookeeper地址端口，dashboard_addrzk=127.0.0.1:2181dashboard_addr=172.17.32.127:18087启动 dashboardbin/codis-config dashboard &amp;初始化 slotsbin/codis-config slot init 启动 Codis Redis/data/dev/GoProj/src/github.com/CodisLabs/codis/bincp ../test/redis.temp redis.6379.conf cp ../test/redis.temp redis.6380.conf cp ../test/redis.temp redis.6479.conf cp ../test/redis.temp redis.6480.conf ./codis-server redis.6379.conf &amp;./codis-server redis.6380.conf &amp; ./codis-server redis.6479.conf &amp; ./codis-server redis.6480.conf &amp; 添加一个group，group的id为1， 并添加一个redis master、slave到该groupbin/codis-config server add 1 localhost:6379 masterbin/codis-config server add 1 localhost:6380 slavebin/codis-config server add 2 localhost:6479 masterbin/codis-config server add 2 localhost:6480 slave设置 server group 服务的 slot 范围bin/codis-config slot range-set 0 511 1 onlinebin/codis-config slot range-set 512 1023 2 online启动 codis-proxybin/codis-proxy -c config.ini -L ./log/proxy.log --cpu=8 --addr=0.0.0.0:19000 --http-addr=0.0.0.0:11000 &amp; 刚启动的 codis-proxy 默认是处于 offline状态的, 然后设置 proxy 为 online 状态, 只有处于 online 状态的 proxy 才会对外提供服务bin/codis-config -c config.ini proxy online proxy_1dashboard地址： http://172.17.32.127:18087/admin/Codis 3.x下载源码编译/data/dev/GoProj/src/github.com/CodisLabs/mv codis codis2.xhttps://github.com/CodisLabs/codis/archive/3.0.3.zipunzip 3.0.3.zipmv codis-3.0.3/ codiscd codismake编译完生成的bin目录total 60484drwxr-xr-x. 4 root root 4096 Sep 21 11:21 assets-rwxr-xr-x. 1 root root 14518868 Sep 21 11:21 codis-admin-rwxr-xr-x. 1 root root 15765944 Sep 21 11:21 codis-dashboard-rwxr-xr-x. 1 root root 8900440 Sep 21 11:21 codis-fe-rwxr-xr-x. 1 root root 8668003 Sep 21 11:21 codis-ha-rwxr-xr-x. 1 root root 10158023 Sep 21 11:21 codis-proxy-rwxr-xr-x. 1 root root 3743354 Sep 21 11:21 codis-server-rw-r--r--. 1 root root 32216 Sep 21 11:16 redis.6379.conf-rw-r--r--. 1 root root 32216 Sep 21 11:16 redis.6380.conf-rw-r--r--. 1 root root 32216 Sep 21 11:16 redis.6479.conf-rw-r--r--. 1 root root 32216 Sep 21 11:16 redis.6480.conf-rw-r--r--. 1 root root 32216 Sep 21 11:16 redis.temp-rw-r--r--. 1 root root 96 Sep 21 11:21 version创建conf,logs目录，用来存放配置文件，日志mkdir confmkdir logsdashboard生成默认配置项bin/codis-dashboard --default-config | tee conf/dashboard.toml启动或停止dashboardnohup bin/codis-dashboard --ncpu=4 --config=conf/dashboard.toml --log=logs/dashboard.log --log-level=WARN &amp;bin/codis-admin --dashboard=localhost:18080 --shutdowncodis-proxy生成默认配置项bin/codis-proxy --default-config | tee conf/cproxy.toml启动proxynohup bin/codis-proxy --ncpu=4 --config=conf/proxy.toml --log=logs/proxy.log --log-level=WARN &amp;设置proxy为online状态bin/codis-admin --dashboard=172.17.32.127:18080 --create-proxy -x 172.17.32.127:11080停止proxybin/codis-admin --proxy=172.17.32.127:11080 --shutdowncodis fe生成配置文件bin/codis-admin --dashboard-list --zookeeper=127.0.0.1:2181 | tee conf/codis.json启动codis-febin/codis-fe --ncpu=4 --log=logs/fe.log --log-level=WARN --dashboard-list=conf/codis.json --listen=0.0.0.0:8080 &amp;codis-habin/codis-ha --log=logs/codis/ha.log --log-level=WARN --dashboard=172.17.32.127:18080 &amp;codis-admin添加 Redis Server Group创建groupbin/codis-admin --dashboard=172.17.32.127:18080 --create-group --gid=1bin/codis-admin --dashboard=172.17.32.127:18080 --create-group --gid=2添加服务器server到group(xx80为从库)bin/codis-admin --dashboard=172.17.32.127:18080 --group-add --gid=1 --addr=172.17.32.127:6379bin/codis-admin --dashboard=172.17.32.127:18080 --group-add --gid=1 --addr=172.17.32.127:6380bin/codis-admin --dashboard=172.17.32.127:18080 --group-add --gid=2 --addr=172.17.32.127:6479bin/codis-admin --dashboard=172.17.32.127:18080 --group-add --gid=2 --addr=172.17.32.127:6480slave(xx80)同步master(xx69)bin/codis-admin --dashboard=172.17.32.127:18080 --sync-action --create --addr=172.17.32.127:6380bin/codis-admin --dashboard=172.17.32.127:18080 --sync-action --create --addr=172.17.32.127:6480升级slave为masterbin/codis-admin --dashboard=172.17.32.127:18080 -promote-server --gid=1 --addr=172.17.32.127:6380初始化slots,设置group的范围bin/codis-admin --dashboard=172.17.32.127:18080 --slot-action --create-range --beg=0 --end=511 --gid=1bin/codis-admin --dashboard=172.17.32.127:18080 --slot-action --create-range --beg=512 --end=1023 --gid=2ref: codis 3.0.3安装搭建 Codis 使用文档 " }, { "title": "《TCP/IP详解卷1：协议》笔记", "url": "/posts/TCP-IP-PROTOCOLS/", "categories": "Protocols", "tags": "TCP/IP, Protocols, NetWork", "date": "2015-08-13 00:00:00 +0000", "snippet": "分层 链路层操作系统中的设备驱动程序和计算机对应的网络接口,ARP(地址解析协议)和RARP(逆地址解析协议) 网络层IP协议（网际协议），ICMP(Internet互联网控制报文协议),IGMP(Internet组管理协议) 运输层TCP（传输控制协议），UDP(用户数据报协议) 应用层Telnet,FTP,SMTP,SNTP工具1,tcpdump14:21:13.735001 IP 10.3.142.10.http &gt; 10.3.142.62.31580: Flags [S.], seq 1882046784, ack 245205655, win 29200, options [mss 1460,nop,nop,sackOK,nop,wscale 7], length 014:21:13.735654 IP 10.3.142.10.http &gt; 10.3.142.62.31580: Flags [.], ack 381, win 237, length 014:21:13.744116 IP 10.3.142.10.http &gt; 10.3.142.62.31581: Flags [S.], seq 4167052849, ack 2571110651, win 29200, options [mss 1460,nop,nop,sackOK,nop,wscale 7], length 014:21:13.744748 IP 10.3.142.10.http &gt; 10.3.142.62.31581: Flags [.], ack 379, win 237, length 014:21:13.746761 IP 10.3.142.10.http &gt; 10.3.142.62.31580: Flags [P.], seq 1:449, ack 381, win 237, length 44814:21:13.747423 IP 10.3.142.10.http &gt; 10.3.142.62.31580: Flags [F.], seq 449, ack 382, win 237, length 014:21:13.751565 IP 10.3.142.10.http &gt; 10.3.142.62.31578: Flags [.], seq 4057624839:4057627759, ack 3715079403, win 237, length 292014:21:13.751614 IP 10.3.142.10.http &gt; 10.3.142.62.31578: Flags [P.], seq 2920:2977, ack 1, win 237, length 5714:21:13.752526 IP 10.3.142.10.http &gt; 10.3.142.62.31578: Flags [F.], seq 2977, ack 2, win 237, length 014:21:13.762168 IP 10.3.142.10.http &gt; 10.3.142.62.31581: Flags [P.], seq 1:628, ack 379, win 237, length 62714:21:13.763615 IP 10.3.142.10.http &gt; 10.3.142.62.31581: Flags [F.], seq 628, ack 380, win 237, length 014:21:13.768904 IP 10.3.142.10.http &gt; 10.3.142.62.31584: Flags [S.], seq 2698062966, ack 3290428620, win 29200, options [mss 1460,nop,nop,sackOK,nop,wscale 7], length 014:21:13.769580 IP 10.3.142.10.http &gt; 10.3.142.62.31584: Flags [.], ack 462, win 237, length 014:21:13.778808 IP 10.3.142.10.http &gt; 10.3.142.62.31584: Flags [P.], seq 1:481, ack 462, win 237, length 48014:21:13.779459 IP 10.3.142.10.http &gt; 10.3.142.62.31584: Flags [F.], seq 481, ack 463, win 237, length 014:21:13.823270 IP 10.3.142.10.http &gt; 10.3.142.62.31587: Flags [S.], seq 2687230459, ack 3482940275, win 29200, options [mss 1460,nop,nop,sackOK,nop,wscale 7], length 014:21:13.823914 IP 10.3.142.10.http &gt; 10.3.142.62.31587: Flags [.], ack 471, win 237, length 014:21:13.830794 IP 10.3.142.10.http &gt; 10.3.142.62.31588: Flags [S.], seq 1796206633, ack 2662870446, win 29200, options [mss 1460,nop,nop,sackOK,nop,wscale 7], length 014:21:13.831450 IP 10.3.142.10.http &gt; 10.3.142.62.31588: Flags [.], ack 467, win 237, length 014:21:13.839749 IP 10.3.142.10.http &gt; 10.3.142.62.31587: Flags [.], seq 1:2921, ack 471, win 237, length 292014:21:13.839833 IP 10.3.142.10.http &gt; 10.3.142.62.31587: Flags [P.], seq 2921:3380, ack 471, win 237, length 45914:21:13.840700 IP 10.3.142.10.http &gt; 10.3.142.62.31587: Flags [F.], seq 3380, ack 472, win 237, length 014:21:13.852202 IP 10.3.142.10.http &gt; 10.3.142.62.31588: Flags [.], seq 1:2921, ack 467, win 237, length 292014:21:13.852227 IP 10.3.142.10.http &gt; 10.3.142.62.31588: Flags [P.], seq 2921:3724, ack 467, win 237, length 80314:21:13.853330 IP 10.3.142.10.http &gt; 10.3.142.62.31588: Flags [F.], seq 3724, ack 468, win 237, length 014:21:13.866645 IP 10.3.142.10.http &gt; 10.3.142.62.31592: Flags [S.], seq 3544149494, ack 1340127701, win 29200, options [mss 1460,nop,nop,sackOK,nop,wscale 7], length 014:21:13.867311 IP 10.3.142.10.http &gt; 10.3.142.62.31592: Flags [.], ack 470, win 237, length 014:21:13.870886 IP 10.3.142.10.http &gt; 10.3.142.62.31592: Flags [P.], seq 1:489, ack 470, win 237, length 48814:21:13.871564 IP 10.3.142.10.http &gt; 10.3.142.62.31592: Flags [F.], seq 489, ack 471, win 237, length 014:21:13.980743 IP 10.3.142.10.http &gt; 10.3.142.62.31599: Flags [S.], seq 2813159308, ack 4229199650, win 29200, options [mss 1460,nop,nop,sackOK,nop,wscale 7], length 014:21:13.981352 IP 10.3.142.10.http &gt; 10.3.142.62.31599: Flags [.], ack 376, win 237, length 014:21:14.026220 IP 10.3.142.10.http &gt; 10.3.142.62.31602: Flags [S.], seq 3209688867, ack 3217793971, win 29200, options [mss 1460,nop,nop,sackOK,nop,wscale 7], length 014:21:14.026861 IP 10.3.142.10.http &gt; 10.3.142.62.31602: Flags [.], ack 346, win 237, length 014:21:14.028618 IP 10.3.142.10.http &gt; 10.3.142.62.31602: Flags [P.], seq 1:416, ack 346, win 237, length 41514:21:14.029249 IP 10.3.142.10.http &gt; 10.3.142.62.31602: Flags [F.], seq 416, ack 347, win 237, length 014:21:14.034137 IP 10.3.142.10.http &gt; 10.3.142.62.31599: Flags [P.], seq 1:629, ack 376, win 237, length 62814:21:14.034881 IP 10.3.142.10.http &gt; 10.3.142.62.31599: Flags [F.], seq 629, ack 377, win 237, length 014:21:14.056644 IP 10.3.142.10.http &gt; 10.3.142.62.31604: Flags [S.], seq 2676426302, ack 714186577, win 29200, options [mss 1460,nop,nop,sackOK,nop,wscale 7], length 014:21:14.057629 IP 10.3.142.10.http &gt; 10.3.142.62.31604: Flags [.], ack 457, win 237, length 014:21:14.069155 IP 10.3.142.10.http &gt; 10.3.142.62.31604: Flags [P.], seq 1:1277, ack 457, win 237, length 127614:21:14.069881 IP 10.3.142.10.http &gt; 10.3.142.62.31604: Flags [F.], seq 1277, ack 458, win 237, length 014:21:14.070129 IP 10.3.142.10.http &gt; 10.3.142.62.31606: Flags [S.], seq 2426352170, ack 2408227546, win 29200, options [mss 1460,nop,nop,sackOK,nop,wscale 7], length 014:21:14.070747 IP 10.3.142.10.http &gt; 10.3.142.62.31606: Flags [.], ack 379, win 237, length 014:21:14.072803 IP 10.3.142.10.http &gt; 10.3.142.62.31606: Flags [P.], seq 1:432, ack 379, win 237, length 43114:21:14.073406 IP 10.3.142.10.http &gt; 10.3.142.62.31606: Flags [F.], seq 432, ack 380, win 237, length 014:21:14.101003 IP 10.3.142.10.http &gt; 10.3.142.62.31607: Flags [S.], seq 2210610393, ack 875667818, win 29200, options [mss 1460,nop,nop,sackOK,nop,wscale 7], length 014:21:14.101639 IP 10.3.142.10.http &gt; 10.3.142.62.31607: Flags [.], ack 454, win 237, length 02,traceroute" }, { "title": "Jekyll的本地环境配置及主题更换(rvm管理ruby)", "url": "/posts/rvm-ruby-jekyll/", "categories": "jekyll", "tags": "jekyll, rvm, ruby, jekyll-bootstrap", "date": "2015-08-05 00:00:00 +0000", "snippet": "186 curl -sSL https://rvm.io/mpapis.asc | gpg2 --import -187 curl -L get.rvm.io | bash -s stable188 sed -i -e 's/ftp\\.ruby-lang\\.org\\/pub\\/ruby/ruby\\.taobao\\.org\\/mirrors\\/ruby/g' ~/.rvm/config/db189 sed -i 's!cache.ruby-lang.org/pub/ruby!ruby.taobao.org/mirrors/ruby!' /usr/local/rvm/config/db 190 cat /etc/profile.d/rvm.sh191 source /etc/profile.d/rvm.sh192 rvm requirements193 rvm install ruby 2.0.0194 gem195 gem -v196 gem install jekyll197 rvm use 2.0.0 --default198 rvm use 2.0.0199 rvm gemset create rails416200 rvm use 2.0.0201 rvm use 2.0.0@rails416202 gem install rails -v 4.1.6 --no-rdoc --no-ri203 gem install jekyll204 gem update --system 205 vi /etc/hosts206 history207 gem install jekyll208 history209 vi /etc/hosts210 gem install rails -v 4.1.6 --no-rdoc --no-ri211 gem install jekyll212 gem sources --remove https://rubygems.org/213 gem sources -a https://ruby.taobao.org/214 gem sources -l 215 gem update --system 216 gem install jekyll217 gem install rdiscount218 ls219 jekyll serve220 gem install therubyracer221 jekyll serve222 ls223 service iptablse status224 service iptables status225 jekyll serve226 ls227 cd /data/solr-5.2.1/jekyll/jekyll-bootstrap228 ls229 jekyll serve230 /etc/init.d/iptables status231 curl http://172.16.82.186:4000232 curl http://127.0.0.1:4000233 jekyll serve234 ls235 cat _config.yml 236 cat _config.yml |grep local237 jekyll serve238 rake239 ls240 rake theme:install git=\"git://github.com/sodabrew/theme-dinky.git\"241 rake theme:install git=\"git://github.com/sodabrew/theme-dinky.git242 rake theme:install git=\"git://github.com/sodabrew/theme-dinky.git\"243 lsd244 ls245 cd ../246 ls247 mv jekyll-bootstrap jekyll-bootstrapbak248 cd jekyll-bootstrapbak/249 ls250 ls _theme_packages/251 ls _theme_packages/dinky/252 ls _theme_packages/dinky/_includes/253 ls _theme_packages/dinky/_includes/themes/254 ls _theme_packages/dinky/_includes/themes/dinky/255 ls _theme_packages/dinky/assets/256 ls _theme_packages/dinky/assets/themes/dinky/css/257 ls _theme_packages/dinky/assets/themes/dinky/css/styles.css 258 cat _theme_packages/dinky/assets/themes/dinky/css/styles.css" }, { "title": "Distributed System Guides", "url": "/posts/distributed/", "categories": "distributed", "tags": "distributed", "date": "2015-08-05 00:00:00 +0000", "snippet": "Distributed System GuidesRaftTwo-phase commit protocolZAB-A simple totally ordered broadcast protocolDistributed Algorithms in NoSQLDatabasesOpen-Source Service Discovery分布式系统领域经典论文翻译集Innodb中的事务隔离级别和锁的关系raftconsensus.github.io使用raft算法快速构建一个分布式kv系统Paxos论文地址 Paxos made simple The Part-Time Parliament ACM Fastpaxos. DistributedComputing " }, { "title": "The CAP Theorem", "url": "/posts/CAP/", "categories": "distributed", "tags": "distributed", "date": "2015-08-05 00:00:00 +0000", "snippet": "The CAP Theorem" }, { "title": "Datascience Guide", "url": "/posts/datascience-guides/", "categories": "Datascience", "tags": "ML, Datascience", "date": "2015-08-05 00:00:00 +0000", "snippet": "RanklibOverviewRankLib is a library of learning to rank algorithms. Currently eight popular algorithms have been implemented:＊MART (Multiple Additive Regression Trees, a.k.a. Gradient boosted regression tree) [6]＊RankNet [1]＊RankBoost [2]＊AdaRank [3]＊Coordinate Ascent [4]＊LambdaMART [5]＊ListNet [7]＊Random Forests [8]With appropriate parameters for Random Forests, it can also do bagging several MART/LambdaMART rankers.It also implements many retrieval metrics as well as provides many ways to carry out evaluation.LibSvmWord2VecLDA" }, { "title": "Solr Code Annotation", "url": "/posts/solr_src_annotation/", "categories": "distributed", "tags": "distributed, Search, SolrCloud", "date": "2015-06-18 00:00:00 +0000", "snippet": "Solr Query Syntax and Parsing 查询语法 Common Query Parameters The Standard Query Parser The DisMax Query Parser The Extended DisMax Query Parser Function Queries Local Parameters in Queries Other Parsers 查询关键流程SearchHandler.handleRequestBody( c.prepare(rb)--QueryComponent.prepare())--&gt; SearchHandler.handleRequestBody( c.process(rb)--QueryComponentprocess())--&gt;SearchHandler.handleRequestBody( c.finishStage(rb)--QueryComponent.finishStage())QueryComponent.prepare中进行参数解析，得到QParser，Query,FilterQuery等 Solr dismax 源码详解以及使用方法 Solr 的edismax与dismax比较与分析 Solr 查询中fq参数的解析原理 mm参数 Solr’s mm parameter – Explanation of Min Number Should Match Min Number Should Match Specification Format Mininum Shoud Match-ES elasticsearch中minimum_should_match的一些理解solr mm 参数例子1，mm=a,a &gt; 0 （clauses个数*百分数向下取整 &lt; a）首先依据分词得到clauses数，比如现在歌手字段（singer:简弘亦。对应ik分词结果为简，弘，亦三个） 然后搜索singer:小幸运简弘亦，此时依据ik分词为（小，幸运，简，弘，亦）类似于5个clauses，如果mm=1，mm=2或者mm=3都可以出搜索结果，是如果正数百分数，搜索词（小幸运简弘起）是5个clauses那么要想匹配上简弘亦，最终clauses个数百分数 的结果向下去整，必须小于3,这样当搜索词（小幸运简弘起）为是5个clauses，百分数最大为59%，即mm=2小于59%，需要match的clauses语句为数559%小于=2 如果搜索词是“小幸运简弘”或者 “幸运简弘起” 由于ik后是四个词，也就是4个clauses，那么最大74%，即4*74%小于3=2分词（ik）与mm的一个坑（mm=100，也就是要求Query分词产生的每个clauses都必须匹配上）搜索词 幸福蓝海（ik分词：幸福，蓝，海） 索引 幸福蓝海国际影城（ik分词：幸福，蓝，海国，国际，影城） 这个为啥坑呢： 首先是mm=100这个要求高了 再次要求从索引的序列中获取的正向子序列作为query产生的分词不能超出原索引序列的分词，当然如果如果query本身超出了索引的序列也是不行的" }, { "title": "Java GC日志", "url": "/posts/GC2/", "categories": "Java", "tags": "Java, File, tools", "date": "2015-06-17 00:00:00 +0000", "snippet": "link 快速解读GC日志原文Understanding Garbage Collection Logs HotSpot在PrintHeapAtGC输出的内容的格式 使用-XX:+PrintTenuringDistribution的详细输出和visual GC的疑问 JVM内存分析系列（十一）GC基本情况与CMS垃圾收集器调优 [讨论] 关于CMS GC的一些疑问 JVM实用参数（八）GC日志 JVM内幕：Java虚拟机详解 JVM 的 工作原理，层次结构 以及 GC工作原理 " }, { "title": "Python list tuple dict", "url": "/posts/tuple_list_dict/", "categories": "python", "tags": "python, Numpy", "date": "2015-06-14 00:00:00 +0000", "snippet": "元组使用小括号，列表使用方括号" }, { "title": "Python Notes", "url": "/posts/Python-Notes/", "categories": "python", "tags": "python, python", "date": "2015-06-14 00:00:00 +0000", "snippet": "python列表类型extend()与append()append() 只追加得到额外的一个元素,可以认为是tuple，extend()只能是一个列表&gt;&gt;&gt; a=[1,2]&gt;&gt;&gt; b=[3,5]&gt;&gt;&gt; c=[3,5]&gt;&gt;&gt; b.append(a)&gt;&gt;&gt; c.extend(a)&gt;&gt;&gt; b[3, 5, [1, 2]]&gt;&gt;&gt; c[3, 5, 1, 2]&gt;&gt;&gt; len(b)3&gt;&gt;&gt; len(c)4set 无序不重复元素集&gt;&gt;&gt; a = [5, 2, 5, 1, 4, 3, 4] &gt;&gt;&gt; print a[5, 2, 5, 1, 4, 3, 4]&gt;&gt;&gt; print set(a)set([1, 2, 3, 4, 5])&gt;&gt;&gt;set list互转&gt;&gt;&gt; a=set('123456')&gt;&gt;&gt; aset(['1', '3', '2', '5', '4', '6'])&gt;&gt;&gt; b=list(a)&gt;&gt;&gt; b['1', '3', '2', '5', '4', '6']&gt;&gt;&gt; s=set(b)&gt;&gt;&gt; sset(['1', '3', '2', '5', '4', '6'])" }, { "title": " 一些公式", "url": "/posts/latex/", "categories": "Datascience", "tags": "ML, Datascience", "date": "2015-06-14 00:00:00 +0000", "snippet": "平均值 mean\\[E(x)=\\frac{1}{n}(x_1+x_2+\\cdots+x_n)\\]方差(Variance)\\[D(X)=s^2=\\frac{1}{n}\\sum_{i=1}^{n}{(x_i - \\overline{x})^2}\\]标准差\\[s=\\sqrt{ \\frac{1}{n}\\sum_{i=1}^{n}{(x_i - \\overline{x})^2} }\\]方差D(x)与期望值E(X)之间的关系\\[D(x)=E(X^2)-E(X)^2\\]即\\[s^2=\\frac{1}{n}({x_1^2+x_2^2+x_3^2+\\cdots+x_n^2})-\\frac{1}{n^2}({x_1+x_2+x_3+\\cdots+x_n})^2\\]其推导" }, { "title": "Support Vector Machines", "url": "/posts/Support-Vector-Machines/", "categories": "Datascience", "tags": "ML, Datascience", "date": "2015-06-14 00:00:00 +0000", "snippet": "" }, { "title": "RandomForest And CART(Classification And Regression Tree) Notes", "url": "/posts/RandomForest-And-CART/", "categories": "Datascience", "tags": "ML, Datascience", "date": "2015-06-14 00:00:00 +0000", "snippet": "RF.go-github-fxsjy基于CART决策树的随机森林模型文章，代码" }, { "title": "Gradient Boosting Decision Tree 相关笔记整理", "url": "/posts/Gradient-Boosting-Decision-Tree/", "categories": "Datascience", "tags": "ML, Datascience", "date": "2015-06-14 00:00:00 +0000", "snippet": "首先论文Greedy Function Approximation: A Gradient Boosting Machine.一些相关的开源实现先贴几套开源实现代码的地址,这里主要研究的2,3，其中2是c++版的残差版本,3中的MART也是残差版本实现，最近在做ReRank相关的事情刚好要用到LambdaMART XgboostXgboost源码-github Xgboost文档 C++版 gbdt源码下载地址-CSDN 10积分 github修改版地址 Ranklibsourceforge地址 simple-gbdtgoogle code地址 依赖tbb库github 某同学fork版本 elf项目sourceforge地址 Spark中的GradientBoostedTreesgithub地址 暂且简单描述下 1中Xgboost支持力度很大，支持python,R，Java.etc 甚至spark 2中所指gbdt网上有几篇分析的文章都是用的这个版本，这个版本训练是没啥问题，不过predict的时候不友好，感觉简化了。修改了下 3中Ranklib支持的算法也很多，基本可以开包即用了. 4中simple-gbdt，依赖tbb库. Spark中的实现 讲到GBDT的时候首先应该指出是残差版本还是Gradient版本，因为在原理，求解，实现上存在一些差异（这个差异在理解上可能会导致犯迷糊,反正自己绕不少弯路）,这里主要讨论残差版本。xgboost目前也在使用，还没深入研究，这里主要研究2和3中的版本。2，3也有讲解源代码的文章了。Ranklib的实现比较好理解。Future选取问题可以随机选择rand_fea_num个特征进行分裂，确定最优的分裂特性2中C++代码实现for (int i = 0; i &lt; gbdt_inf.rand_fea_num; ++i) { int select = rand() % (last+1);//随机选择一个特征 }分裂问题，分裂：分裂后的均方误差最小Best split标准计算依据计算公式：2中C++代码实现for (int j=ninf.index_b; j&lt; ninf.index_e; j++){// d = y_result_score[data_set-&gt;order_i[j]];d = data_set-&gt;y_list[data_set-&gt;order_i[j]]; left_sum += d; right_sum -= d; left_num++; right_num--;if (data_set-&gt;fv[j] &lt; data_set-&gt;fv[j+1]) {/** 均方误差Mean Squared Error, MSE）最小? */\tcrit = (left_sum * left_sum / left_num) + (right_sum * right_sum / right_num) - ninf.critparent; \tif (crit &gt; critvar) \t{\t\ttmpsplit = (data_set-&gt;fv[j] + data_set-&gt;fv[j+1]) / 2.0; // 实际分割用的feature value\t\tcritvar = crit;\t} }}if (critvar &gt; critmax) // 如果这个feature最终的critvar &gt; cirtmax, 保存信息{spinf-&gt;bestsplit = tmpsplit; // split feature vale spinf-&gt;bestid = fid; // split feature id critmax = critvar; // split crit vaule}节点的输出值节点的输出值为该节点上所有sample的label的均值Ranklib中MART的实现,在GBDT中pseudoResponses就是残差，也就是labelprotected void updateTreeOutput(RegressionTree rt){\tList&lt;Split&gt; leaves = rt.leaves();\tfor(int i=0;i&lt;leaves.size();i++)\t{\t\tfloat s1 = 0.0F;\t\tSplit s = leaves.get(i);\t\tint[] idx = s.getSamples();\t\t\t\tSystem.out.println(\"leaves(i)\" + i +\" idx.length: \"+idx.length);\t\tfor(int j=0;j&lt;idx.length;j++)\t\t{\t\t\tint k = idx[j];\t\t\ts1 += pseudoResponses[k];\t\t}\t\ts.setOutput(s1/idx.length);\t}}2中的代码gbdt_test.cpp 中跑test的时候尽然是一行输入一行输出？ 修改了几行代码char* test_file_name = argv[2];std::ifstream fin(test_file_name,std::ios::in)while(getline(fin,line))进入gbdt的目录cd lib_gbdtmake allcd output/test./gbdt-train -r 0.8 -t 100 -s 0.03 -n 30 -d 5 -m test.model -f ../../train./gbdt-test ./test.model ../../trainGDB调试代码gdb ./gbdt-train 可以设置参数,断点，执行(gdb) set args -r 0.8 -t 100 -s 0.03 -n 30 -d 5 -m test.model -f ../../train (gdb) show args参考链接 GBDT代码解读 GBDT源码剖析 GBDT算法整理 Learning To Rank之LambdaMART的前世今生 RankLib源码分析 理解GBDT算法（一）——理论 理解GBDT算法（二）——基于残差的版本 理解GBDT算法（三）——基于梯度的版本 求解分裂问题参考李航博士统计学习方法-Machine Learning &amp; Algorithm 决策树与迭代决策树（GBDT） " }, { "title": "性能测试", "url": "/posts/ptest/", "categories": "test", "tags": "test, jmeter, java", "date": "2015-06-14 00:00:00 +0000", "snippet": "性能测试工具，用过LR,jmeter， ngrinderjmeter压力测试脚本暂时是直接从win写好，copy过去。然后就可以改jmx文件的参数了。执行命令 bin/jmeter.sh -n -t xxx-api.jmx -l xxx.jtl &gt;&gt;xxx.log &amp; 完了之后xxx.jtl列出了每次请求的数据,其中最后一列是每个请求的总耗时1459328374461,707,HTTP请求,200,OK,线程组 1-13,text,true,338,243,243,7071459328374467,701,HTTP请求,200,OK,线程组 1-49,text,true,338,243,243,7011459328374470,707,HTTP请求,200,OK,线程组 1-34,text,true,338,245,245,7071459328374447,724,HTTP请求,200,OK,线程组 1-54,text,true,338,243,243,7241459328374463,708,HTTP请求,200,OK,线程组 1-58,text,true,338,243,243,708linux下有个不好就是没有win下的聚合报告，可以统计90%,95%,99%耗时的比例,linux只能自己算？cat xxx.jtl |awk -F\",\" '{if($12&gt;2000){print $12}}'|wc -lcat xxx.jtl |awk -F\",\" '{if($12&gt;2000){print $12}}'|wc -lxxx.log,是统计数据Creating summariser &lt;summary&gt;Created the tree successfully using infobip-api.jmxStarting the test @ Wed Mar 30 09:59:34 BST 2016 (1459328374151)Waiting for possible shutdown message on port 4447生成概要结果 + 1 in 1s = 1.0/s Avg: 707 Min: 707 Max: 707 Err: 0 (0.00%) Active: 243 Started: 243 Finished: 0summary + 1 in 1s = 1.0/s Avg: 707 Min: 707 Max: 707 Err: 0 (0.00%) Active: 245 Started: 245 Finished: 0生成概要结果 + 9647 in 25s = 388.5/s Avg: 771 Min: 627 Max: 4205 Err: 0 (0.00%) Active: 300 Started: 300 Finished: 0生成概要结果 = 9648 in 26s = 373.9/s Avg: 771 Min: 627 Max: 4205 Err: 0 (0.00%)summary + 9647 in 25s = 388.6/s Avg: 771 Min: 627 Max: 4205 Err: 0 (0.00%) Active: 300 Started: 300 Finished: 0summary = 9648 in 26s = 373.9/s Avg: 771 Min: 627 Max: 4205 Err: 0 (0.00%)生成概要结果 + 9184 in 30s = 306.1/s Avg: 967 Min: 629 Max: 4762 Err: 0 (0.00%) Active: 300 Started: 300 Finished: 0生成概要结果 = 18832 in 56s = 337.5/s Avg: 866 Min: 627 Max: 4762 Err: 0 (0.00%)summary + 9184 in 30s = 306.1/s Avg: 967 Min: 629 Max: 4762 Err: 0 (0.00%) Active: 300 Started: 300 Finished: 0summary = 18832 in 56s = 337.4/s Avg: 866 Min: 627 Max: 4762 Err: 0 (0.00%)简单代码计算QPS线程方式import java.util.Random;import java.util.concurrent.CountDownLatch;public class ThreadPtestMain {\t\tpublic static void main(String[] args) {\t\t\t\tBizService bizService = new BizService();\t\t\t\tString[] randomParamsArray = {\"param1\",\"param2\",\"param3\"};\t\t\t\tRandom rd=new Random();\t\tint threadCount = 200; long reqPerThread = 10000; \tCountDownLatch countDownLatch = new CountDownLatch(threadCount); \t \tlong start = System.currentTimeMillis(); \t Thread[] threads = new Thread[threadCount]; for(int i=0; i&lt;threadCount; i++){ \tthreads[i] = new PThread(bizService,\t\t\t\t\treqPerThread, randomParamsArray, rd, countDownLatch); } for(int i=0; i&lt;threadCount; i++){ threads[i].start(); } for(int i=0; i&lt;threadCount; i++){ try { \t threads[i].join(); } catch (InterruptedException e) { System.out.println(\"error: \"+e.getMessage()); } } long end = System.currentTimeMillis(); System.out.println(\"QPS: \"+(reqPerThread*threadCount)*1000.0/(end-start)+\" /s\");\t}\tstatic class PThread extends Thread{\t\t\t\tprivate BizService bizService;\t\t\t\tprivate long reqPerThread;\t\t\t\tprivate String[] randomParamsArray;\t\t\t\tprivate Random rd;\t\t\t\tprivate CountDownLatch countDownLatch;\t\t\t\tpublic PThread(BizService bizService,long reqPerThread, String[] randomParamsArray,Random rd,CountDownLatch countDownLatch) {\t\t\t\t\t\tthis.bizService =bizService;\t\t\tthis.reqPerThread =reqPerThread;\t\t\tthis.randomParamsArray =randomParamsArray;\t\t\tthis.rd=rd;\t\t\tthis.countDownLatch = countDownLatch;\t\t\t\t\t}\t\t@Override\t\tpublic void run() {\t\t\ttry {\t\t\t\tfor (int i = 0; i &lt; reqPerThread; i++) {\t\t\t\t bizService.doSomeBiz(randomParamsArray[rd.nextInt(randomParamsArray.length)]);\t\t\t\t}\t\t\t\t\t\t\t} catch (Exception e) {\t\t\t\t\t\t\t}finally{\t\t\t\t\t\t\t}\t\t\tcountDownLatch.countDown();\t\t\t\t}\t}}ExecutorServiceimport java.util.ArrayList;import java.util.List;import java.util.Random;import java.util.concurrent.Callable;import java.util.concurrent.CountDownLatch;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.FutureTask;public class ExecPtestMain {\t\tpublic static void main(String[] args) {\t\t\t\tBizService bizService = new BizService();\t\t\t\tString[] randomParamsArray = {\"param1\",\"param2\",\"param3\"};\t\tRandom rd=new Random();\t\t\t\tlong reqPerThread = 10000;\t\tint threadCount = 100;\t\t\t\tCountDownLatch countDownLatch = new CountDownLatch(threadCount);\t\tList&lt;FutureTask&gt; list= new ArrayList&lt;FutureTask&gt;();\t\tExecutorService executors = Executors.newCachedThreadPool();\t\t\t\tlong start = System.currentTimeMillis();\t\t\t\tfor (int i = 0; i &lt; threadCount; i++) {\t\t\tFutureTask futureTask = new FutureTask&lt;Object&gt;(new PThread(bizService,\t\t\t\t\treqPerThread, randomParamsArray, rd, countDownLatch));\t\t\texecutors.execute(futureTask);\t\t\tlist.add(futureTask);\t\t\texecutors.execute(futureTask);//\t\t\tfutureTask.get();\t\t}\t\ttry {\t\t\tcountDownLatch.await();\t\t} catch (InterruptedException e) {\t\t\tSystem.out.println(\"await\" + e);\t\t}\t\t\t\tlong end = System.currentTimeMillis();\t\t\t\tSystem.out.println(\"QPS: \" + threadCount * reqPerThread * 1000.0 / (end - start));\t\t\t}\t\tstatic class PThread implements Callable{\t\t\t\tprivate BizService bizService;\t\t\t\tprivate long reqPerThread;\t\t\t\tprivate String[] randomParamsArray;\t\t\t\tprivate Random rd;\t\t\t\tprivate CountDownLatch countDownLatch;\t\t\t\tpublic PThread(BizService bizService,long reqPerThread, String[] randomParamsArray,Random rd,CountDownLatch countDownLatch) {\t\t\t\t\t\tthis.bizService =bizService;\t\t\tthis.reqPerThread =reqPerThread;\t\t\tthis.randomParamsArray =randomParamsArray;\t\t\tthis.rd=rd;\t\t\tthis.countDownLatch = countDownLatch;\t\t\t\t\t}\t\t@Override\t\tpublic Object call() throws Exception {\t\t\tObject ret = null;\t\t\ttry {\t\t\t\tfor (int i = 0; i &lt; reqPerThread; i++) {\t\t\t\t bizService.doSomeBiz(randomParamsArray[rd.nextInt(randomParamsArray.length)]);\t\t\t\t}\t\t\t\t\t\t\t} catch (Exception e) {\t\t\t\t\t\t\t}finally{\t\t\t\t\t\t\t}\t\t\tcountDownLatch.countDown();\t\t\t\t\treturn ret;\t\t}\t}}" }, { "title": "MongoDB各种疑难杂症", "url": "/posts/Mongodb3/", "categories": "MongoDB", "tags": "MongoDB, MongoDB", "date": "2015-06-13 00:00:00 +0000", "snippet": "很久没用mongo了，上次用还是两年前用的，发现连上去废了，报了个这玩意。什么鬼！JavaScript execution failed: listDatabases failed:{ \"note\" : \"from execCommand\", \"ok\" : 0, \"errmsg\" : \"not master\" } at src/mongo/shell/mongo.js:L46解决方案,执行下就好了。rs.slaveOk()" }, { "title": "Java jVM", "url": "/posts/jvm/", "categories": "Java", "tags": "Java, JVM, tools", "date": "2015-06-13 00:00:00 +0000", "snippet": "jmapjmap -dump:live,format=b,file=dump &lt;pid&gt; dump出Java堆内存，jstackjstack &lt;pid&gt; 输出线程堆栈jhatjhat -J-mx768m -port 9000 dump.dump" }, { "title": "Java File OP", "url": "/posts/javafileop/", "categories": "Java", "tags": "Java, File, tools", "date": "2015-06-13 00:00:00 +0000", "snippet": "读取CSV文件依赖&lt;dependency&gt;\t&lt;groupId&gt;net.sf.opencsv&lt;/groupId&gt;\t&lt;artifactId&gt;opencsv&lt;/artifactId&gt;\t&lt;version&gt;2.3&lt;/version&gt;&lt;/dependency&gt;读取文件 public static void main(String[] args) { \tString name = \"C:/Users/Desktop/suggest.csv\"; \t Reader inputStreamReader;\ttry {\t\tinputStreamReader = new InputStreamReader(new FileInputStream(new java.io.File(name)));\t\t CSVReader reader = new CSVReader(inputStreamReader); \t\t String[] nextLine; \t\t while (( nextLine = reader.readNext()) != null) {\t\t\t for (int i = 0; i &lt; nextLine.length; i++) {\t\t\t\tSystem.out.println(nextLine[i]);\t\t\t}\t\t }\t} catch (FileNotFoundException e) {\t\te.printStackTrace();\t}catch (IOException e) {\t\te.printStackTrace();\t}}" }, { "title": "Java GC", "url": "/posts/GC/", "categories": "Java", "tags": "Java, File, tools", "date": "2015-06-13 00:00:00 +0000", "snippet": "[root@VM_52_154 ~]# jstat -gcutil 16354 1000 1000 S0 S1 E O P YGC YGCT FGC FGCT GCT 0.00 84.77 0.00 41.77 59.85 4387 330.453 22 2.080 332.534 0.00 84.77 43.85 41.77 59.85 4387 330.453 22 2.080 332.534 70.72 72.11 100.00 42.19 59.85 4389 330.601 22 2.080 332.681 0.00 72.11 36.16 42.18 59.85 4389 330.757 22 2.080 332.837 0.00 52.22 0.00 42.61 59.85 4391 331.023 22 2.080 333.103 61.17 0.00 0.00 42.80 59.85 4392 331.160 22 2.080 333.241 0.00 77.91 19.07 42.99 59.85 4393 331.295 22 2.080 333.375 58.41 0.00 57.12 43.17 59.85 4394 331.429 22 2.080 333.510 0.00 78.09 30.61 43.36 59.85 4395 331.578 22 2.080 333.659 66.56 0.00 82.97 43.58 59.85 4396 331.715 22 2.080 333.795 0.00 66.94 43.85 43.72 59.85 4397 331.860 22 2.080 333.941 0.00 90.32 0.00 44.20 59.85 4399 332.148 22 2.080 334.229 59.82 0.00 65.06 44.35 59.85 4400 332.277 22 2.080 334.357 59.60 0.00 0.87 44.79 59.85 4402 332.540 22 2.080 334.620 0.00 64.04 75.05 44.94 59.85 4403 332.666 22 2.080 334.747 0.00 52.32 0.00 45.35 59.85 4405 332.914 22 2.080 334.994100[root@VM_52_154 ~]# jstat -gcutil 16354 100 100 S0 S1 E O P YGC YGCT FGC FGCT GCT 82.42 32.50 100.00 48.99 60.37 6995 697.236 44 5.238 702.474 0.00 56.87 0.00 49.18 60.37 6995 697.370 44 5.238 702.608 0.00 56.87 16.68 49.18 60.37 6995 697.370 44 5.238 702.608 0.00 56.87 40.31 49.18 60.37 6995 697.370 44 5.238 702.608 0.00 56.87 61.20 49.18 60.37 6995 697.370 44 5.238 702.608 0.00 56.87 82.08 49.18 60.37 6995 697.370 44 5.238 702.608 24.46 56.87 100.00 49.19 60.37 6996 697.370 44 5.238 702.608 61.16 56.87 100.00 49.33 60.37 6996 697.370 44 5.238 702.608 61.16 0.00 9.75 49.34 60.37 6996 697.517 44 5.238 702.755 61.16 0.00 32.28 49.34 60.37 6996 697.517 44 5.238 702.755 61.16 0.00 42.00 49.34 60.37 6996 697.517 44 5.238 702.755 61.16 0.00 52.38 49.34 60.37 6996 697.517 44 5.238 702.755 61.16 0.00 58.23 49.34 60.37 6996 697.517 44 5.238 702.755 61.16 0.00 73.16 49.34 60.37 6996 697.517 44 5.238 702.755 61.16 0.00 94.53 49.34 60.37 6996 697.517 44 5.238 702.755 61.16 47.97 100.00 49.52 60.37 6997 697.517 44 5.238 702.755 0.00 59.97 3.95 49.57 60.37 6997 697.643 44 5.238 702.881 0.00 59.97 23.89 49.57 60.37 6997 697.643 44 5.238 702.881 0.00 59.97 48.79 49.57 60.37 6997 697.643 44 5.238 702.881 0.00 59.97 73.93 49.57 60.37 6997 697.643 44 5.238 702.881 0.00 59.97 97.73 49.57 60.37 6998 697.643 44 5.238 702.881 52.80 59.97 100.00 49.60 60.37 6998 697.643 44 5.238 702.881 73.92 0.00 6.69 49.70 60.37 6998 697.798 44 5.238 703.035 73.92 0.00 29.33 49.70 60.37 6998 697.798 44 5.238 703.035 73.92 0.00 51.03 49.70 60.37 6998 697.798 44 5.238 703.035 73.92 0.00 70.07 49.70 60.37 6998 697.798 44 5.238 703.035 73.92 0.00 88.55 49.70 60.37 6998 697.798 44 5.238 703.035 73.92 0.00 97.16 49.70 60.37 6998 697.798 44 5.238 703.035 73.92 0.00 97.69 49.70 60.37 6998 697.798 44 5.238 703.035 73.92 0.00 98.16 49.70 60.37 6998 697.798 44 5.238 703.035 73.92 0.00 98.22 49.70 60.37 6998 697.798 44 5.238 703.035 73.92 0.00 98.22 49.70 60.37 6998 697.798 44 5.238 703.035 73.92 0.00 98.22 49.70 60.37 6998 697.798 44 5.238 703.035 73.92 52.52 100.00 49.70 60.37 6999 697.798 44 5.238 703.035 73.92 52.52 100.00 49.91 60.37 6999 697.798 44 5.238 703.035 0.00 52.52 14.99 49.95 60.37 6999 697.923 44 5.238 703.161 0.00 52.52 34.33 49.95 60.37 6999 697.923 44 5.238 703.161 0.00 52.52 59.61 49.95 60.37 6999 697.923 44 5.238 703.161 0.00 52.52 84.85 49.95 60.37 6999 697.923 44 5.238 703.161 26.43 52.52 100.00 49.96 60.37 7000 697.923 44 5.238 703.161 66.08 52.52 100.00 50.06 60.37 7000 697.923 44 5.238 703.161 72.69 0.00 0.03 50.04 60.37 7000 698.075 45 5.238 703.313 72.69 0.00 0.53 50.04 60.37 7000 698.075 45 5.404 703.479 72.69 0.00 13.78 50.04 60.37 7000 698.075 45 5.404 703.479 72.69 0.00 33.23 50.04 60.37 7000 698.075 45 5.404 703.479 72.69 0.00 44.83 50.04 60.37 7000 698.075 45 5.404 703.479 72.69 0.00 48.20 50.04 60.37 7000 698.075 45 5.404 703.479 72.69 0.00 48.74 50.04 60.37 7000 698.075 45 5.404 703.479 72.69 0.00 49.25 50.04 60.37 7000 698.075 45 5.404 703.479 72.69 0.00 49.25 50.04 60.37 7000 698.075 45 5.404 703.479 72.69 0.00 49.25 50.04 60.37 7000 698.075 45 5.404 703.479 72.69 0.00 49.25 50.04 60.37 7000 698.075 45 5.404 703.479 72.69 0.00 58.78 50.04 60.37 7000 698.075 45 5.404 703.479 72.69 0.00 83.50 50.04 60.37 7000 698.075 45 5.404 703.479 72.69 52.51 100.00 50.06 60.37 7001 698.075 45 5.404 703.479 72.69 65.63 100.00 50.29 60.37 7001 698.075 45 5.404 703.479 0.00 65.63 14.85 50.34 60.37 7001 698.219 45 5.404 703.623 0.00 65.63 39.19 50.34 60.37 7001 698.219 45 5.404 703.623 0.00 65.63 63.02 50.34 60.37 7001 698.219 45 5.404 703.623 0.00 65.63 84.49 50.34 60.37 7001 698.219 45 5.404 703.623 30.54 65.63 100.00 50.36 60.37 7002 698.219 45 5.404 703.623 68.71 65.63 100.00 50.48 60.37 7002 698.219 45 5.404 703.623 76.34 0.00 8.27 50.53 60.37 7002 698.381 45 5.404 703.785 76.34 0.00 25.84 50.53 60.37 7002 698.381 45 5.404 703.785 76.34 0.00 41.51 50.53 60.37 7002 698.381 45 5.404 703.785 76.34 55.85 43.40 50.67 60.37 7003 698.381 46 5.404 703.785 0.00 55.85 0.40 50.60 60.37 7003 698.494 46 5.559 704.053 0.00 55.85 2.03 49.47 60.37 7003 698.494 46 5.559 704.053 0.00 55.85 2.79 47.54 60.37 7003 698.494 46 5.559 704.053 0.00 55.85 3.25 45.67 60.37 7003 698.494 46 5.559 704.053 0.00 55.85 3.60 43.80 60.37 7003 698.494 46 5.559 704.053 0.00 55.85 8.04 42.00 60.37 7003 698.494 46 5.559 704.053 0.00 55.85 30.64 41.49 60.37 7003 698.494 46 5.559 704.053 0.00 55.85 54.93 41.41 60.37 7003 698.494 46 5.559 704.053 0.00 55.85 75.84 41.26 60.37 7003 698.494 46 5.559 704.053 0.00 55.85 100.00 41.26 60.37 7004 698.494 46 5.559 704.053 57.00 55.85 100.00 41.32 60.37 7004 698.494 46 5.559 704.053 62.69 0.00 10.99 41.34 60.37 7004 698.642 46 5.559 704.201 62.69 0.00 34.74 41.34 60.37 7004 698.642 46 5.559 704.201 62.69 0.00 56.78 41.27 60.37 7004 698.642 46 5.559 704.201 62.69 0.00 72.36 40.88 60.37 7004 698.642 46 5.559 704.201 62.69 0.00 77.85 39.27 60.37 7004 698.642 46 5.559 704.201 62.69 0.00 77.85 37.40 60.37 7004 698.642 46 5.559 704.201 62.69 0.00 77.85 35.56 60.37 7004 698.642 46 5.559 704.201 62.69 0.00 77.85 33.71 60.37 7004 698.642 46 5.559 704.201 62.69 0.00 77.85 31.87 60.37 7004 698.642 46 5.559 704.201 62.69 0.00 78.61 30.04 60.37 7004 698.642 46 5.559 704.201 62.69 0.00 90.20 28.23 60.37 7004 698.642 46 5.559 704.201 62.69 46.88 100.00 27.49 60.37 7005 698.642 46 5.559 704.201 0.00 70.32 3.77 27.52 60.37 7005 698.772 46 5.559 704.330 0.00 70.32 28.64 27.33 60.37 7005 698.772 46 5.559 704.330 0.00 70.32 53.77 27.26 60.37 7005 698.772 46 5.559 704.330 0.00 70.32 76.54 27.15 60.37 7005 698.772 46 5.559 704.330 0.00 70.32 99.94 27.15 60.37 7006 698.772 46 5.559 704.330 60.42 70.32 100.00 27.20 60.37 7006 698.772 46 5.559 704.330 65.07 0.00 5.86 26.96 60.37 7006 698.929 46 5.559 704.487 65.07 0.00 20.55 26.70 60.37 7006 698.929 46 5.559 704.487 65.07 0.00 24.83 25.45 60.37 7006 698.929 46 5.559 704.487 65.07 0.00 25.82 23.59 60.37 7006 698.929 46 5.559 704.487 65.07 0.00 26.04 21.74 60.37 7006 698.929 46 5.559 704.487 65.07 0.00 26.04 19.91 60.37 7006 698.929 46 5.559 704.487 65.07 0.00 26.04 18.06 60.37 7006 698.929 46 5.559 704.487 65.07 0.00 26.04 16.32 60.37 7006 698.929 46 5.559 704.487 65.07 0.00 26.04 14.65 60.37 7006 698.929 46 5.559 704.487 65.07 0.00 41.52 13.54 60.37 7006 698.929 46 5.559 704.487 65.07 0.00 62.68 13.38 60.37 7006 698.929 46 5.559 704.487 65.07 0.00 85.36 13.26 60.37 7006 698.929 46 5.559 704.487 65.07 48.59 100.00 13.14 60.37 7007 698.929 46 5.559 704.487 0.00 60.74 0.00 13.35 60.37 7007 699.061 46 5.559 704.620Full GCTotal time for which application threads were stopped: 0.0001290 secondsTotal time for which application threads were stopped: 0.0002130 secondsTotal time for which application threads were stopped: 0.0001070 secondsTotal time for which application threads were stopped: 0.0002020 secondsTotal time for which application threads were stopped: 0.0003300 secondsTotal time for which application threads were stopped: 0.0011750 secondsTotal time for which application threads were stopped: 0.0001280 secondsTotal time for which application threads were stopped: 0.0003140 secondsTotal time for which application threads were stopped: 0.0005070 secondsTotal time for which application threads were stopped: 0.0001550 secondsTotal time for which application threads were stopped: 0.0004560 secondsTotal time for which application threads were stopped: 0.0023090 secondsTotal time for which application threads were stopped: 0.0001230 secondsTotal time for which application threads were stopped: 0.0001820 secondsTotal time for which application threads were stopped: 0.0002610 secondsTotal time for which application threads were stopped: 0.0000920 secondsTotal time for which application threads were stopped: 0.0001300 secondsTotal time for which application threads were stopped: 0.0001250 secondsTotal time for which application threads were stopped: 0.0000710 secondsTotal time for which application threads were stopped: 0.0001520 secondsTotal time for which application threads were stopped: 0.0002730 secondsTotal time for which application threads were stopped: 0.0001060 secondsTotal time for which application threads were stopped: 0.0001090 secondsTotal time for which application threads were stopped: 0.0001310 secondsTotal time for which application threads were stopped: 0.0000530 secondsTotal time for which application threads were stopped: 0.0000480 secondsTotal time for which application threads were stopped: 0.0002200 secondsTotal time for which application threads were stopped: 0.0002610 secondsTotal time for which application threads were stopped: 0.0000460 secondsTotal time for which application threads were stopped: 0.0000430 secondsTotal time for which application threads were stopped: 0.0000500 secondsTotal time for which application threads were stopped: 0.0000460 secondsTotal time for which application threads were stopped: 0.0001250 secondsTotal time for which application threads were stopped: 0.0000610 secondsTotal time for which application threads were stopped: 0.0002210 secondsTotal time for which application threads were stopped: 0.0001650 secondsTotal time for which application threads were stopped: 0.0000650 secondsTotal time for which application threads were stopped: 0.0000550 secondsTotal time for which application threads were stopped: 0.0000490 secondsTotal time for which application threads were stopped: 0.0000450 secondsTotal time for which application threads were stopped: 0.0003020 secondsTotal time for which application threads were stopped: 0.0002510 secondsTotal time for which application threads were stopped: 0.0000900 secondsTotal time for which application threads were stopped: 0.0000900 secondsTotal time for which application threads were stopped: 0.0006030 secondsTotal time for which application threads were stopped: 0.0000420 secondsTotal time for which application threads were stopped: 0.0000460 secondsTotal time for which application threads were stopped: 0.0002690 secondsTotal time for which application threads were stopped: 0.0003010 secondsTotal time for which application threads were stopped: 0.0000530 secondsTotal time for which application threads were stopped: 0.0001440 secondsTotal time for which application threads were stopped: 0.0000820 secondsTotal time for which application threads were stopped: 0.0001030 secondsTotal time for which application threads were stopped: 0.0001300 secondsTotal time for which application threads were stopped: 0.0001890 secondsTotal time for which application threads were stopped: 0.0002310 secondsTotal time for which application threads were stopped: 0.0001140 secondsTotal time for which application threads were stopped: 0.0002720 seconds{Heap before GC invocations=0 (full 0): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 0K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 29312K, used 29111K [0x00000007fae00000, 0x00000007fcaa0000, 0x0000000800000000)2016-09-06T15:54:08.800+0800: 49.471: [GC 49.471: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 44744648 bytes, 44744648 total: 1398144K-&gt;43953K(1747648K), 0.0555620 secs] 1398144K-&gt;43953K(8039104K), 0.0556550 secs] [Times: user=0.17 sys=0.02, real=0.06 secs] Heap after GC invocations=1 (full 0): par new generation total 1747648K, used 43953K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 12% used [0x00000006658b0000, 0x000000066839c540, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 0K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 29312K, used 29111K [0x00000007fae00000, 0x00000007fcaa0000, 0x0000000800000000)}Total time for which application threads were stopped: 0.0560510 secondsTotal time for which application threads were stopped: 0.0000760 secondsTotal time for which application threads were stopped: 0.0001060 secondsTotal time for which application threads were stopped: 0.0001330 secondsTotal time for which application threads were stopped: 0.0001240 secondsTotal time for which application threads were stopped: 0.0001820 secondsTotal time for which application threads were stopped: 0.0001970 secondsTotal time for which application threads were stopped: 0.0001210 secondsTotal time for which application threads were stopped: 0.0001340 secondsTotal time for which application threads were stopped: 0.0001290 secondsTotal time for which application threads were stopped: 0.0001160 secondsTotal time for which application threads were stopped: 0.0001420 secondsTotal time for which application threads were stopped: 0.0001760 secondsTotal time for which application threads were stopped: 0.0000580 secondsTotal time for which application threads were stopped: 0.0001380 secondsTotal time for which application threads were stopped: 0.0001210 secondsTotal time for which application threads were stopped: 0.0001690 secondsTotal time for which application threads were stopped: 0.0001290 secondsTotal time for which application threads were stopped: 0.0001430 secondsTotal time for which application threads were stopped: 0.0001020 secondsTotal time for which application threads were stopped: 0.0002000 secondsTotal time for which application threads were stopped: 0.0000910 secondsTotal time for which application threads were stopped: 0.0000410 secondsTotal time for which application threads were stopped: 0.0000340 secondsTotal time for which application threads were stopped: 0.0000410 secondsTotal time for which application threads were stopped: 0.0000370 secondsTotal time for which application threads were stopped: 0.0000430 secondsTotal time for which application threads were stopped: 0.0001690 secondsTotal time for which application threads were stopped: 0.0000370 secondsTotal time for which application threads were stopped: 0.0000730 secondsTotal time for which application threads were stopped: 0.0001860 secondsTotal time for which application threads were stopped: 0.0001410 secondsTotal time for which application threads were stopped: 0.0002060 secondsTotal time for which application threads were stopped: 0.0000960 secondsTotal time for which application threads were stopped: 0.0000460 secondsTotal time for which application threads were stopped: 0.0000900 secondsTotal time for which application threads were stopped: 0.0000880 secondsTotal time for which application threads were stopped: 0.0000440 secondsTotal time for which application threads were stopped: 0.0000880 secondsTotal time for which application threads were stopped: 0.0000880 secondsTotal time for which application threads were stopped: 0.0001410 secondsTotal time for which application threads were stopped: 0.0000620 secondsTotal time for which application threads were stopped: 0.0000480 secondsTotal time for which application threads were stopped: 0.0000350 secondsTotal time for which application threads were stopped: 0.0000350 secondsTotal time for which application threads were stopped: 0.0000370 secondsTotal time for which application threads were stopped: 0.0000360 secondsTotal time for which application threads were stopped: 0.0000360 secondsTotal time for which application threads were stopped: 0.0003180 secondsTotal time for which application threads were stopped: 0.0001230 secondsTotal time for which application threads were stopped: 0.0001970 secondsTotal time for which application threads were stopped: 0.0002250 secondsTotal time for which application threads were stopped: 0.0003800 secondsTotal time for which application threads were stopped: 0.0000580 secondsTotal time for which application threads were stopped: 0.0000530 secondsTotal time for which application threads were stopped: 0.0000370 secondsTotal time for which application threads were stopped: 0.0000360 secondsTotal time for which application threads were stopped: 0.0000350 secondsTotal time for which application threads were stopped: 0.0000410 secondsTotal time for which application threads were stopped: 0.0000350 secondsTotal time for which application threads were stopped: 0.0000400 secondsTotal time for which application threads were stopped: 0.0000480 secondsTotal time for which application threads were stopped: 0.0000420 secondsTotal time for which application threads were stopped: 0.0000360 secondsTotal time for which application threads were stopped: 0.0001750 secondsTotal time for which application threads were stopped: 0.0000950 secondsTotal time for which application threads were stopped: 0.0000850 secondsTotal time for which application threads were stopped: 0.0000840 secondsTotal time for which application threads were stopped: 0.0000950 secondsTotal time for which application threads were stopped: 0.0000810 secondsTotal time for which application threads were stopped: 0.0000800 secondsTotal time for which application threads were stopped: 0.0000890 secondsTotal time for which application threads were stopped: 0.0000790 secondsTotal time for which application threads were stopped: 0.0000850 secondsTotal time for which application threads were stopped: 0.0000870 secondsTotal time for which application threads were stopped: 0.0000830 secondsTotal time for which application threads were stopped: 0.0000820 secondsTotal time for which application threads were stopped: 0.0000890 secondsTotal time for which application threads were stopped: 0.0000770 secondsTotal time for which application threads were stopped: 0.0000800 secondsTotal time for which application threads were stopped: 0.0000900 secondsTotal time for which application threads were stopped: 0.0000770 secondsTotal time for which application threads were stopped: 0.0000790 secondsTotal time for which application threads were stopped: 0.0001770 secondsTotal time for which application threads were stopped: 0.0001910 secondsTotal time for which application threads were stopped: 0.0000380 secondsTotal time for which application threads were stopped: 0.0000410 secondsTotal time for which application threads were stopped: 0.0001960 secondsTotal time for which application threads were stopped: 0.0004250 secondsTotal time for which application threads were stopped: 0.0001430 secondsTotal time for which application threads were stopped: 0.0000760 secondsTotal time for which application threads were stopped: 0.0001270 secondsTotal time for which application threads were stopped: 0.0002930 secondsTotal time for which application threads were stopped: 0.0001470 secondsTotal time for which application threads were stopped: 0.0004660 secondsTotal time for which application threads were stopped: 0.0001540 secondsTotal time for which application threads were stopped: 0.0001270 secondsTotal time for which application threads were stopped: 0.0002350 secondsTotal time for which application threads were stopped: 0.0001970 secondsTotal time for which application threads were stopped: 0.0005060 secondsTotal time for which application threads were stopped: 0.0004810 secondsTotal time for which application threads were stopped: 0.0041030 secondsTotal time for which application threads were stopped: 0.0008060 secondsTotal time for which application threads were stopped: 0.0001260 secondsTotal time for which application threads were stopped: 0.0001740 secondsTotal time for which application threads were stopped: 0.0001290 secondsTotal time for which application threads were stopped: 0.0003680 secondsTotal time for which application threads were stopped: 0.0002810 secondsTotal time for which application threads were stopped: 0.0048470 secondsTotal time for which application threads were stopped: 0.0008200 secondsTotal time for which application threads were stopped: 0.0002600 secondsTotal time for which application threads were stopped: 0.0004100 secondsTotal time for which application threads were stopped: 0.0002650 secondsTotal time for which application threads were stopped: 0.0001710 secondsTotal time for which application threads were stopped: 0.0002590 secondsTotal time for which application threads were stopped: 0.0003490 secondsTotal time for which application threads were stopped: 0.0005410 secondsTotal time for which application threads were stopped: 0.0007240 secondsTotal time for which application threads were stopped: 0.0047350 secondsTotal time for which application threads were stopped: 0.0015360 secondsTotal time for which application threads were stopped: 0.0003280 secondsTotal time for which application threads were stopped: 0.0032110 secondsTotal time for which application threads were stopped: 0.0003110 secondsTotal time for which application threads were stopped: 0.0013550 secondsTotal time for which application threads were stopped: 0.0018660 secondsTotal time for which application threads were stopped: 0.0002700 secondsTotal time for which application threads were stopped: 0.0014500 secondsTotal time for which application threads were stopped: 0.0024510 secondsTotal time for which application threads were stopped: 0.0004430 secondsTotal time for which application threads were stopped: 0.0003650 secondsTotal time for which application threads were stopped: 0.0003360 secondsTotal time for which application threads were stopped: 0.0002040 secondsTotal time for which application threads were stopped: 0.0003040 secondsTotal time for which application threads were stopped: 0.0000970 secondsTotal time for which application threads were stopped: 0.0001200 secondsTotal time for which application threads were stopped: 0.0045550 secondsTotal time for which application threads were stopped: 0.0019270 secondsTotal time for which application threads were stopped: 0.0003400 secondsTotal time for which application threads were stopped: 0.0001700 secondsTotal time for which application threads were stopped: 0.0013030 secondsTotal time for which application threads were stopped: 0.0003200 secondsTotal time for which application threads were stopped: 0.0001620 secondsTotal time for which application threads were stopped: 0.0002190 secondsTotal time for which application threads were stopped: 0.0001550 secondsTotal time for which application threads were stopped: 0.0002760 secondsTotal time for which application threads were stopped: 0.0014700 secondsTotal time for which application threads were stopped: 0.0002330 secondsTotal time for which application threads were stopped: 0.0023320 secondsTotal time for which application threads were stopped: 0.0005800 secondsTotal time for which application threads were stopped: 0.0019820 secondsTotal time for which application threads were stopped: 0.0002150 secondsTotal time for which application threads were stopped: 0.0004270 secondsTotal time for which application threads were stopped: 0.0003670 secondsTotal time for which application threads were stopped: 0.0053050 secondsTotal time for which application threads were stopped: 0.0005730 secondsTotal time for which application threads were stopped: 0.0004020 secondsTotal time for which application threads were stopped: 0.0002180 secondsTotal time for which application threads were stopped: 0.0027340 secondsTotal time for which application threads were stopped: 0.0078610 secondsTotal time for which application threads were stopped: 0.0078280 secondsTotal time for which application threads were stopped: 0.0002990 secondsTotal time for which application threads were stopped: 0.0010400 secondsTotal time for which application threads were stopped: 0.0002690 secondsTotal time for which application threads were stopped: 0.0082130 secondsTotal time for which application threads were stopped: 0.0080970 secondsTotal time for which application threads were stopped: 0.0081190 secondsTotal time for which application threads were stopped: 0.0015930 secondsTotal time for which application threads were stopped: 0.0093000 secondsTotal time for which application threads were stopped: 0.0048000 secondsTotal time for which application threads were stopped: 0.0029940 secondsTotal time for which application threads were stopped: 0.0020870 secondsTotal time for which application threads were stopped: 0.0100980 secondsTotal time for which application threads were stopped: 0.0002710 secondsTotal time for which application threads were stopped: 0.0089660 secondsTotal time for which application threads were stopped: 0.0051580 secondsTotal time for which application threads were stopped: 0.0072480 secondsTotal time for which application threads were stopped: 0.0085650 secondsTotal time for which application threads were stopped: 0.0003500 secondsTotal time for which application threads were stopped: 0.0002810 secondsTotal time for which application threads were stopped: 0.0086770 secondsTotal time for which application threads were stopped: 0.0176260 secondsTotal time for which application threads were stopped: 0.0029240 secondsTotal time for which application threads were stopped: 0.0095710 seconds{Heap before GC invocations=1 (full 0): par new generation total 1747648K, used 1442097K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 12% used [0x00000006658b0000, 0x000000066839c540, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 0K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32000K, used 31939K [0x00000007fae00000, 0x00000007fcd40000, 0x0000000800000000)2016-09-06T15:58:23.607+0800: 304.278: [GC 304.278: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 315551920 bytes, 315551920 total- age 2: 10698840 bytes, 326250760 total: 1442097K-&gt;330788K(1747648K), 0.1264780 secs] 1442097K-&gt;330788K(8039104K), 0.1267260 secs] [Times: user=0.45 sys=0.06, real=0.13 secs] Heap after GC invocations=2 (full 0): par new generation total 1747648K, used 330788K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 94% used [0x0000000650360000, 0x0000000664669270, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 0K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32000K, used 31939K [0x00000007fae00000, 0x00000007fcd40000, 0x0000000800000000)}Total time for which application threads were stopped: 0.1341090 secondsTotal time for which application threads were stopped: 0.0003450 secondsTotal time for which application threads were stopped: 0.0203510 secondsTotal time for which application threads were stopped: 0.0032830 secondsTotal time for which application threads were stopped: 0.0085100 secondsTotal time for which application threads were stopped: 0.0037850 secondsTotal time for which application threads were stopped: 0.0024280 secondsTotal time for which application threads were stopped: 0.0045510 secondsTotal time for which application threads were stopped: 0.0024920 secondsTotal time for which application threads were stopped: 0.0003960 seconds{Heap before GC invocations=2 (full 0): par new generation total 1747648K, used 1728932K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 94% used [0x0000000650360000, 0x0000000664669270, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 0K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32384K, used 32260K [0x00000007fae00000, 0x00000007fcda0000, 0x0000000800000000)2016-09-06T15:58:29.435+0800: 310.106: [GC 310.106: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 238631344 bytes, 238631344 total- age 2: 118534448 bytes, 357165792 total: 1728932K-&gt;349504K(1747648K), 0.8754940 secs] 1728932K-&gt;661659K(8039104K), 0.8759730 secs] [Times: user=2.68 sys=0.22, real=0.88 secs] Heap after GC invocations=3 (full 0): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 312155K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32384K, used 32260K [0x00000007fae00000, 0x00000007fcda0000, 0x0000000800000000)}Total time for which application threads were stopped: 0.8830320 secondsTotal time for which application threads were stopped: 0.0064690 secondsTotal time for which application threads were stopped: 0.0086950 secondsTotal time for which application threads were stopped: 0.0104760 seconds{Heap before GC invocations=3 (full 0): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 312155K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32576K, used 32393K [0x00000007fae00000, 0x00000007fcdd0000, 0x0000000800000000)2016-09-06T15:58:33.308+0800: 313.978: [GC 313.979: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 342017336 bytes, 342017336 total- age 2: 15874504 bytes, 357891840 total: 1747648K-&gt;349504K(1747648K), 0.6657610 secs] 2059803K-&gt;1078506K(8039104K), 0.6665170 secs] [Times: user=2.17 sys=0.10, real=0.67 secs] Heap after GC invocations=4 (full 0): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 729002K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32576K, used 32393K [0x00000007fae00000, 0x00000007fcdd0000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6756470 secondsTotal time for which application threads were stopped: 0.0119920 secondsTotal time for which application threads were stopped: 0.0118810 secondsTotal time for which application threads were stopped: 0.0088300 secondsTotal time for which application threads were stopped: 0.0263880 secondsTotal time for which application threads were stopped: 0.0237000 seconds{Heap before GC invocations=4 (full 0): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 729002K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32576K, used 32503K [0x00000007fae00000, 0x00000007fcdd0000, 0x0000000800000000)2016-09-06T15:58:38.820+0800: 319.491: [GC 319.492: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 357884376 bytes, 357884376 total: 1747648K-&gt;349504K(1747648K), 0.5378510 secs] 2476650K-&gt;1480848K(8039104K), 0.5388000 secs] [Times: user=1.72 sys=0.07, real=0.54 secs] Heap after GC invocations=5 (full 0): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 1131344K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32576K, used 32503K [0x00000007fae00000, 0x00000007fcdd0000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5442110 secondsTotal time for which application threads were stopped: 0.0031560 secondsTotal time for which application threads were stopped: 0.0004830 secondsTotal time for which application threads were stopped: 0.0023060 secondsTotal time for which application threads were stopped: 0.0010180 secondsTotal time for which application threads were stopped: 0.0054330 secondsTotal time for which application threads were stopped: 0.0198290 secondsTotal time for which application threads were stopped: 0.0093700 seconds{Heap before GC invocations=5 (full 0): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 1131344K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32768K, used 32581K [0x00000007fae00000, 0x00000007fce00000, 0x0000000800000000)2016-09-06T15:58:42.350+0800: 323.021: [GC 323.022: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 274482200 bytes, 274482200 total: 1747648K-&gt;347577K(1747648K), 0.4539530 secs] 2878992K-&gt;1809287K(8039104K), 0.4550950 secs] [Times: user=1.43 sys=0.08, real=0.46 secs] Heap after GC invocations=6 (full 0): par new generation total 1747648K, used 347577K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006656ce620, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 1461709K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32768K, used 32581K [0x00000007fae00000, 0x00000007fce00000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4713200 secondsTotal time for which application threads were stopped: 0.0012100 secondsTotal time for which application threads were stopped: 0.0123950 secondsTotal time for which application threads were stopped: 0.0012510 secondsTotal time for which application threads were stopped: 0.0005240 secondsTotal time for which application threads were stopped: 0.0208040 secondsTotal time for which application threads were stopped: 0.0216410 seconds{Heap before GC invocations=6 (full 0): par new generation total 1747648K, used 1745721K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006656ce620, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 1461709K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32768K, used 32679K [0x00000007fae00000, 0x00000007fce00000, 0x0000000800000000)2016-09-06T15:58:46.042+0800: 326.713: [GC 326.714: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 179552496 bytes, 179552496 total- age 2: 178338816 bytes, 357891312 total: 1745721K-&gt;349504K(1747648K), 0.2317840 secs] 3207431K-&gt;1869024K(8039104K), 0.2333420 secs] [Times: user=0.86 sys=0.02, real=0.24 secs] Heap after GC invocations=7 (full 0): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 1519520K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32768K, used 32679K [0x00000007fae00000, 0x00000007fce00000, 0x0000000800000000)}Total time for which application threads were stopped: 0.2515200 secondsTotal time for which application threads were stopped: 0.0024740 secondsTotal time for which application threads were stopped: 0.0059710 secondsTotal time for which application threads were stopped: 0.0367850 secondsTotal time for which application threads were stopped: 0.0108040 secondsTotal time for which application threads were stopped: 0.0826290 seconds{Heap before GC invocations=7 (full 0): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 1519520K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32960K, used 32826K [0x00000007fae00000, 0x00000007fce30000, 0x0000000800000000)2016-09-06T15:58:51.305+0800: 331.976: [GC 331.977: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 235538784 bytes, 235538784 total- age 2: 113559008 bytes, 349097792 total: 1747648K-&gt;349504K(1747648K), 0.3935020 secs] 3267168K-&gt;2087934K(8039104K), 0.3949180 secs] [Times: user=1.32 sys=0.05, real=0.39 secs] Heap after GC invocations=8 (full 0): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 1738430K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32960K, used 32826K [0x00000007fae00000, 0x00000007fce30000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4300930 secondsTotal time for which application threads were stopped: 0.0799890 secondsTotal time for which application threads were stopped: 0.0015360 secondsTotal time for which application threads were stopped: 0.0007160 secondsTotal time for which application threads were stopped: 0.0172070 secondsTotal time for which application threads were stopped: 0.0009010 secondsTotal time for which application threads were stopped: 0.0063560 seconds{Heap before GC invocations=8 (full 0): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 1738430K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32960K, used 32886K [0x00000007fae00000, 0x00000007fce30000, 0x0000000800000000)2016-09-06T15:58:56.077+0800: 336.748: [GC 336.749: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 237123392 bytes, 237123392 total- age 2: 120768192 bytes, 357891584 total: 1747648K-&gt;349504K(1747648K), 0.6265110 secs] 3486078K-&gt;2468745K(8039104K), 0.6290870 secs] [Times: user=2.09 sys=0.06, real=0.63 secs] Heap after GC invocations=9 (full 0): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 2119241K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32960K, used 32886K [0x00000007fae00000, 0x00000007fce30000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6462920 secondsTotal time for which application threads were stopped: 0.0878660 secondsTotal time for which application threads were stopped: 0.0125270 secondsTotal time for which application threads were stopped: 0.0009140 secondsTotal time for which application threads were stopped: 0.0006630 secondsTotal time for which application threads were stopped: 0.0006660 secondsTotal time for which application threads were stopped: 0.0006590 secondsTotal time for which application threads were stopped: 0.0012190 secondsTotal time for which application threads were stopped: 0.0006920 secondsTotal time for which application threads were stopped: 0.0009800 secondsTotal time for which application threads were stopped: 0.0007250 secondsTotal time for which application threads were stopped: 0.0006940 secondsTotal time for which application threads were stopped: 0.0007810 secondsTotal time for which application threads were stopped: 0.0007740 secondsTotal time for which application threads were stopped: 0.0007610 secondsTotal time for which application threads were stopped: 0.0007810 secondsTotal time for which application threads were stopped: 0.0007230 secondsTotal time for which application threads were stopped: 0.0006670 secondsTotal time for which application threads were stopped: 0.0007620 secondsTotal time for which application threads were stopped: 0.0031020 secondsTotal time for which application threads were stopped: 0.0007700 secondsTotal time for which application threads were stopped: 0.0462840 secondsTotal time for which application threads were stopped: 0.0285660 seconds{Heap before GC invocations=9 (full 0): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 2119241K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32960K, used 32901K [0x00000007fae00000, 0x00000007fce30000, 0x0000000800000000)2016-09-06T15:59:00.440+0800: 341.111: [GC 341.112: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 182494520 bytes, 182494520 total- age 2: 175397320 bytes, 357891840 total: 1747648K-&gt;349504K(1747648K), 0.6514520 secs] 3866889K-&gt;2892859K(8039104K), 0.6533660 secs] [Times: user=2.13 sys=0.10, real=0.65 secs] Heap after GC invocations=10 (full 0): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 2543355K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32960K, used 32901K [0x00000007fae00000, 0x00000007fce30000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6848090 seconds{Heap before GC invocations=10 (full 0): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 2543355K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32960K, used 32911K [0x00000007fae00000, 0x00000007fce30000, 0x0000000800000000)2016-09-06T15:59:03.189+0800: 343.860: [GC 343.861: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 190083600 bytes, 190083600 total- age 2: 167808264 bytes, 357891864 total: 1747648K-&gt;349504K(1747648K), 0.7118590 secs] 4291003K-&gt;3342036K(8039104K), 0.7140530 secs] [Times: user=2.30 sys=0.11, real=0.71 secs] Heap after GC invocations=11 (full 0): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 2992532K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 32960K, used 32911K [0x00000007fae00000, 0x00000007fce30000, 0x0000000800000000)}Total time for which application threads were stopped: 0.7420900 secondsTotal time for which application threads were stopped: 0.0091490 secondsTotal time for which application threads were stopped: 0.0173280 secondsTotal time for which application threads were stopped: 0.0183870 seconds{Heap before GC invocations=11 (full 0): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 2992532K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33152K, used 33019K [0x00000007fae00000, 0x00000007fce60000, 0x0000000800000000)2016-09-06T15:59:07.070+0800: 347.741: [GC 347.742: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 319313560 bytes, 319313560 total- age 2: 38577912 bytes, 357891472 total: 1747648K-&gt;349504K(1747648K), 0.7262720 secs] 4740180K-&gt;3863435K(8039104K), 0.7286890 secs] [Times: user=2.34 sys=0.11, real=0.73 secs] Heap after GC invocations=12 (full 0): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3513931K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33152K, used 33019K [0x00000007fae00000, 0x00000007fce60000, 0x0000000800000000)}Total time for which application threads were stopped: 0.7368700 seconds2016-09-06T15:59:07.802+0800: 348.474: [GC [1 CMS-initial-mark: 3513931K(6291456K)] 3864004K(8039104K), 0.2078350 secs] [Times: user=0.20 sys=0.01, real=0.21 secs] Total time for which application threads were stopped: 0.2104220 seconds2016-09-06T15:59:08.012+0800: 348.683: [CMS-concurrent-mark-start]Total time for which application threads were stopped: 0.0129720 secondsTotal time for which application threads were stopped: 0.0137870 seconds{Heap before GC invocations=12 (full 1): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3513931K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33152K, used 33033K [0x00000007fae00000, 0x00000007fce60000, 0x0000000800000000)2016-09-06T15:59:09.887+0800: 350.558: [GC 350.559: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 165221160 bytes, 165221160 total- age 2: 192670616 bytes, 357891776 total: 1747648K-&gt;349504K(1747648K), 0.6010550 secs] 5261579K-&gt;4239084K(8039104K), 0.6031400 secs] [Times: user=2.02 sys=0.08, real=0.60 secs] Heap after GC invocations=13 (full 1): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3889580K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33152K, used 33033K [0x00000007fae00000, 0x00000007fce60000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6173760 secondsTotal time for which application threads were stopped: 0.0314730 seconds{Heap before GC invocations=13 (full 1): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3889580K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33152K, used 33039K [0x00000007fae00000, 0x00000007fce60000, 0x0000000800000000)2016-09-06T15:59:12.228+0800: 352.899: [GC 352.900: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 200947760 bytes, 200947760 total- age 2: 156897272 bytes, 357845032 total: 1747648K-&gt;349504K(1747648K), 0.5462710 secs] 5637228K-&gt;4560317K(8039104K), 0.5483150 secs] [Times: user=1.84 sys=0.07, real=0.54 secs] Heap after GC invocations=14 (full 1): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4210813K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33152K, used 33039K [0x00000007fae00000, 0x00000007fce60000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5620820 secondsTotal time for which application threads were stopped: 0.0229940 seconds{Heap before GC invocations=14 (full 1): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4210813K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33152K, used 33042K [0x00000007fae00000, 0x00000007fce60000, 0x0000000800000000)2016-09-06T15:59:13.869+0800: 354.540: [GC 354.541: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 180632032 bytes, 180632032 total- age 2: 177259448 bytes, 357891480 total: 1747648K-&gt;349504K(1747648K), 0.4555640 secs] 5958461K-&gt;4804294K(8039104K), 0.4577780 secs] [Times: user=1.58 sys=0.06, real=0.46 secs] Heap after GC invocations=15 (full 1): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4454790K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33152K, used 33042K [0x00000007fae00000, 0x00000007fce60000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4599870 seconds2016-09-06T15:59:14.861+0800: 355.532: [CMS-concurrent-mark: 4.842/6.849 secs] [Times: user=35.38 sys=0.91, real=6.85 secs] 2016-09-06T15:59:14.861+0800: 355.532: [CMS-concurrent-preclean-start]Total time for which application threads were stopped: 0.0207450 seconds{Heap before GC invocations=15 (full 1): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4454790K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33152K, used 33094K [0x00000007fae00000, 0x00000007fce60000, 0x0000000800000000)2016-09-06T15:59:15.728+0800: 356.399: [GC 356.401: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 247041768 bytes, 247041768 total- age 2: 110850016 bytes, 357891784 total: 1747648K-&gt;349504K(1747648K), 0.6002610 secs] 6202438K-&gt;5191363K(8039104K), 0.6024970 secs] [Times: user=2.00 sys=0.08, real=0.60 secs] Heap after GC invocations=16 (full 1): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4841859K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33152K, used 33094K [0x00000007fae00000, 0x00000007fce60000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6072510 secondsTotal time for which application threads were stopped: 0.0108210 secondsTotal time for which application threads were stopped: 0.0052450 seconds{Heap before GC invocations=16 (full 1): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4841859K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33344K, used 33143K [0x00000007fae00000, 0x00000007fce90000, 0x0000000800000000)2016-09-06T15:59:17.385+0800: 358.056: [GC 358.057: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 185455688 bytes, 185455688 total- age 2: 172435944 bytes, 357891632 total: 1747648K-&gt;349504K(1747648K), 0.5747910 secs] 6589507K-&gt;5528198K(8039104K), 0.5771240 secs] [Times: user=1.94 sys=0.07, real=0.58 secs] Heap after GC invocations=17 (full 1): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5178694K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33344K, used 33143K [0x00000007fae00000, 0x00000007fce90000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5994700 secondsTotal time for which application threads were stopped: 0.0098830 seconds{Heap before GC invocations=17 (full 1): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5178694K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33344K, used 33162K [0x00000007fae00000, 0x00000007fce90000, 0x0000000800000000)2016-09-06T15:59:18.982+0800: 359.653: [GC 359.654: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 191676584 bytes, 191676584 total- age 2: 166214104 bytes, 357890688 total: 1747648K-&gt;349502K(1747648K), 0.6280000 secs] 6926342K-&gt;5882992K(8039104K), 0.6300620 secs] [Times: user=2.14 sys=0.08, real=0.63 secs] Heap after GC invocations=18 (full 1): par new generation total 1747648K, used 349502K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afbc0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5533489K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33344K, used 33162K [0x00000007fae00000, 0x00000007fce90000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6463930 seconds{Heap before GC invocations=18 (full 1): par new generation total 1747648K, used 1747646K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afbc0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5533489K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33344K, used 33164K [0x00000007fae00000, 0x00000007fce90000, 0x0000000800000000)2016-09-06T15:59:20.560+0800: 361.231: [GC 361.232: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 223179552 bytes, 223179552 total- age 2: 134710928 bytes, 357890480 total: 1747646K-&gt;349502K(1747648K), 0.5516610 secs] 7281136K-&gt;6224662K(8039104K), 0.5539020 secs] [Times: user=1.88 sys=0.07, real=0.55 secs] Heap after GC invocations=19 (full 1): par new generation total 1747648K, used 349502K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 99% used [0x00000006658b0000, 0x000000067adffac0, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5875159K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33344K, used 33164K [0x00000007fae00000, 0x00000007fce90000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5581300 seconds{Heap before GC invocations=19 (full 1): par new generation total 1747648K, used 1747646K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x00000006658b0000, 0x000000067adffac0, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5875159K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33344K, used 33167K [0x00000007fae00000, 0x00000007fce90000, 0x0000000800000000)2016-09-06T15:59:21.984+0800: 362.655: [GC 362.656: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 209298704 bytes, 209298704 total- age 2: 148591592 bytes, 357890296 total: 1747646K-&gt;349502K(1747648K), 0.6268110 secs] 7622806K-&gt;6594668K(8039104K), 0.6291850 secs] [Times: user=2.05 sys=0.07, real=0.63 secs] Heap after GC invocations=20 (full 1): par new generation total 1747648K, used 349502K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658af9e0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6245165K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33344K, used 33167K [0x00000007fae00000, 0x00000007fce90000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6329170 secondsTotal time for which application threads were stopped: 0.0022750 secondsTotal time for which application threads were stopped: 0.0093570 secondsTotal time for which application threads were stopped: 0.0015530 secondsTotal time for which application threads were stopped: 0.0101020 secondsTotal time for which application threads were stopped: 0.0184530 secondsTotal time for which application threads were stopped: 0.0092540 seconds{Heap before GC invocations=20 (full 1): par new generation total 1747648K, used 1747646K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658af9e0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6245165K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33344K, used 33209K [0x00000007fae00000, 0x00000007fce90000, 0x0000000800000000)2016-09-06T15:59:24.040+0800: 364.711: [GC 364.713: [ParNew: 1747646K-&gt;1747646K(1747648K), 0.0000380 secs] 7992812K-&gt;7992812K(8039104K), 0.0020230 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] Heap after GC invocations=21 (full 1): par new generation total 1747648K, used 1747646K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658af9e0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6245165K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33344K, used 33209K [0x00000007fae00000, 0x00000007fce90000, 0x0000000800000000)}{Heap before GC invocations=21 (full 1): par new generation total 1747648K, used 1747646K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658af9e0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6245165K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 33344K, used 33209K [0x00000007fae00000, 0x00000007fce90000, 0x0000000800000000)2016-09-06T15:59:24.043+0800: 364.714: [Full GC 364.714: [CMS2016-09-06T15:59:25.710+0800: 366.381: [CMS-concurrent-preclean: 7.395/10.849 secs] [Times: user=46.37 sys=1.49, real=10.85 secs] (concurrent mode failure): 6245165K-&gt;3992141K(6291456K), 11.8601360 secs] 7992812K-&gt;3992141K(8039104K), [CMS Perm : 33209K-&gt;33122K(33344K)], 11.8618880 secs] [Times: user=11.80 sys=0.07, real=11.86 secs] Heap after GC invocations=22 (full 2): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3992141K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33122K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)}Total time for which application threads were stopped: 11.8693060 seconds{Heap before GC invocations=22 (full 2): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3992141K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33146K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)2016-09-06T15:59:36.850+0800: 377.521: [GC 377.522: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 322121272 bytes, 322121272 total: 1398144K-&gt;349502K(1747648K), 0.2819950 secs] 5390285K-&gt;4348613K(8039104K), 0.2843980 secs] [Times: user=1.11 sys=0.00, real=0.28 secs] Heap after GC invocations=23 (full 2): par new generation total 1747648K, used 349502K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 99% used [0x00000006658b0000, 0x000000067adff920, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3999110K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33146K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)}Total time for which application threads were stopped: 0.3244310 seconds2016-09-06T15:59:37.144+0800: 377.815: [GC [1 CMS-initial-mark: 3999110K(6291456K)] 4354141K(8039104K), 0.2168560 secs] [Times: user=0.22 sys=0.00, real=0.22 secs] Total time for which application threads were stopped: 0.2200360 seconds2016-09-06T15:59:37.362+0800: 378.033: [CMS-concurrent-mark-start]{Heap before GC invocations=23 (full 3): par new generation total 1747648K, used 1747646K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x00000006658b0000, 0x000000067adff920, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3999110K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33160K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)2016-09-06T15:59:38.550+0800: 379.221: [GC 379.222: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 269061800 bytes, 269061800 total: 1747646K-&gt;323304K(1747648K), 0.4082150 secs] 5746757K-&gt;4618464K(8039104K), 0.4103800 secs] [Times: user=1.46 sys=0.00, real=0.41 secs] Heap after GC invocations=24 (full 3): par new generation total 1747648K, used 323304K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 92% used [0x0000000650360000, 0x0000000663f1a0c0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4295159K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33160K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4165860 seconds{Heap before GC invocations=24 (full 3): par new generation total 1747648K, used 1721448K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 92% used [0x0000000650360000, 0x0000000663f1a0c0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4295159K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33163K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)2016-09-06T15:59:39.877+0800: 380.548: [GC 380.549: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 217152432 bytes, 217152432 total- age 2: 140738752 bytes, 357891184 total: 1721448K-&gt;349504K(1747648K), 0.5007060 secs] 6016608K-&gt;4888915K(8039104K), 0.5029570 secs] [Times: user=1.85 sys=0.01, real=0.50 secs] Heap after GC invocations=25 (full 3): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4539411K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33163K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5140600 seconds{Heap before GC invocations=25 (full 3): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4539411K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33165K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)2016-09-06T15:59:41.168+0800: 381.839: [GC 381.840: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 231917760 bytes, 231917760 total- age 2: 125973752 bytes, 357891512 total: 1747648K-&gt;349504K(1747648K), 0.5957700 secs] 6287059K-&gt;5273723K(8039104K), 0.5980480 secs] [Times: user=2.17 sys=0.00, real=0.60 secs] Heap after GC invocations=26 (full 3): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4924219K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33165K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6163910 seconds{Heap before GC invocations=26 (full 3): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4924219K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33175K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)2016-09-06T15:59:42.721+0800: 383.392: [GC 383.394: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 175317304 bytes, 175317304 total- age 2: 182574624 bytes, 357891928 total: 1747648K-&gt;349504K(1747648K), 0.5098460 secs] 6671867K-&gt;5532408K(8039104K), 0.5124340 secs] [Times: user=1.82 sys=0.00, real=0.51 secs] Heap after GC invocations=27 (full 3): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5182904K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33175K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5303580 seconds{Heap before GC invocations=27 (full 3): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5182904K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33186K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)2016-09-06T15:59:44.044+0800: 384.715: [GC 384.716: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 264946000 bytes, 264946000 total- age 2: 92940976 bytes, 357886976 total: 1747648K-&gt;349504K(1747648K), 0.5682930 secs] 6930552K-&gt;5889731K(8039104K), 0.5701920 secs] [Times: user=2.06 sys=0.01, real=0.57 secs] Heap after GC invocations=28 (full 3): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5540227K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33186K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5869590 seconds{Heap before GC invocations=28 (full 3): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5540227K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33186K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)2016-09-06T15:59:45.591+0800: 386.262: [GC 386.263: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 184443464 bytes, 184443464 total- age 2: 173448328 bytes, 357891792 total: 1747648K-&gt;349504K(1747648K), 0.5662080 secs] 7287875K-&gt;6218131K(8039104K), 0.5682170 secs] [Times: user=2.07 sys=0.00, real=0.57 secs] Heap after GC invocations=29 (full 3): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5868627K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33186K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5715980 secondsTotal time for which application threads were stopped: 0.0142570 seconds{Heap before GC invocations=29 (full 3): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5868627K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33189K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)2016-09-06T15:59:47.286+0800: 387.957: [GC 387.958: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 199796608 bytes, 199796608 total- age 2: 158095264 bytes, 357891872 total: 1747648K-&gt;349504K(1747648K), 0.3781590 secs] 7616275K-&gt;6409037K(8039104K), 0.3802700 secs] [Times: user=1.48 sys=0.01, real=0.38 secs] Heap after GC invocations=30 (full 3): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6059533K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33189K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)}Total time for which application threads were stopped: 0.3833700 secondsTotal time for which application threads were stopped: 0.0052000 seconds{Heap before GC invocations=30 (full 3): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6059533K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55204K, used 33191K [0x00000007fae00000, 0x00000007fe3e9000, 0x0000000800000000)2016-09-06T15:59:48.796+0800: 389.468: [GC 389.468: [ParNew: 1747648K-&gt;1747648K(1747648K), 0.0000200 secs]389.469: [CMS2016-09-06T15:59:49.829+0800: 390.500: [CMS-concurrent-mark: 8.554/12.467 secs] [Times: user=62.08 sys=1.28, real=12.46 secs] (concurrent mode failure): 6059533K-&gt;2885341K(6291456K), 8.9623200 secs] 7807181K-&gt;2885341K(8039104K), [CMS Perm : 33191K-&gt;33190K(55204K)], 8.9646390 secs] [Times: user=11.69 sys=0.00, real=8.96 secs] Heap after GC invocations=31 (full 4): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 2885341K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33190K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)}Total time for which application threads were stopped: 8.9699370 seconds{Heap before GC invocations=31 (full 4): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 2885341K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33193K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)2016-09-06T15:59:58.629+0800: 399.300: [GC 399.301: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 185421168 bytes, 185421168 total: 1398144K-&gt;349486K(1747648K), 0.2085360 secs] 4283485K-&gt;3234827K(8039104K), 0.2103520 secs] [Times: user=0.83 sys=0.00, real=0.21 secs] Heap after GC invocations=32 (full 4): par new generation total 1747648K, used 349486K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 99% used [0x00000006658b0000, 0x000000067adfb840, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 2885341K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33193K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)}Total time for which application threads were stopped: 0.2147530 seconds{Heap before GC invocations=32 (full 4): par new generation total 1747648K, used 1747630K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x00000006658b0000, 0x000000067adfb840, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 2885341K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33222K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)2016-09-06T15:59:59.636+0800: 400.307: [GC 400.309: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 289680920 bytes, 289680920 total- age 2: 68209816 bytes, 357890736 total: 1747630K-&gt;349504K(1747648K), 0.3847400 secs] 4632971K-&gt;3400909K(8039104K), 0.3867650 secs] [Times: user=1.45 sys=0.01, real=0.38 secs] Heap after GC invocations=33 (full 4): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3051405K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33222K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)}Total time for which application threads were stopped: 0.3973940 seconds{Heap before GC invocations=33 (full 4): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3051405K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33257K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)2016-09-06T16:00:00.843+0800: 401.514: [GC 401.515: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 207587760 bytes, 207587760 total- age 2: 150304016 bytes, 357891776 total: 1747648K-&gt;349504K(1747648K), 0.6225400 secs] 4799053K-&gt;3813213K(8039104K), 0.6247440 secs] [Times: user=2.26 sys=0.01, real=0.63 secs] Heap after GC invocations=34 (full 4): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3463709K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33257K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6423560 seconds2016-09-06T16:00:01.668+0800: 402.339: [GC [1 CMS-initial-mark: 3463709K(6291456K)] 4179540K(8039104K), 0.4173010 secs] [Times: user=0.42 sys=0.00, real=0.42 secs] Total time for which application threads were stopped: 0.4224990 seconds2016-09-06T16:00:02.087+0800: 402.758: [CMS-concurrent-mark-start]{Heap before GC invocations=34 (full 5): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3463709K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33271K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)2016-09-06T16:00:02.702+0800: 403.373: [GC 403.374: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 182674088 bytes, 182674088 total- age 2: 175209648 bytes, 357883736 total: 1747648K-&gt;349504K(1747648K), 0.5124800 secs] 5211357K-&gt;4116075K(8039104K), 0.5150570 secs] [Times: user=1.87 sys=0.00, real=0.52 secs] Heap after GC invocations=35 (full 5): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3766571K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33271K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5183210 seconds{Heap before GC invocations=35 (full 5): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3766571K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33280K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)2016-09-06T16:00:03.966+0800: 404.637: [GC 404.638: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 227668208 bytes, 227668208 total- age 2: 130223664 bytes, 357891872 total: 1747648K-&gt;349504K(1747648K), 0.5542770 secs] 5514219K-&gt;4447725K(8039104K), 0.5564070 secs] [Times: user=2.02 sys=0.00, real=0.55 secs] Heap after GC invocations=36 (full 5): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4098221K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33280K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5746800 seconds{Heap before GC invocations=36 (full 5): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4098221K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33286K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)2016-09-06T16:00:05.333+0800: 406.004: [GC 406.005: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 192764072 bytes, 192764072 total- age 2: 165127784 bytes, 357891856 total: 1747648K-&gt;349504K(1747648K), 0.5757360 secs] 5845869K-&gt;4763513K(8039104K), 0.5778080 secs] [Times: user=2.10 sys=0.01, real=0.58 secs] Heap after GC invocations=37 (full 5): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4414009K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33286K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5974960 seconds{Heap before GC invocations=37 (full 5): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4414009K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33291K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)2016-09-06T16:00:06.817+0800: 407.489: [GC 407.490: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 206029832 bytes, 206029832 total- age 2: 151861584 bytes, 357891416 total: 1747648K-&gt;349504K(1747648K), 0.4803210 secs] 6161657K-&gt;5005961K(8039104K), 0.4824320 secs] [Times: user=1.75 sys=0.00, real=0.48 secs] Heap after GC invocations=38 (full 5): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4656457K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33291K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5003460 seconds{Heap before GC invocations=38 (full 5): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4656457K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33367K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)2016-09-06T16:00:08.227+0800: 408.898: [GC 408.899: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 227598848 bytes, 227598848 total- age 2: 130293032 bytes, 357891880 total: 1747648K-&gt;349504K(1747648K), 0.4924890 secs] 6404105K-&gt;5278384K(8039104K), 0.4946950 secs] [Times: user=1.81 sys=0.01, real=0.49 secs] Heap after GC invocations=39 (full 5): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4928880K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33367K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5144570 secondsTotal time for which application threads were stopped: 0.0130470 seconds{Heap before GC invocations=39 (full 5): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4928880K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33392K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)2016-09-06T16:00:09.430+0800: 410.101: [GC 410.102: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 256452928 bytes, 256452928 total- age 2: 101438864 bytes, 357891792 total: 1747648K-&gt;349504K(1747648K), 0.7480850 secs] 6676528K-&gt;5727918K(8039104K), 0.7502010 secs] [Times: user=2.81 sys=0.00, real=0.75 secs] Heap after GC invocations=40 (full 5): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5378414K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33392K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)}Total time for which application threads were stopped: 0.7648380 seconds{Heap before GC invocations=40 (full 5): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5378414K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33418K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)2016-09-06T16:00:10.950+0800: 411.621: [GC 411.622: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 171435432 bytes, 171435432 total- age 2: 186456272 bytes, 357891704 total: 1747648K-&gt;349504K(1747648K), 0.6388080 secs] 7126062K-&gt;6112654K(8039104K), 0.6406720 secs] [Times: user=2.48 sys=0.00, real=0.64 secs] Heap after GC invocations=41 (full 5): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5763150K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33418K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6486720 seconds{Heap before GC invocations=41 (full 5): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5763150K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33421K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)2016-09-06T16:00:12.329+0800: 413.000: [GC 413.001: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 223202384 bytes, 223202384 total- age 2: 134688296 bytes, 357890680 total: 1747648K-&gt;349502K(1747648K), 0.5309770 secs] 7510798K-&gt;6434191K(8039104K), 0.5329430 secs] [Times: user=2.03 sys=0.00, real=0.53 secs] Heap after GC invocations=42 (full 5): par new generation total 1747648K, used 349502K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 99% used [0x00000006658b0000, 0x000000067adffb00, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 6084689K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33421K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5495240 seconds{Heap before GC invocations=42 (full 5): par new generation total 1747648K, used 1747646K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x00000006658b0000, 0x000000067adffb00, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 6084689K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55396K, used 33424K [0x00000007fae00000, 0x00000007fe419000, 0x0000000800000000)2016-09-06T16:00:13.666+0800: 414.337: [GC 414.338: [ParNew: 1747646K-&gt;1747646K(1747648K), 0.0000330 secs]414.345: [CMS2016-09-06T16:00:14.764+0800: 415.435: [CMS-concurrent-mark: 7.167/12.677 secs] [Times: user=61.13 sys=1.50, real=12.67 secs] (concurrent mode failure): 6084689K-&gt;2810351K(6291456K), 10.9975000 secs] 7832335K-&gt;2810351K(8039104K), [CMS Perm : 33424K-&gt;33423K(55396K)], 11.0072520 secs] [Times: user=14.20 sys=0.00, real=11.01 secs] Heap after GC invocations=43 (full 6): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 2810351K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33423K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)}Total time for which application threads were stopped: 11.0114130 seconds{Heap before GC invocations=43 (full 6): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 2810351K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33428K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)2016-09-06T16:00:25.383+0800: 426.054: [GC 426.055: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 332829016 bytes, 332829016 total: 1398144K-&gt;349502K(1747648K), 0.3533390 secs] 4208495K-&gt;3200764K(8039104K), 0.3552220 secs] [Times: user=1.38 sys=0.01, real=0.36 secs] Heap after GC invocations=44 (full 6): par new generation total 1747648K, used 349502K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afa80, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 2851261K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33428K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)}Total time for which application threads were stopped: 0.3632830 seconds{Heap before GC invocations=44 (full 6): par new generation total 1747648K, used 1747646K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afa80, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 2851261K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33430K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)2016-09-06T16:00:26.324+0800: 426.995: [GC 426.996: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 346189448 bytes, 346189448 total: 1747646K-&gt;349504K(1747648K), 0.4369990 secs] 4598908K-&gt;3527805K(8039104K), 0.4389750 secs] [Times: user=1.61 sys=0.01, real=0.44 secs] Heap after GC invocations=45 (full 6): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3178301K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33430K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4462460 seconds2016-09-06T16:00:26.844+0800: 427.515: [GC [1 CMS-initial-mark: 3178301K(6291456K)] 3649128K(8039104K), 0.2740400 secs] [Times: user=0.28 sys=0.00, real=0.28 secs] Total time for which application threads were stopped: 0.2785510 seconds2016-09-06T16:00:27.120+0800: 427.790: [CMS-concurrent-mark-start]Total time for which application threads were stopped: 0.0018000 secondsTotal time for which application threads were stopped: 0.0094360 seconds{Heap before GC invocations=45 (full 7): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3178301K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33441K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)2016-09-06T16:00:27.670+0800: 428.341: [GC 428.342: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 357891832 bytes, 357891832 total: 1747648K-&gt;349504K(1747648K), 0.5430870 secs] 4925949K-&gt;3861237K(8039104K), 0.5453930 secs] [Times: user=1.92 sys=0.00, real=0.54 secs] Heap after GC invocations=46 (full 7): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3511733K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33441K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5489610 seconds{Heap before GC invocations=46 (full 7): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3511733K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33443K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)2016-09-06T16:00:28.974+0800: 429.645: [GC 429.646: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 352610392 bytes, 352610392 total: 1747648K-&gt;349504K(1747648K), 0.4896130 secs] 5259381K-&gt;4206569K(8039104K), 0.4919870 secs] [Times: user=1.76 sys=0.01, real=0.49 secs] Heap after GC invocations=47 (full 7): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3857065K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33443K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5085770 seconds{Heap before GC invocations=47 (full 7): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3857065K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33444K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)2016-09-06T16:00:30.057+0800: 430.729: [GC 430.730: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 316026408 bytes, 316026408 total: 1747648K-&gt;349504K(1747648K), 0.5021680 secs] 5604713K-&gt;4531591K(8039104K), 0.5043000 secs] [Times: user=1.74 sys=0.00, real=0.51 secs] Heap after GC invocations=48 (full 7): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4182087K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33444K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5097440 seconds{Heap before GC invocations=48 (full 7): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4182087K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33444K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)2016-09-06T16:00:31.177+0800: 431.848: [GC 431.849: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 189805288 bytes, 189805288 total- age 2: 168086512 bytes, 357891800 total: 1747648K-&gt;349504K(1747648K), 0.5531620 secs] 5929735K-&gt;4778498K(8039104K), 0.5551490 secs] [Times: user=1.99 sys=0.00, real=0.56 secs] Heap after GC invocations=49 (full 7): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4428994K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33444K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5610400 seconds{Heap before GC invocations=49 (full 7): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4428994K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33446K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)2016-09-06T16:00:32.511+0800: 433.182: [GC 433.183: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 229260456 bytes, 229260456 total- age 2: 128631272 bytes, 357891728 total: 1747648K-&gt;349504K(1747648K), 0.6087680 secs] 6176642K-&gt;5119251K(8039104K), 0.6112360 secs] [Times: user=2.23 sys=0.00, real=0.61 secs] Heap after GC invocations=50 (full 7): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4769747K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33446K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6291240 seconds{Heap before GC invocations=50 (full 7): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4769747K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33453K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)2016-09-06T16:00:33.850+0800: 434.521: [GC 434.522: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 224137616 bytes, 224137616 total- age 2: 133754120 bytes, 357891736 total: 1747648K-&gt;349504K(1747648K), 0.5673630 secs] 6517395K-&gt;5430646K(8039104K), 0.5693650 secs] [Times: user=2.07 sys=0.01, real=0.57 secs] Heap after GC invocations=51 (full 7): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5081142K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33453K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5865530 secondsTotal time for which application threads were stopped: 0.0928890 seconds{Heap before GC invocations=51 (full 7): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5081142K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33473K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)2016-09-06T16:00:35.480+0800: 436.151: [GC 436.152: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 240137440 bytes, 240137440 total- age 2: 117754392 bytes, 357891832 total: 1747648K-&gt;349504K(1747648K), 0.7681760 secs] 6828790K-&gt;5913692K(8039104K), 0.7705270 secs] [Times: user=2.79 sys=0.00, real=0.77 secs] Heap after GC invocations=52 (full 7): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5564188K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33473K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)}Total time for which application threads were stopped: 0.7949920 secondsTotal time for which application threads were stopped: 0.0034980 secondsTotal time for which application threads were stopped: 0.0206290 seconds{Heap before GC invocations=52 (full 7): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5564188K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33541K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)2016-09-06T16:00:37.857+0800: 438.528: [GC 438.529: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 208632640 bytes, 208632640 total- age 2: 149259096 bytes, 357891736 total: 1747648K-&gt;349504K(1747648K), 0.6709060 secs] 7311836K-&gt;6310240K(8039104K), 0.6731030 secs] [Times: user=2.43 sys=0.00, real=0.68 secs] Heap after GC invocations=53 (full 7): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5960736K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33541K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6805170 secondsTotal time for which application threads were stopped: 0.0220710 seconds{Heap before GC invocations=53 (full 7): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5960736K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55708K, used 33554K [0x00000007fae00000, 0x00000007fe467000, 0x0000000800000000)2016-09-06T16:00:39.590+0800: 440.261: [GC 440.262: [ParNew: 1747648K-&gt;1747648K(1747648K), 0.0000190 secs]440.262: [CMS2016-09-06T16:00:40.186+0800: 440.857: [CMS-concurrent-mark: 7.712/13.067 secs] [Times: user=62.72 sys=1.44, real=13.06 secs] (concurrent mode failure): 5960736K-&gt;3372341K(6291456K), 9.6099260 secs] 7708384K-&gt;3372341K(8039104K), [CMS Perm : 33554K-&gt;33550K(55708K)], 9.6120630 secs] [Times: user=11.13 sys=0.01, real=9.61 secs] Heap after GC invocations=54 (full 8): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3372341K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33550K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)}Total time for which application threads were stopped: 9.6151080 seconds{Heap before GC invocations=54 (full 8): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3372341K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33558K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)2016-09-06T16:00:50.176+0800: 450.847: [GC 450.848: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 346626176 bytes, 346626176 total: 1398144K-&gt;349504K(1747648K), 0.3256870 secs] 4770485K-&gt;3749921K(8039104K), 0.3280350 secs] [Times: user=1.28 sys=0.00, real=0.33 secs] Heap after GC invocations=55 (full 8): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3400417K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33558K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)}Total time for which application threads were stopped: 0.3606660 seconds2016-09-06T16:00:50.600+0800: 451.271: [GC [1 CMS-initial-mark: 3400417K(6291456K)] 3845662K(8039104K), 0.2895170 secs] [Times: user=0.29 sys=0.00, real=0.29 secs] Total time for which application threads were stopped: 0.2936850 seconds2016-09-06T16:00:50.892+0800: 451.562: [CMS-concurrent-mark-start]Total time for which application threads were stopped: 0.0033070 secondsTotal time for which application threads were stopped: 0.0157110 seconds{Heap before GC invocations=55 (full 9): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3400417K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33571K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)2016-09-06T16:00:53.558+0800: 454.229: [GC 454.231: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 268600640 bytes, 268600640 total: 1747648K-&gt;341244K(1747648K), 0.4903030 secs] 5148065K-&gt;4078118K(8039104K), 0.4930540 secs] [Times: user=1.69 sys=0.01, real=0.50 secs] Heap after GC invocations=56 (full 9): par new generation total 1747648K, used 341244K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 97% used [0x00000006658b0000, 0x000000067a5ef300, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3736873K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33571K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5205570 seconds{Heap before GC invocations=56 (full 9): par new generation total 1747648K, used 1739388K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 97% used [0x00000006658b0000, 0x000000067a5ef300, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3736873K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33573K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)2016-09-06T16:00:54.920+0800: 455.591: [GC 455.593: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 245907960 bytes, 245907960 total- age 2: 111983408 bytes, 357891368 total: 1739388K-&gt;349504K(1747648K), 0.6592740 secs] 5476262K-&gt;4439417K(8039104K), 0.6620230 secs] [Times: user=2.44 sys=0.01, real=0.67 secs] Heap after GC invocations=57 (full 9): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4089913K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33573K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6859850 seconds2016-09-06T16:00:56.960+0800: 457.630: [CMS-concurrent-mark: 4.768/6.068 secs] [Times: user=32.54 sys=0.61, real=6.07 secs] 2016-09-06T16:00:56.960+0800: 457.631: [CMS-concurrent-preclean-start]{Heap before GC invocations=57 (full 9): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4089913K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33575K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)2016-09-06T16:00:57.284+0800: 457.955: [GC 457.957: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 150983608 bytes, 150983608 total- age 2: 206907888 bytes, 357891496 total: 1747648K-&gt;349504K(1747648K), 0.5339220 secs] 5837561K-&gt;4698331K(8039104K), 0.5366430 secs] [Times: user=1.95 sys=0.01, real=0.53 secs] Heap after GC invocations=58 (full 9): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4348827K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33575K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5630010 seconds{Heap before GC invocations=58 (full 9): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4348827K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33589K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)2016-09-06T16:00:59.012+0800: 459.683: [GC 459.685: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 232939072 bytes, 232939072 total- age 2: 124952528 bytes, 357891600 total: 1747648K-&gt;349504K(1747648K), 0.5439160 secs] 6096475K-&gt;5011968K(8039104K), 0.5469190 secs] [Times: user=1.99 sys=0.01, real=0.55 secs] Heap after GC invocations=59 (full 9): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4662464K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33589K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5804940 seconds{Heap before GC invocations=59 (full 9): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4662464K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33601K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)2016-09-06T16:01:00.249+0800: 460.920: [GC 460.921: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 209966976 bytes, 209966976 total- age 2: 147924536 bytes, 357891512 total: 1747648K-&gt;349504K(1747648K), 0.5974640 secs] 6410112K-&gt;5433773K(8039104K), 0.6000960 secs] [Times: user=2.14 sys=0.01, real=0.60 secs] Heap after GC invocations=60 (full 9): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5084269K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33601K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6234540 seconds{Heap before GC invocations=60 (full 9): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5084269K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33601K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)2016-09-06T16:01:02.313+0800: 462.985: [GC 462.986: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 154637800 bytes, 154637800 total- age 2: 203254104 bytes, 357891904 total: 1747648K-&gt;349504K(1747648K), 0.4710070 secs] 6831917K-&gt;5710710K(8039104K), 0.4795700 secs] [Times: user=1.71 sys=0.00, real=0.48 secs] Heap after GC invocations=61 (full 9): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5361206K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33601K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5058950 seconds{Heap before GC invocations=61 (full 9): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5361206K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33601K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)2016-09-06T16:01:04.918+0800: 465.589: [GC 465.591: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 198179952 bytes, 198179952 total- age 2: 139113168 bytes, 337293120 total: 1747648K-&gt;349504K(1747648K), 0.5667630 secs] 7108854K-&gt;5906389K(8039104K), 0.5698710 secs] [Times: user=2.09 sys=0.01, real=0.57 secs] Heap after GC invocations=62 (full 9): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5556885K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33601K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6037820 seconds{Heap before GC invocations=62 (full 9): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5556885K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33610K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)2016-09-06T16:01:07.000+0800: 467.671: [GC 467.673: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 314703440 bytes, 314703440 total- age 2: 43188400 bytes, 357891840 total: 1747648K-&gt;349504K(1747648K), 0.6721420 secs] 7304533K-&gt;6325430K(8039104K), 0.6750690 secs] [Times: user=2.45 sys=0.00, real=0.68 secs] Heap after GC invocations=63 (full 9): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5975926K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33610K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6951290 seconds{Heap before GC invocations=63 (full 9): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5975926K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 55920K, used 33610K [0x00000007fae00000, 0x00000007fe49c000, 0x0000000800000000)2016-09-06T16:01:09.312+0800: 469.983: [GC 469.985: [ParNew: 1747648K-&gt;1747648K(1747648K), 0.0000250 secs]469.985: [CMS2016-09-06T16:01:10.761+0800: 471.432: [CMS-concurrent-preclean: 9.359/13.801 secs] [Times: user=63.90 sys=1.46, real=13.80 secs] (concurrent mode failure): 5975926K-&gt;3422712K(6291456K), 10.4816640 secs] 7723574K-&gt;3422712K(8039104K), [CMS Perm : 33610K-&gt;33610K(55920K)], 10.4848430 secs] [Times: user=10.39 sys=0.10, real=10.49 secs] Heap after GC invocations=64 (full 10): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3422712K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33610K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 10.5217990 seconds{Heap before GC invocations=64 (full 10): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3422712K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33616K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:20.801+0800: 481.472: [GC 481.474: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 334788480 bytes, 334788480 total: 1398144K-&gt;349504K(1747648K), 0.2778400 secs] 4820856K-&gt;3783163K(8039104K), 0.2809870 secs] [Times: user=1.10 sys=0.00, real=0.28 secs] Heap after GC invocations=65 (full 10): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3433659K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33616K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.3064200 seconds2016-09-06T16:01:21.089+0800: 481.760: [GC [1 CMS-initial-mark: 3433659K(6291456K)] 3785700K(8039104K), 0.2414890 secs] [Times: user=0.24 sys=0.01, real=0.24 secs] Total time for which application threads were stopped: 0.2454590 seconds2016-09-06T16:01:21.333+0800: 482.004: [CMS-concurrent-mark-start]{Heap before GC invocations=65 (full 11): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3433659K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33616K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:22.997+0800: 483.669: [GC 483.670: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 246801280 bytes, 246801280 total: 1747648K-&gt;331636K(1747648K), 0.4661490 secs] 5181307K-&gt;4110293K(8039104K), 0.4689810 secs] [Times: user=1.67 sys=0.01, real=0.47 secs] Heap after GC invocations=66 (full 11): par new generation total 1747648K, used 331636K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 94% used [0x0000000650360000, 0x000000066473d340, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3778656K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33616K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5028030 seconds{Heap before GC invocations=66 (full 11): par new generation total 1747648K, used 1729780K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 94% used [0x0000000650360000, 0x000000066473d340, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3778656K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33616K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:24.287+0800: 484.958: [GC 484.959: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 231800504 bytes, 231800504 total- age 2: 126090872 bytes, 357891376 total: 1729780K-&gt;349504K(1747648K), 0.4983420 secs] 5508437K-&gt;4316059K(8039104K), 0.5010460 secs] [Times: user=1.87 sys=0.00, real=0.51 secs] Heap after GC invocations=67 (full 11): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3966555K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33616K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5084720 seconds{Heap before GC invocations=67 (full 11): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3966555K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33616K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:25.781+0800: 486.452: [GC 486.453: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 152494288 bytes, 152494288 total- age 2: 205397464 bytes, 357891752 total: 1747648K-&gt;349504K(1747648K), 0.4544380 secs] 5714203K-&gt;4546209K(8039104K), 0.4571930 secs] [Times: user=1.67 sys=0.01, real=0.46 secs] Heap after GC invocations=68 (full 11): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4196705K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33616K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4627770 seconds{Heap before GC invocations=68 (full 11): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4196705K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33616K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:26.997+0800: 487.668: [GC 487.670: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 258627160 bytes, 258627160 total- age 2: 99264592 bytes, 357891752 total: 1747648K-&gt;349504K(1747648K), 0.6072760 secs] 5944353K-&gt;4977959K(8039104K), 0.6102040 secs] [Times: user=2.19 sys=0.01, real=0.61 secs] Heap after GC invocations=69 (full 11): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4628455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33616K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6311590 seconds{Heap before GC invocations=69 (full 11): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4628455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33617K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:28.343+0800: 489.014: [GC 489.016: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 161671928 bytes, 161671928 total- age 2: 196219936 bytes, 357891864 total: 1747648K-&gt;349504K(1747648K), 0.6049050 secs] 6376103K-&gt;5348031K(8039104K), 0.6079310 secs] [Times: user=2.20 sys=0.01, real=0.61 secs] Heap after GC invocations=70 (full 11): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4998527K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33617K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6295330 seconds{Heap before GC invocations=70 (full 11): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4998527K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33620K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:29.606+0800: 490.277: [GC 490.279: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 245426416 bytes, 245426416 total- age 2: 112465360 bytes, 357891776 total: 1747648K-&gt;349504K(1747648K), 0.5906140 secs] 6746175K-&gt;5704706K(8039104K), 0.5934550 secs] [Times: user=2.15 sys=0.01, real=0.60 secs] Heap after GC invocations=71 (full 11): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5355202K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33620K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5993610 seconds{Heap before GC invocations=71 (full 11): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5355202K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33620K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:30.984+0800: 491.656: [GC 491.657: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 171997208 bytes, 171997208 total- age 2: 185894640 bytes, 357891848 total: 1747648K-&gt;349504K(1747648K), 0.6054140 secs] 7102850K-&gt;6004387K(8039104K), 0.6080100 secs] [Times: user=2.23 sys=0.01, real=0.61 secs] Heap after GC invocations=72 (full 11): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5654883K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33620K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6174440 secondsTotal time for which application threads were stopped: 0.0772050 secondsTotal time for which application threads were stopped: 0.0192790 seconds{Heap before GC invocations=72 (full 11): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5654883K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33621K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:32.302+0800: 492.973: [GC 492.974: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 240993120 bytes, 240993120 total- age 2: 116898504 bytes, 357891624 total: 1747648K-&gt;349504K(1747648K), 0.6159900 secs] 7402531K-&gt;6351759K(8039104K), 0.6183760 secs] [Times: user=2.19 sys=0.01, real=0.62 secs] Heap after GC invocations=73 (full 11): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 6002255K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33621K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6221500 seconds{Heap before GC invocations=73 (full 11): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 6002255K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33623K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:33.631+0800: 494.302: [GC 494.303: [ParNew: 1747648K-&gt;1747648K(1747648K), 0.0000180 secs]494.303: [CMS2016-09-06T16:01:34.363+0800: 495.034: [CMS-concurrent-mark: 8.145/13.030 secs] [Times: user=63.46 sys=1.30, real=13.03 secs] (concurrent mode failure): 6002255K-&gt;4641907K(6291456K), 11.0409390 secs] 7749903K-&gt;4641907K(8039104K), [CMS Perm : 33623K-&gt;33622K(56112K)], 11.0434390 secs] [Times: user=13.00 sys=0.01, real=11.04 secs] Heap after GC invocations=74 (full 12): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4641907K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33622K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.0476490 seconds{Heap before GC invocations=74 (full 12): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4641907K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33622K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:45.480+0800: 506.151: [GC 506.152: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 323412120 bytes, 323412120 total: 1398144K-&gt;349492K(1747648K), 0.2404890 secs] 6040051K-&gt;4991400K(8039104K), 0.2431090 secs] [Times: user=0.96 sys=0.00, real=0.25 secs] Heap after GC invocations=75 (full 12): par new generation total 1747648K, used 349492K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658ad340, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4641907K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33622K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.2709450 seconds2016-09-06T16:01:45.728+0800: 506.399: [GC [1 CMS-initial-mark: 4641907K(6291456K)] 4991667K(8039104K), 0.2282040 secs] [Times: user=0.23 sys=0.00, real=0.23 secs] Total time for which application threads were stopped: 0.2323020 seconds2016-09-06T16:01:45.958+0800: 506.629: [CMS-concurrent-mark-start]Total time for which application threads were stopped: 0.0034370 secondsTotal time for which application threads were stopped: 0.0029270 seconds{Heap before GC invocations=75 (full 13): par new generation total 1747648K, used 1747636K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658ad340, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4641907K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33623K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:46.632+0800: 507.303: [GC 507.304: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 347449728 bytes, 347449728 total: 1747636K-&gt;349504K(1747648K), 0.4997840 secs] 6389544K-&gt;5360972K(8039104K), 0.5022400 secs] [Times: user=1.78 sys=0.01, real=0.50 secs] Heap after GC invocations=76 (full 13): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5011468K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33623K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5225590 seconds{Heap before GC invocations=76 (full 13): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5011468K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33624K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:47.980+0800: 508.651: [GC 508.652: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 244319752 bytes, 244319752 total: 1747648K-&gt;335541K(1747648K), 0.4370720 secs] 6759116K-&gt;5688662K(8039104K), 0.4398880 secs] [Times: user=1.57 sys=0.00, real=0.44 secs] Heap after GC invocations=77 (full 13): par new generation total 1747648K, used 335541K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 96% used [0x0000000650360000, 0x0000000664b0d600, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5353121K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33624K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4646990 seconds{Heap before GC invocations=77 (full 13): par new generation total 1747648K, used 1733685K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 96% used [0x0000000650360000, 0x0000000664b0d600, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5353121K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33624K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:48.968+0800: 509.639: [GC 509.640: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 203615664 bytes, 203615664 total- age 2: 154275904 bytes, 357891568 total: 1733685K-&gt;349504K(1747648K), 0.4244810 secs] 7086806K-&gt;5930345K(8039104K), 0.4268870 secs] [Times: user=1.56 sys=0.00, real=0.43 secs] Heap after GC invocations=78 (full 13): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5580841K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33624K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4319010 seconds{Heap before GC invocations=78 (full 13): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5580841K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33624K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:49.975+0800: 510.646: [GC 510.648: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 198002880 bytes, 198002880 total- age 2: 159888272 bytes, 357891152 total: 1747648K-&gt;349504K(1747648K), 0.4907080 secs] 7328489K-&gt;6243989K(8039104K), 0.4931030 secs] [Times: user=1.75 sys=0.01, real=0.49 secs] Heap after GC invocations=79 (full 13): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5894485K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33624K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5003730 secondsTotal time for which application threads were stopped: 0.0194560 seconds{Heap before GC invocations=79 (full 13): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5894485K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33627K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:01:51.320+0800: 511.991: [GC 511.992: [ParNew: 1747648K-&gt;1747648K(1747648K), 0.0000190 secs]511.992: [CMS2016-09-06T16:01:52.525+0800: 513.196: [CMS-concurrent-mark: 4.450/6.567 secs] [Times: user=31.06 sys=0.63, real=6.57 secs] (concurrent mode failure): 5894485K-&gt;4067461K(6291456K), 12.8069210 secs] 7642133K-&gt;4067461K(8039104K), [CMS Perm : 33627K-&gt;33626K(56112K)], 12.8096420 secs] [Times: user=16.19 sys=0.02, real=12.81 secs] Heap after GC invocations=80 (full 14): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4067461K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33626K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.8133960 seconds{Heap before GC invocations=80 (full 14): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4067461K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:04.840+0800: 525.512: [GC 525.513: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 266692040 bytes, 266692040 total: 1398144K-&gt;338494K(1747648K), 0.2428150 secs] 5465605K-&gt;4405955K(8039104K), 0.2456080 secs] [Times: user=0.96 sys=0.00, real=0.25 secs] Heap after GC invocations=81 (full 14): par new generation total 1747648K, used 338494K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 96% used [0x00000006658b0000, 0x000000067a33f840, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4067461K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.2582400 seconds2016-09-06T16:02:05.309+0800: 525.980: [GC [1 CMS-initial-mark: 4067461K(6291456K)] 4789877K(8039104K), 0.3747900 secs] [Times: user=0.38 sys=0.00, real=0.38 secs] Total time for which application threads were stopped: 0.3909800 seconds2016-09-06T16:02:05.686+0800: 526.357: [CMS-concurrent-mark-start]{Heap before GC invocations=81 (full 15): par new generation total 1747648K, used 1736638K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 96% used [0x00000006658b0000, 0x000000067a33f840, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4067461K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:06.154+0800: 526.826: [GC 526.827: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 190622288 bytes, 190622288 total- age 2: 167269024 bytes, 357891312 total: 1736638K-&gt;349504K(1747648K), 0.3980870 secs] 5804099K-&gt;4615788K(8039104K), 0.4006140 secs] [Times: user=1.50 sys=0.00, real=0.40 secs] Heap after GC invocations=82 (full 15): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4266284K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4121790 seconds{Heap before GC invocations=82 (full 15): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4266284K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:07.348+0800: 528.019: [GC 528.021: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 255657544 bytes, 255657544 total- age 2: 102234344 bytes, 357891888 total: 1747648K-&gt;349504K(1747648K), 0.5940140 secs] 6013932K-&gt;5035473K(8039104K), 0.5969570 secs] [Times: user=2.12 sys=0.01, real=0.60 secs] Heap after GC invocations=83 (full 15): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4685969K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6011960 seconds{Heap before GC invocations=83 (full 15): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4685969K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:08.505+0800: 529.177: [GC 529.178: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 191553840 bytes, 191553840 total- age 2: 166337640 bytes, 357891480 total: 1747648K-&gt;349504K(1747648K), 0.7146300 secs] 6433617K-&gt;5454386K(8039104K), 0.7175950 secs] [Times: user=2.62 sys=0.00, real=0.72 secs] Heap after GC invocations=84 (full 15): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5104882K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.7226730 seconds{Heap before GC invocations=84 (full 15): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5104882K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:09.732+0800: 530.403: [GC 530.405: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 198649176 bytes, 198649176 total- age 2: 159242600 bytes, 357891776 total: 1747648K-&gt;349504K(1747648K), 0.6434870 secs] 6852530K-&gt;5827146K(8039104K), 0.6463900 secs] [Times: user=2.35 sys=0.01, real=0.65 secs] Heap after GC invocations=85 (full 15): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5477642K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6513490 seconds{Heap before GC invocations=85 (full 15): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5477642K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:10.940+0800: 531.611: [GC 531.612: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 197532256 bytes, 197532256 total- age 2: 160359616 bytes, 357891872 total: 1747648K-&gt;349504K(1747648K), 0.4382120 secs] 7225290K-&gt;6050309K(8039104K), 0.4407410 secs] [Times: user=1.62 sys=0.00, real=0.44 secs] Heap after GC invocations=86 (full 15): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5700805K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4563320 secondsTotal time for which application threads were stopped: 0.0029180 seconds{Heap before GC invocations=86 (full 15): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5700805K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:12.528+0800: 533.199: [GC 533.200: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 200565312 bytes, 200565312 total- age 2: 157325752 bytes, 357891064 total: 1747648K-&gt;349504K(1747648K), 0.4385780 secs] 7448453K-&gt;6232134K(8039104K), 0.4413690 secs] [Times: user=1.63 sys=0.00, real=0.44 secs] Heap after GC invocations=87 (full 15): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5882630K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4443070 secondsTotal time for which application threads were stopped: 0.0120890 seconds{Heap before GC invocations=87 (full 15): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5882630K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:13.647+0800: 534.318: [GC 534.320: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 213914528 bytes, 213914528 total- age 2: 143976864 bytes, 357891392 total: 1747648K-&gt;349504K(1747648K), 0.4125440 secs] 7630278K-&gt;6427166K(8039104K), 0.4155270 secs] [Times: user=1.48 sys=0.01, real=0.41 secs] Heap after GC invocations=88 (full 15): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6077662K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4221000 seconds{Heap before GC invocations=88 (full 15): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6077662K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:14.756+0800: 535.428: [GC 535.429: [ParNew: 1747648K-&gt;1747648K(1747648K), 0.0000240 secs]535.429: [CMS2016-09-06T16:02:15.209+0800: 535.879: [CMS-concurrent-mark: 5.711/9.522 secs] [Times: user=45.68 sys=1.22, real=9.52 secs] (concurrent mode failure): 6077662K-&gt;3605905K(6291456K), 9.9525180 secs] 7825310K-&gt;3605905K(8039104K), [CMS Perm : 33628K-&gt;33628K(56112K)], 9.9558060 secs] [Times: user=11.02 sys=0.01, real=9.95 secs] Heap after GC invocations=89 (full 16): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3605905K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 9.9607960 seconds{Heap before GC invocations=89 (full 16): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3605905K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:25.230+0800: 545.901: [GC 545.903: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 327362984 bytes, 327362984 total: 1398144K-&gt;349504K(1747648K), 0.2653520 secs] 5004049K-&gt;3958054K(8039104K), 0.2681310 secs] [Times: user=1.06 sys=0.00, real=0.27 secs] Heap after GC invocations=90 (full 16): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3608550K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.2771830 seconds2016-09-06T16:02:25.743+0800: 546.415: [GC [1 CMS-initial-mark: 3608550K(6291456K)] 4418213K(8039104K), 0.4774540 secs] [Times: user=0.48 sys=0.00, real=0.48 secs] Total time for which application threads were stopped: 0.4907380 seconds2016-09-06T16:02:26.223+0800: 546.894: [CMS-concurrent-mark-start]{Heap before GC invocations=90 (full 17): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3608550K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:26.657+0800: 547.328: [GC 547.329: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 276235976 bytes, 276235976 total: 1747648K-&gt;349504K(1747648K), 0.5282340 secs] 5356198K-&gt;4282505K(8039104K), 0.5312060 secs] [Times: user=1.94 sys=0.00, real=0.53 secs] Heap after GC invocations=91 (full 17): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3933001K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5445580 seconds{Heap before GC invocations=91 (full 17): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3933001K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:27.838+0800: 548.510: [GC 548.511: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 177469648 bytes, 177469648 total- age 2: 180421848 bytes, 357891496 total: 1747648K-&gt;349504K(1747648K), 0.4162080 secs] 5680649K-&gt;4438094K(8039104K), 0.4188060 secs] [Times: user=1.53 sys=0.01, real=0.42 secs] Heap after GC invocations=92 (full 17): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4088590K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4358040 seconds{Heap before GC invocations=92 (full 17): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4088590K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:28.804+0800: 549.476: [GC 549.477: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 242510392 bytes, 242510392 total- age 2: 115381328 bytes, 357891720 total: 1747648K-&gt;349504K(1747648K), 0.5373280 secs] 5836238K-&gt;4758527K(8039104K), 0.5402750 secs] [Times: user=1.97 sys=0.00, real=0.54 secs] Heap after GC invocations=93 (full 17): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4409023K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5456360 seconds{Heap before GC invocations=93 (full 17): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4409023K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:30.586+0800: 551.258: [GC 551.259: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 151483256 bytes, 151483256 total- age 2: 206408432 bytes, 357891688 total: 1747648K-&gt;349504K(1747648K), 0.4094680 secs] 6156671K-&gt;4917534K(8039104K), 0.4124500 secs] [Times: user=1.54 sys=0.01, real=0.42 secs] Heap after GC invocations=94 (full 17): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4568030K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33628K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4173160 seconds{Heap before GC invocations=94 (full 17): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4568030K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33629K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:31.521+0800: 552.193: [GC 552.194: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 253088096 bytes, 253088096 total- age 2: 104799592 bytes, 357887688 total: 1747648K-&gt;349504K(1747648K), 0.4360070 secs] 6315678K-&gt;5158911K(8039104K), 0.4389920 secs] [Times: user=1.60 sys=0.00, real=0.44 secs] Heap after GC invocations=95 (full 17): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4809407K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33629K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4452880 seconds{Heap before GC invocations=95 (full 17): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4809407K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33629K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:32.538+0800: 553.209: [GC 553.211: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 181160096 bytes, 181160096 total- age 2: 176731672 bytes, 357891768 total: 1747648K-&gt;349504K(1747648K), 0.4712680 secs] 6557055K-&gt;5390940K(8039104K), 0.4744470 secs] [Times: user=1.75 sys=0.00, real=0.47 secs] Heap after GC invocations=96 (full 17): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5041436K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33629K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4836100 seconds{Heap before GC invocations=96 (full 17): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5041436K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33629K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:33.586+0800: 554.257: [GC 554.259: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 245372088 bytes, 245372088 total- age 2: 112503648 bytes, 357875736 total: 1747648K-&gt;349504K(1747648K), 0.5518900 secs] 6789084K-&gt;5716808K(8039104K), 0.5552190 secs] [Times: user=2.02 sys=0.01, real=0.56 secs] Heap after GC invocations=97 (full 17): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5367304K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33629K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5797900 seconds{Heap before GC invocations=97 (full 17): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5367304K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33629K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:34.629+0800: 555.301: [GC 555.302: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 197590392 bytes, 197590392 total- age 2: 160301288 bytes, 357891680 total: 1747648K-&gt;349504K(1747648K), 0.6238310 secs] 7114952K-&gt;6080699K(8039104K), 0.6269300 secs] [Times: user=2.28 sys=0.01, real=0.63 secs] Heap after GC invocations=98 (full 17): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5731195K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33629K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6325110 seconds{Heap before GC invocations=98 (full 17): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5731195K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33636K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:36.008+0800: 556.680: [GC 556.681: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 197201208 bytes, 197201208 total- age 2: 160690112 bytes, 357891320 total: 1747648K-&gt;349504K(1747648K), 0.5348100 secs] 7478843K-&gt;6344144K(8039104K), 0.5378770 secs] [Times: user=1.96 sys=0.00, real=0.53 secs] Heap after GC invocations=99 (full 17): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5994640K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33636K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5472910 seconds{Heap before GC invocations=99 (full 17): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5994640K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33636K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:37.066+0800: 557.737: [GC 557.739: [ParNew: 1747648K-&gt;1747648K(1747648K), 0.0000230 secs]557.739: [CMS2016-09-06T16:02:38.262+0800: 558.933: [CMS-concurrent-mark: 7.294/12.038 secs] [Times: user=56.31 sys=1.49, real=12.04 secs] (concurrent mode failure): 5994640K-&gt;3314562K(6291456K), 9.3939640 secs] 7742288K-&gt;3314562K(8039104K), [CMS Perm : 33636K-&gt;33635K(56112K)], 9.3969110 secs] [Times: user=12.13 sys=0.02, real=9.40 secs] Heap after GC invocations=100 (full 18): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3314562K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33635K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 9.4032850 seconds{Heap before GC invocations=100 (full 18): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3314562K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33641K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:46.904+0800: 567.576: [GC 567.577: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 357891896 bytes, 357891896 total: 1398144K-&gt;349504K(1747648K), 0.3833140 secs] 4712706K-&gt;3753970K(8039104K), 0.3866550 secs] [Times: user=1.45 sys=0.01, real=0.39 secs] Heap after GC invocations=101 (full 18): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3404466K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33641K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.3946040 seconds2016-09-06T16:02:47.300+0800: 567.971: [GC [1 CMS-initial-mark: 3404466K(6291456K)] 3759766K(8039104K), 0.2916320 secs] [Times: user=0.29 sys=0.00, real=0.29 secs] Total time for which application threads were stopped: 0.2969770 seconds2016-09-06T16:02:47.594+0800: 568.265: [CMS-concurrent-mark-start]{Heap before GC invocations=101 (full 19): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 3404466K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33641K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:48.083+0800: 568.755: [GC 568.756: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 349222872 bytes, 349222872 total: 1747648K-&gt;349502K(1747648K), 0.5275080 secs] 5152114K-&gt;4119787K(8039104K), 0.5306970 secs] [Times: user=1.90 sys=0.01, real=0.53 secs] Heap after GC invocations=102 (full 19): par new generation total 1747648K, used 349502K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afb60, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3770284K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33641K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5366080 seconds{Heap before GC invocations=102 (full 19): par new generation total 1747648K, used 1747646K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afb60, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 3770284K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33641K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:49.337+0800: 570.008: [GC 570.010: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 356057376 bytes, 356057376 total: 1747646K-&gt;349504K(1747648K), 0.5234740 secs] 5517931K-&gt;4436860K(8039104K), 0.5267460 secs] [Times: user=1.91 sys=0.00, real=0.53 secs] Heap after GC invocations=103 (full 19): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4087356K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33641K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5319530 seconds{Heap before GC invocations=103 (full 19): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4087356K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33641K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:50.451+0800: 571.122: [GC 571.123: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 329237696 bytes, 329237696 total: 1747648K-&gt;346572K(1747648K), 0.4690790 secs] 5835004K-&gt;4751031K(8039104K), 0.4723290 secs] [Times: user=1.69 sys=0.00, real=0.47 secs] Heap after GC invocations=104 (full 19): par new generation total 1747648K, used 346572K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006655d3300, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4404459K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33641K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4800690 seconds{Heap before GC invocations=104 (full 19): par new generation total 1747648K, used 1744716K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006655d3300, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4404459K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33641K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:51.621+0800: 572.293: [GC 572.295: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 248338168 bytes, 248338168 total: 1744716K-&gt;327784K(1747648K), 0.4514900 secs] 6149175K-&gt;5010467K(8039104K), 0.4635020 secs] [Times: user=1.57 sys=0.01, real=0.46 secs] Heap after GC invocations=105 (full 19): par new generation total 1747648K, used 327784K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 93% used [0x00000006658b0000, 0x00000006798ca080, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4682683K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33641K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4693970 seconds{Heap before GC invocations=105 (full 19): par new generation total 1747648K, used 1725928K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 93% used [0x00000006658b0000, 0x00000006798ca080, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4682683K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33642K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:52.892+0800: 573.563: [GC 573.565: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 233847808 bytes, 233847808 total- age 2: 124040040 bytes, 357887848 total: 1725928K-&gt;349504K(1747648K), 0.4385660 secs] 6408611K-&gt;5183013K(8039104K), 0.4415560 secs] [Times: user=1.64 sys=0.00, real=0.44 secs] Heap after GC invocations=106 (full 19): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4833509K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33642K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4664780 secondsTotal time for which application threads were stopped: 0.0221260 secondsTotal time for which application threads were stopped: 0.0260610 seconds{Heap before GC invocations=106 (full 19): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4833509K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33656K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:54.465+0800: 575.136: [GC 575.138: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 191392312 bytes, 191392312 total- age 2: 166471528 bytes, 357863840 total: 1747648K-&gt;349504K(1747648K), 0.5259290 secs] 6581157K-&gt;5471732K(8039104K), 0.5295050 secs] [Times: user=1.88 sys=0.01, real=0.53 secs] Heap after GC invocations=107 (full 19): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5122228K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33656K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5419180 seconds{Heap before GC invocations=107 (full 19): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5122228K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33657K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:55.573+0800: 576.244: [GC 576.245: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 242370712 bytes, 242370712 total- age 2: 115520704 bytes, 357891416 total: 1747648K-&gt;349504K(1747648K), 0.6112710 secs] 6869876K-&gt;5873635K(8039104K), 0.6145140 secs] [Times: user=2.23 sys=0.01, real=0.61 secs] Heap after GC invocations=108 (full 19): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5524131K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33657K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6231000 seconds{Heap before GC invocations=108 (full 19): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5524131K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33657K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:56.736+0800: 577.408: [GC 577.409: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 194791184 bytes, 194791184 total- age 2: 163100680 bytes, 357891864 total: 1747648K-&gt;349504K(1747648K), 0.5832810 secs] 7271779K-&gt;6233654K(8039104K), 0.5868480 secs] [Times: user=2.08 sys=0.01, real=0.59 secs] Heap after GC invocations=109 (full 19): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5884150K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33657K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5936500 seconds{Heap before GC invocations=109 (full 19): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5884150K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33657K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:02:57.845+0800: 578.516: [GC 578.518: [ParNew: 1747648K-&gt;1747648K(1747648K), 0.0000210 secs]578.518: [CMS2016-09-06T16:02:58.704+0800: 579.374: [CMS-concurrent-mark: 6.683/11.109 secs] [Times: user=52.01 sys=1.56, real=11.11 secs] (concurrent mode failure): 5884150K-&gt;4259552K(6291456K), 9.9834470 secs] 7631798K-&gt;4259552K(8039104K), [CMS Perm : 33657K-&gt;33656K(56112K)], 9.9863470 secs] [Times: user=11.91 sys=0.01, real=9.99 secs] Heap after GC invocations=110 (full 20): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4259552K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33656K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 9.9914030 seconds{Heap before GC invocations=110 (full 20): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4259552K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33656K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:03:08.301+0800: 588.972: [GC 588.974: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 356236672 bytes, 356236672 total: 1398144K-&gt;349504K(1747648K), 0.2752920 secs] 5657696K-&gt;4626112K(8039104K), 0.2784970 secs] [Times: user=1.08 sys=0.00, real=0.28 secs] Heap after GC invocations=111 (full 20): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4276608K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33656K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.2853100 seconds2016-09-06T16:03:08.589+0800: 589.260: [GC [1 CMS-initial-mark: 4276608K(6291456K)] 4637232K(8039104K), 0.2634600 secs] [Times: user=0.26 sys=0.00, real=0.27 secs] Total time for which application threads were stopped: 0.2684790 seconds2016-09-06T16:03:08.855+0800: 589.526: [CMS-concurrent-mark-start]{Heap before GC invocations=111 (full 21): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4276608K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33656K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:03:09.377+0800: 590.048: [GC 590.049: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 318680384 bytes, 318680384 total: 1747648K-&gt;348118K(1747648K), 0.5265590 secs] 6024256K-&gt;4999859K(8039104K), 0.5297050 secs] [Times: user=1.90 sys=0.01, real=0.53 secs] Heap after GC invocations=112 (full 21): par new generation total 1747648K, used 348118K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 99% used [0x00000006658b0000, 0x000000067aca5aa0, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4651740K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33656K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5420300 secondsTotal time for which application threads were stopped: 0.0304930 seconds{Heap before GC invocations=112 (full 21): par new generation total 1747648K, used 1746262K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x00000006658b0000, 0x000000067aca5aa0, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4651740K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33659K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:03:10.500+0800: 591.171: [GC 591.173: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 176247184 bytes, 176247184 total- age 2: 181643472 bytes, 357890656 total: 1746262K-&gt;349504K(1747648K), 0.5969700 secs] 6398003K-&gt;5278478K(8039104K), 0.6003890 secs] [Times: user=2.16 sys=0.00, real=0.60 secs] Heap after GC invocations=113 (full 21): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4928974K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33659K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6055090 secondsTotal time for which application threads were stopped: 0.0241290 seconds{Heap before GC invocations=113 (full 21): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4928974K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33660K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:03:12.494+0800: 593.165: [GC 593.167: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 204533112 bytes, 204533112 total- age 2: 153358752 bytes, 357891864 total: 1747648K-&gt;349504K(1747648K), 0.5857940 secs] 6676622K-&gt;5629771K(8039104K), 0.5891890 secs] [Times: user=2.13 sys=0.00, real=0.59 secs] Heap after GC invocations=114 (full 21): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5280267K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33660K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6019250 seconds{Heap before GC invocations=114 (full 21): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5280267K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33660K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:03:13.606+0800: 594.277: [GC 594.279: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 206317128 bytes, 206317128 total- age 2: 151574720 bytes, 357891848 total: 1747648K-&gt;349504K(1747648K), 0.5901960 secs] 7027915K-&gt;5980654K(8039104K), 0.5935880 secs] [Times: user=2.14 sys=0.01, real=0.59 secs] Heap after GC invocations=115 (full 21): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5631150K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33660K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6068700 seconds{Heap before GC invocations=115 (full 21): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5631150K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33677K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:03:14.689+0800: 595.361: [GC 595.362: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 241749352 bytes, 241749352 total- age 2: 116142416 bytes, 357891768 total: 1747648K-&gt;349504K(1747648K), 0.5973490 secs] 7378798K-&gt;6397790K(8039104K), 0.6002160 secs] [Times: user=2.14 sys=0.00, real=0.60 secs] Heap after GC invocations=116 (full 21): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 6048286K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33677K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6052400 seconds{Heap before GC invocations=116 (full 21): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 6048286K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56112K, used 33680K [0x00000007fae00000, 0x00000007fe4cc000, 0x0000000800000000)2016-09-06T16:03:16.527+0800: 597.199: [GC 597.201: [ParNew: 1747648K-&gt;1747648K(1747648K), 0.0000240 secs]597.201: [CMS2016-09-06T16:03:16.982+0800: 597.653: [CMS-concurrent-mark: 4.849/8.127 secs] [Times: user=38.73 sys=0.99, real=8.12 secs] (concurrent mode failure): 6048286K-&gt;4890301K(6291456K), 11.4728760 secs] 7795934K-&gt;4890301K(8039104K), [CMS Perm : 33680K-&gt;33680K(56112K)], 11.4766880 secs] [Times: user=12.54 sys=0.02, real=11.48 secs] Heap after GC invocations=117 (full 22): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4890301K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.5053690 seconds{Heap before GC invocations=117 (full 22): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4890301K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:03:28.644+0800: 609.315: [GC 609.317: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 354679960 bytes, 354679960 total: 1398144K-&gt;349504K(1747648K), 0.2532370 secs] 6288445K-&gt;5242216K(8039104K), 0.2563560 secs] [Times: user=1.01 sys=0.00, real=0.26 secs] Heap after GC invocations=118 (full 22): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4892712K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.2615830 seconds2016-09-06T16:03:28.906+0800: 609.578: [GC [1 CMS-initial-mark: 4892712K(6291456K)] 5243773K(8039104K), 0.2393970 secs] [Times: user=0.24 sys=0.00, real=0.24 secs] Total time for which application threads were stopped: 0.2433570 seconds2016-09-06T16:03:29.148+0800: 609.819: [CMS-concurrent-mark-start]{Heap before GC invocations=118 (full 23): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4892712K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:03:29.724+0800: 610.395: [GC 610.396: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 354140064 bytes, 354140064 total: 1747648K-&gt;349504K(1747648K), 0.5147680 secs] 6640360K-&gt;5629956K(8039104K), 0.5178330 secs] [Times: user=1.83 sys=0.00, real=0.52 secs] Heap after GC invocations=119 (full 23): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5280452K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5237320 seconds{Heap before GC invocations=119 (full 23): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5280452K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:03:30.707+0800: 611.378: [GC 611.380: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 344363480 bytes, 344363480 total: 1747648K-&gt;349504K(1747648K), 0.5203950 secs] 7028100K-&gt;6002172K(8039104K), 0.5234510 secs] [Times: user=1.86 sys=0.01, real=0.52 secs] Heap after GC invocations=120 (full 23): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5652668K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5282650 seconds{Heap before GC invocations=120 (full 23): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5652668K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:03:31.904+0800: 612.575: [GC 612.577: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 172045344 bytes, 172045344 total: 1747648K-&gt;338759K(1747648K), 0.3928500 secs] 7400316K-&gt;6289715K(8039104K), 0.3959340 secs] [Times: user=1.39 sys=0.00, real=0.40 secs] Heap after GC invocations=121 (full 23): par new generation total 1747648K, used 338759K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 96% used [0x00000006658b0000, 0x000000067a381e00, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5950955K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4080690 seconds{Heap before GC invocations=121 (full 23): par new generation total 1747648K, used 1736903K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 96% used [0x00000006658b0000, 0x000000067a381e00, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5950955K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:03:33.571+0800: 614.242: [GC 614.244: [ParNew: 1736903K-&gt;1736903K(1747648K), 0.0000350 secs]614.250: [CMS2016-09-06T16:03:34.946+0800: 615.617: [CMS-concurrent-mark: 4.228/5.798 secs] [Times: user=27.31 sys=0.55, real=5.80 secs] (concurrent mode failure): 5950955K-&gt;4955304K(6291456K), 11.6890100 secs] 7687859K-&gt;4955304K(8039104K), [CMS Perm : 33680K-&gt;33680K(56304K)], 11.6985610 secs] [Times: user=15.40 sys=0.02, real=11.70 secs] Heap after GC invocations=122 (full 24): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4955304K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.7127350 seconds{Heap before GC invocations=122 (full 24): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4955304K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:03:45.722+0800: 626.393: [GC 626.395: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 338636896 bytes, 338636896 total: 1398144K-&gt;349504K(1747648K), 0.2337290 secs] 6353448K-&gt;5304808K(8039104K), 0.2370060 secs] [Times: user=0.93 sys=0.00, real=0.24 secs] Heap after GC invocations=123 (full 24): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4955304K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.2454330 seconds2016-09-06T16:03:45.963+0800: 626.635: [GC [1 CMS-initial-mark: 4955304K(6291456K)] 5305249K(8039104K), 0.2382250 secs] [Times: user=0.24 sys=0.00, real=0.24 secs] Total time for which application threads were stopped: 0.2419980 seconds2016-09-06T16:03:46.206+0800: 626.877: [CMS-concurrent-mark-start]{Heap before GC invocations=123 (full 25): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4955304K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:03:46.815+0800: 627.486: [GC 627.488: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 327696824 bytes, 327696824 total: 1747648K-&gt;349504K(1747648K), 0.5352560 secs] 6702952K-&gt;5719599K(8039104K), 0.5385010 secs] [Times: user=1.91 sys=0.00, real=0.54 secs] Heap after GC invocations=124 (full 25): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5370095K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5721320 seconds{Heap before GC invocations=124 (full 25): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5370095K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33681K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:03:47.823+0800: 628.495: [GC 628.496: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 326984032 bytes, 326984032 total: 1747648K-&gt;349504K(1747648K), 0.4746100 secs] 7117743K-&gt;6051952K(8039104K), 0.4783300 secs] [Times: user=1.70 sys=0.00, real=0.48 secs] Heap after GC invocations=125 (full 25): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5702448K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33681K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4855160 secondsTotal time for which application threads were stopped: 0.0067180 secondsTotal time for which application threads were stopped: 0.0033780 secondsTotal time for which application threads were stopped: 0.0042710 seconds{Heap before GC invocations=125 (full 25): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5702448K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33681K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:03:48.768+0800: 629.439: [GC 629.441: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 344180416 bytes, 344180416 total: 1747648K-&gt;349504K(1747648K), 0.5011090 secs] 7450096K-&gt;6380890K(8039104K), 0.5042000 secs] [Times: user=1.74 sys=0.00, real=0.51 secs] Heap after GC invocations=126 (full 25): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 6031386K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33681K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5101670 secondsTotal time for which application threads were stopped: 0.0326360 secondsTotal time for which application threads were stopped: 0.0037060 secondsTotal time for which application threads were stopped: 0.0033130 secondsTotal time for which application threads were stopped: 0.0037160 secondsTotal time for which application threads were stopped: 0.0088710 secondsTotal time for which application threads were stopped: 0.0041060 secondsTotal time for which application threads were stopped: 0.0040820 secondsTotal time for which application threads were stopped: 0.0025210 secondsTotal time for which application threads were stopped: 0.0027840 secondsTotal time for which application threads were stopped: 0.0020870 secondsTotal time for which application threads were stopped: 0.0021390 secondsTotal time for which application threads were stopped: 0.0023440 secondsTotal time for which application threads were stopped: 0.0023310 seconds{Heap before GC invocations=126 (full 25): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 6031386K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33681K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:03:50.681+0800: 631.352: [GC 631.354: [ParNew: 1747648K-&gt;1747648K(1747648K), 0.0000200 secs]631.354: [CMS2016-09-06T16:03:51.818+0800: 632.489: [CMS-concurrent-mark: 3.799/5.611 secs] [Times: user=25.45 sys=0.79, real=5.61 secs] (concurrent mode failure): 6031386K-&gt;4187032K(6291456K), 10.0107190 secs] 7779034K-&gt;4187032K(8039104K), [CMS Perm : 33681K-&gt;33680K(56304K)], 10.0142350 secs] [Times: user=12.76 sys=0.02, real=10.01 secs] Heap after GC invocations=127 (full 26): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4187032K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 10.0195130 secondsTotal time for which application threads were stopped: 0.0050430 seconds2016-09-06T16:04:01.091+0800: 641.762: [GC [1 CMS-initial-mark: 4187032K(6291456K)] 5241876K(8039104K), 0.5736520 secs] [Times: user=0.57 sys=0.00, real=0.57 secs] Total time for which application threads were stopped: 0.5775170 seconds2016-09-06T16:04:01.668+0800: 642.338: [CMS-concurrent-mark-start]{Heap before GC invocations=127 (full 27): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4187032K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:01.783+0800: 642.454: [GC 642.456: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 324594560 bytes, 324594560 total: 1398144K-&gt;349504K(1747648K), 0.2490750 secs] 5585176K-&gt;4540791K(8039104K), 0.2523340 secs] [Times: user=0.98 sys=0.00, real=0.25 secs] Heap after GC invocations=128 (full 27): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4191287K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.2612390 seconds{Heap before GC invocations=128 (full 27): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4191287K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:02.528+0800: 643.199: [GC 643.201: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 305949512 bytes, 305949512 total: 1747648K-&gt;320562K(1747648K), 0.4365890 secs] 5938935K-&gt;4828262K(8039104K), 0.4400880 secs] [Times: user=1.58 sys=0.01, real=0.44 secs] Heap after GC invocations=129 (full 27): par new generation total 1747648K, used 320562K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 91% used [0x00000006658b0000, 0x00000006791bc800, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4507700K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4508570 secondsTotal time for which application threads were stopped: 0.1038200 seconds{Heap before GC invocations=129 (full 27): par new generation total 1747648K, used 1718706K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 91% used [0x00000006658b0000, 0x00000006791bc800, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4507700K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:03.558+0800: 644.230: [GC 644.231: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 209841560 bytes, 209841560 total- age 2: 148050352 bytes, 357891912 total: 1718706K-&gt;349504K(1747648K), 0.4874350 secs] 6226406K-&gt;5141689K(8039104K), 0.4909300 secs] [Times: user=1.77 sys=0.00, real=0.49 secs] Heap after GC invocations=130 (full 27): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4792185K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5063780 seconds{Heap before GC invocations=130 (full 27): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4792185K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:04.535+0800: 645.206: [GC 645.208: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 190623048 bytes, 190623048 total- age 2: 167268728 bytes, 357891776 total: 1747648K-&gt;349504K(1747648K), 0.4784100 secs] 6539833K-&gt;5438352K(8039104K), 0.4817580 secs] [Times: user=1.73 sys=0.00, real=0.48 secs] Heap after GC invocations=131 (full 27): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5088848K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33680K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4879610 seconds{Heap before GC invocations=131 (full 27): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5088848K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:05.794+0800: 646.465: [GC 646.466: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 201495736 bytes, 201495736 total- age 2: 156395992 bytes, 357891728 total: 1747648K-&gt;349504K(1747648K), 0.4533130 secs] 6836496K-&gt;5675353K(8039104K), 0.4564470 secs] [Times: user=1.67 sys=0.01, real=0.45 secs] Heap after GC invocations=132 (full 27): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5325849K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.4620020 secondsTotal time for which application threads were stopped: 0.0276060 seconds{Heap before GC invocations=132 (full 27): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5325849K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:07.137+0800: 647.809: [GC 647.810: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 221742664 bytes, 221742664 total- age 2: 136149208 bytes, 357891872 total: 1747648K-&gt;349504K(1747648K), 0.5435250 secs] 7073497K-&gt;6024569K(8039104K), 0.5470210 secs] [Times: user=1.97 sys=0.01, real=0.55 secs] Heap after GC invocations=133 (full 27): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5675065K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5588250 seconds{Heap before GC invocations=133 (full 27): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5675065K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:08.224+0800: 648.896: [GC 648.897: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 199042712 bytes, 199042712 total- age 2: 158844776 bytes, 357887488 total: 1747648K-&gt;349504K(1747648K), 0.5246610 secs] 7422713K-&gt;6377905K(8039104K), 0.5280970 secs] [Times: user=1.86 sys=0.01, real=0.53 secs] Heap after GC invocations=134 (full 27): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6028401K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5341700 seconds{Heap before GC invocations=134 (full 27): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6028401K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:09.202+0800: 649.873: [GC 649.875: [ParNew: 1747648K-&gt;1747648K(1747648K), 0.0000230 secs]649.875: [CMS2016-09-06T16:04:10.322+0800: 650.993: [CMS-concurrent-mark: 5.138/8.655 secs] [Times: user=39.53 sys=1.07, real=8.66 secs] (concurrent mode failure): 6028401K-&gt;4855756K(6291456K), 10.7926400 secs] 7776049K-&gt;4855756K(8039104K), [CMS Perm : 33682K-&gt;33681K(56304K)], 10.7959040 secs] [Times: user=13.82 sys=0.01, real=10.79 secs] Heap after GC invocations=135 (full 28): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4855756K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33681K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 10.8097320 secondsTotal time for which application threads were stopped: 0.0044050 secondsTotal time for which application threads were stopped: 0.0032990 secondsTotal time for which application threads were stopped: 0.0044980 secondsTotal time for which application threads were stopped: 0.0044620 seconds2016-09-06T16:04:20.391+0800: 661.063: [GC [1 CMS-initial-mark: 4855756K(6291456K)] 5614853K(8039104K), 0.3592640 secs] [Times: user=0.37 sys=0.00, real=0.36 secs] Total time for which application threads were stopped: 0.3650170 seconds2016-09-06T16:04:20.754+0800: 661.425: [CMS-concurrent-mark-start]{Heap before GC invocations=135 (full 29): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 4855756K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:21.214+0800: 661.886: [GC 661.888: [ParNewDesired survivor size 322102880 bytes, new threshold 8 (max 8)- age 1: 291714600 bytes, 291714600 total: 1398144K-&gt;349456K(1747648K), 0.2463000 secs] 6253900K-&gt;5205212K(8039104K), 0.2503850 secs] [Times: user=0.98 sys=0.01, real=0.25 secs] Heap after GC invocations=136 (full 29): par new generation total 1747648K, used 349456K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 99% used [0x00000006658b0000, 0x000000067adf4160, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4855756K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.2627300 seconds{Heap before GC invocations=136 (full 29): par new generation total 1747648K, used 1747600K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x00000006658b0000, 0x000000067adf4160, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 4855756K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:22.047+0800: 662.718: [GC 662.720: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 213797344 bytes, 213797344 total- age 2: 144092960 bytes, 357890304 total: 1747600K-&gt;349504K(1747648K), 0.5453190 secs] 6603356K-&gt;5470145K(8039104K), 0.5487780 secs] [Times: user=2.06 sys=0.01, real=0.55 secs] Heap after GC invocations=137 (full 29): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5120641K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5794430 seconds{Heap before GC invocations=137 (full 29): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5120641K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:23.645+0800: 664.316: [GC 664.318: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 231010496 bytes, 231010496 total- age 2: 126881232 bytes, 357891728 total: 1747648K-&gt;349504K(1747648K), 0.7196610 secs] 6868289K-&gt;5908188K(8039104K), 0.7231630 secs] [Times: user=2.63 sys=0.02, real=0.72 secs] Heap after GC invocations=138 (full 29): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5558684K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.7282500 secondsTotal time for which application threads were stopped: 0.0054370 secondsTotal time for which application threads were stopped: 0.0038070 secondsTotal time for which application threads were stopped: 0.0038950 secondsTotal time for which application threads were stopped: 0.0047070 secondsTotal time for which application threads were stopped: 0.0030950 secondsTotal time for which application threads were stopped: 0.0041110 seconds{Heap before GC invocations=138 (full 29): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5558684K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:25.194+0800: 665.866: [GC 665.868: [ParNewDesired survivor size 322102880 bytes, new threshold 2 (max 8)- age 1: 224785920 bytes, 224785920 total- age 2: 133095328 bytes, 357881248 total: 1747648K-&gt;349504K(1747648K), 0.6363650 secs] 7306332K-&gt;6194713K(8039104K), 0.6403540 secs] [Times: user=2.28 sys=0.00, real=0.64 secs] Heap after GC invocations=139 (full 29): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5845209K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.6466590 seconds{Heap before GC invocations=139 (full 29): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5845209K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33683K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:26.470+0800: 667.141: [GC 667.143: [ParNew: 1747648K-&gt;1747648K(1747648K), 0.0000210 secs]667.143: [CMS2016-09-06T16:04:26.992+0800: 667.663: [CMS-concurrent-mark: 3.752/6.238 secs] [Times: user=29.14 sys=0.91, real=6.23 secs] (concurrent mode failure): 5845209K-&gt;5558759K(6291456K), 11.0209690 secs] 7592857K-&gt;5558759K(8039104K), [CMS Perm : 33683K-&gt;33682K(56304K)], 11.0246260 secs] [Times: user=12.05 sys=0.04, real=11.02 secs] Heap after GC invocations=140 (full 30): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5558759K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.0589190 seconds{Heap before GC invocations=140 (full 30): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5558759K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:37.941+0800: 678.612: [GC 678.614: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 357891464 bytes, 357891464 total: 1398144K-&gt;349504K(1747648K), 0.3038250 secs] 6956903K-&gt;5957258K(8039104K), 0.3079610 secs] [Times: user=1.18 sys=0.00, real=0.31 secs] Heap after GC invocations=141 (full 30): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5607754K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33682K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.3154330 seconds2016-09-06T16:04:38.257+0800: 678.929: [GC [1 CMS-initial-mark: 5607754K(6291456K)] 5959864K(8039104K), 0.2671270 secs] [Times: user=0.27 sys=0.00, real=0.26 secs] Total time for which application threads were stopped: 0.2727900 seconds2016-09-06T16:04:38.528+0800: 679.199: [CMS-concurrent-mark-start]{Heap before GC invocations=141 (full 31): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5607754K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33685K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:39.088+0800: 679.759: [GC 679.761: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 333765856 bytes, 333765856 total: 1747648K-&gt;349504K(1747648K), 0.5134430 secs] 7355402K-&gt;6323588K(8039104K), 0.5172270 secs] [Times: user=1.87 sys=0.01, real=0.51 secs] Heap after GC invocations=142 (full 31): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5974084K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33685K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5231130 seconds{Heap before GC invocations=142 (full 31): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5974084K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33685K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:40.345+0800: 681.016: [GC 681.019: [ParNew: 1747648K-&gt;1747648K(1747648K), 0.0000270 secs]681.019: [CMS2016-09-06T16:04:41.741+0800: 682.412: [CMS-concurrent-mark: 2.525/3.213 secs] [Times: user=14.22 sys=0.35, real=3.21 secs] (concurrent mode failure): 5974084K-&gt;5652612K(6291456K), 12.7720580 secs] 7721732K-&gt;5652612K(8039104K), [CMS Perm : 33685K-&gt;33684K(56304K)], 12.7766530 secs] [Times: user=16.56 sys=0.01, real=12.78 secs] Heap after GC invocations=143 (full 32): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5652612K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33684K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.8121560 seconds{Heap before GC invocations=143 (full 32): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 5652612K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33685K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:53.585+0800: 694.257: [GC 694.259: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 357891752 bytes, 357891752 total: 1398144K-&gt;349504K(1747648K), 0.2853240 secs] 7050756K-&gt;6056109K(8039104K), 0.2895010 secs] [Times: user=1.10 sys=0.00, real=0.29 secs] Heap after GC invocations=144 (full 32): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5706605K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33685K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.2962130 seconds2016-09-06T16:04:53.880+0800: 694.552: [GC [1 CMS-initial-mark: 5706605K(6291456K)] 6056127K(8039104K), 0.2663330 secs] [Times: user=0.27 sys=0.00, real=0.26 secs] Total time for which application threads were stopped: 0.2713960 seconds2016-09-06T16:04:54.152+0800: 694.822: [CMS-concurrent-mark-start]{Heap before GC invocations=144 (full 33): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x00000006658b0000, 0x000000067ae00000, 0x000000067ae00000) to space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) concurrent mark-sweep generation total 6291456K, used 5706605K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33685K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:54.750+0800: 695.421: [GC 695.423: [ParNewDesired survivor size 322102880 bytes, new threshold 1 (max 8)- age 1: 357317856 bytes, 357317856 total: 1747648K-&gt;349504K(1747648K), 0.5487910 secs] 7454253K-&gt;6445936K(8039104K), 0.5528490 secs] [Times: user=1.97 sys=0.02, real=0.55 secs] Heap after GC invocations=145 (full 33): par new generation total 1747648K, used 349504K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6096432K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33685K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 0.5599940 seconds{Heap before GC invocations=145 (full 33): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6096432K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33685K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:04:55.917+0800: 696.589: [GC 696.590: [ParNew: 1747648K-&gt;1747648K(1747648K), 0.0000200 secs]696.590: [CMS2016-09-06T16:04:57.520+0800: 698.191: [CMS-concurrent-mark: 2.653/3.369 secs] [Times: user=14.63 sys=0.52, real=3.37 secs] (concurrent mode failure): 6096432K-&gt;6029525K(6291456K), 13.0924990 secs] 7844080K-&gt;6029525K(8039104K), [CMS Perm : 33685K-&gt;33684K(56304K)], 13.0962700 secs] [Times: user=17.43 sys=0.02, real=13.10 secs] Heap after GC invocations=146 (full 34): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6029525K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33684K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.1026330 seconds{Heap before GC invocations=146 (full 34): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6029525K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33686K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:05:09.501+0800: 710.173: [GC 710.174: [ParNew: 1398144K-&gt;1398144K(1747648K), 0.0000220 secs]710.174: [CMS: 6029525K-&gt;6175265K(6291456K), 11.8010130 secs] 7427669K-&gt;6175265K(8039104K), [CMS Perm : 33686K-&gt;33686K(56304K)], 11.8048970 secs] [Times: user=11.82 sys=0.00, real=11.80 secs] Heap after GC invocations=147 (full 35): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6175265K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33686K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.8180220 seconds2016-09-06T16:05:21.443+0800: 722.114: [GC [1 CMS-initial-mark: 6175265K(6291456K)] 6422705K(8039104K), 0.1995000 secs] [Times: user=0.20 sys=0.00, real=0.20 secs] Total time for which application threads were stopped: 0.2069430 seconds2016-09-06T16:05:21.646+0800: 722.317: [CMS-concurrent-mark-start]{Heap before GC invocations=147 (full 36): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6175265K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33686K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:05:22.151+0800: 722.823: [GC 722.825: [ParNew: 1398144K-&gt;1398144K(1747648K), 0.0000210 secs]722.825: [CMS2016-09-06T16:05:24.091+0800: 724.761: [CMS-concurrent-mark: 2.295/2.444 secs] [Times: user=10.18 sys=0.11, real=2.44 secs] (concurrent mode failure): 6175265K-&gt;6176851K(6291456K), 13.7697210 secs] 7573409K-&gt;6176851K(8039104K), [CMS Perm : 33686K-&gt;33686K(56304K)], 13.7735710 secs] [Times: user=19.15 sys=0.01, real=13.78 secs] Heap after GC invocations=148 (full 37): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6176851K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33686K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.7846940 seconds{Heap before GC invocations=148 (full 37): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6176851K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33686K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:05:36.451+0800: 737.122: [GC 737.124: [ParNew: 1398144K-&gt;1398144K(1747648K), 0.0000220 secs]737.124: [CMS: 6176851K-&gt;6291455K(6291456K), 12.4985520 secs] 7574995K-&gt;6304710K(8039104K), [CMS Perm : 33686K-&gt;33686K(56304K)], 12.5024830 secs] [Times: user=12.51 sys=0.01, real=12.50 secs] Heap after GC invocations=149 (full 38): par new generation total 1747648K, used 13255K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fbaf1c78, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33686K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.5145060 seconds2016-09-06T16:05:49.767+0800: 750.438: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 7732160K(8039104K), 0.8235670 secs] [Times: user=0.83 sys=0.00, real=0.82 secs] Total time for which application threads were stopped: 0.8360380 seconds2016-09-06T16:05:50.594+0800: 751.265: [CMS-concurrent-mark-start]{Heap before GC invocations=149 (full 39): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33690K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:05:52.491+0800: 753.163: [Full GC 753.164: [CMS2016-09-06T16:05:53.448+0800: 754.119: [CMS-concurrent-mark: 2.709/2.855 secs] [Times: user=14.05 sys=0.49, real=2.86 secs] (concurrent mode failure): 6291456K-&gt;6125807K(6291456K), 12.5858200 secs] 8039104K-&gt;6125807K(8039104K), [CMS Perm : 33690K-&gt;33690K(56304K)], 12.5896740 secs] [Times: user=14.95 sys=0.01, real=12.59 secs] Heap after GC invocations=150 (full 40): par new generation total 1747648K, used 0K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fae00000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6125807K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33690K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.5955520 seconds{Heap before GC invocations=150 (full 40): par new generation total 1747648K, used 1398144K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6125807K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33690K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:06:05.647+0800: 766.319: [GC 766.321: [ParNew: 1398144K-&gt;1398144K(1747648K), 0.0000220 secs]766.321: [CMS: 6125807K-&gt;6291455K(6291456K), 11.4064370 secs] 7523951K-&gt;6293785K(8039104K), [CMS Perm : 33690K-&gt;33690K(56304K)], 11.4113660 secs] [Times: user=11.41 sys=0.01, real=11.41 secs] Heap after GC invocations=151 (full 41): par new generation total 1747648K, used 2329K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 0% used [0x00000005fae00000, 0x00000005fb0464f8, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33690K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.4182970 seconds2016-09-06T16:06:17.149+0800: 777.820: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 6471330K(8039104K), 0.1632100 secs] [Times: user=0.16 sys=0.00, real=0.17 secs] Total time for which application threads were stopped: 0.1791820 seconds2016-09-06T16:06:17.315+0800: 777.986: [CMS-concurrent-mark-start]{Heap before GC invocations=151 (full 42): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff90, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33690K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:06:19.839+0800: 780.511: [Full GC 780.513: [CMS2016-09-06T16:06:20.483+0800: 781.154: [CMS-concurrent-mark: 2.995/3.168 secs] [Times: user=16.15 sys=0.65, real=3.17 secs] (concurrent mode failure): 6291455K-&gt;6291455K(6291456K), 12.5329990 secs] 8039103K-&gt;6345815K(8039104K), [CMS Perm : 33690K-&gt;33690K(56304K)], 12.5377430 secs] [Times: user=13.97 sys=0.01, real=12.54 secs] Heap after GC invocations=152 (full 43): par new generation total 1747648K, used 54359K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 3% used [0x00000005fae00000, 0x00000005fe315e08, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33690K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.5447070 seconds{Heap before GC invocations=152 (full 43): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33690K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:06:34.366+0800: 795.038: [Full GC 795.040: [CMS: 6291455K-&gt;6291455K(6291456K), 12.0214750 secs] 8039103K-&gt;6544662K(8039104K), [CMS Perm : 33690K-&gt;33690K(56304K)], 12.0259940 secs] [Times: user=12.03 sys=0.00, real=12.02 secs] Heap after GC invocations=153 (full 44): par new generation total 1747648K, used 253206K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 18% used [0x00000005fae00000, 0x000000060a545898, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33690K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.0334450 seconds2016-09-06T16:06:46.476+0800: 807.148: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 6618615K(8039104K), 0.2636610 secs] [Times: user=0.27 sys=0.00, real=0.26 secs] Total time for which application threads were stopped: 0.2769520 seconds2016-09-06T16:06:46.744+0800: 807.415: [CMS-concurrent-mark-start]Total time for which application threads were stopped: 0.0392660 seconds{Heap before GC invocations=153 (full 45): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33736K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:06:48.674+0800: 809.346: [Full GC 809.348: [CMS2016-09-06T16:06:49.384+0800: 810.055: [CMS-concurrent-mark: 2.373/2.640 secs] [Times: user=12.80 sys=0.62, real=2.64 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 12.9895510 secs] 8039103K-&gt;6778725K(8039104K), [CMS Perm : 33736K-&gt;33735K(56304K)], 12.9943380 secs] [Times: user=14.67 sys=0.01, real=13.00 secs] Heap after GC invocations=154 (full 46): par new generation total 1747648K, used 487269K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 34% used [0x00000005fae00000, 0x00000006189d9648, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33735K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.0012430 secondsTotal time for which application threads were stopped: 0.0057490 secondsTotal time for which application threads were stopped: 0.0055100 seconds2016-09-06T16:07:02.346+0800: 823.018: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 7759702K(8039104K), 0.7925750 secs] [Times: user=0.80 sys=0.00, real=0.80 secs] Total time for which application threads were stopped: 0.7994230 seconds2016-09-06T16:07:03.143+0800: 823.814: [CMS-concurrent-mark-start]Total time for which application threads were stopped: 0.0057100 seconds{Heap before GC invocations=154 (full 47): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affc8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33741K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:07:04.178+0800: 824.850: [Full GC 824.852: [CMS2016-09-06T16:07:05.322+0800: 825.993: [CMS-concurrent-mark: 1.999/2.179 secs] [Times: user=9.66 sys=0.26, real=2.18 secs] (concurrent mode failure): 6291455K-&gt;6291455K(6291456K), 13.6428400 secs] 8039103K-&gt;6968902K(8039104K), [CMS Perm : 33741K-&gt;33741K(56304K)], 13.6475410 secs] [Times: user=16.55 sys=0.03, real=13.64 secs] Heap after GC invocations=155 (full 48): par new generation total 1747648K, used 677446K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 48% used [0x00000005fae00000, 0x0000000624391bd0, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33741K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.6546570 secondsTotal time for which application threads were stopped: 0.0433720 seconds2016-09-06T16:07:18.902+0800: 839.574: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 7873261K(8039104K), 0.8705260 secs] [Times: user=0.87 sys=0.00, real=0.87 secs] Total time for which application threads were stopped: 0.8775370 seconds2016-09-06T16:07:19.777+0800: 840.448: [CMS-concurrent-mark-start]{Heap before GC invocations=155 (full 49): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33742K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:07:20.404+0800: 841.076: [Full GC 841.079: [CMS2016-09-06T16:07:21.820+0800: 842.491: [CMS-concurrent-mark: 1.862/2.043 secs] [Times: user=8.55 sys=0.18, real=2.04 secs] (concurrent mode failure): 6291455K-&gt;6291455K(6291456K), 14.1579180 secs] 8039103K-&gt;7164745K(8039104K), [CMS Perm : 33742K-&gt;33741K(56304K)], 14.1626140 secs] [Times: user=17.87 sys=0.02, real=14.16 secs] Heap after GC invocations=156 (full 50): par new generation total 1747648K, used 873289K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 62% used [0x00000005fae00000, 0x00000006302d25b8, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33741K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.1699530 seconds{Heap before GC invocations=156 (full 50): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33742K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:07:36.215+0800: 856.886: [Full GC 856.889: [CMS: 6291455K-&gt;6291455K(6291456K), 13.1938670 secs] 8039103K-&gt;7384424K(8039104K), [CMS Perm : 33742K-&gt;33742K(56304K)], 13.1986310 secs] [Times: user=13.20 sys=0.01, real=13.19 secs] Heap after GC invocations=157 (full 51): par new generation total 1747648K, used 1092968K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 78% used [0x00000005fae00000, 0x000000063d95a290, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33742K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.2057230 seconds2016-09-06T16:07:49.820+0800: 870.492: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 7738051K(8039104K), 0.8690880 secs] [Times: user=0.87 sys=0.00, real=0.87 secs] Total time for which application threads were stopped: 0.8761160 seconds2016-09-06T16:07:50.694+0800: 871.364: [CMS-concurrent-mark-start]{Heap before GC invocations=157 (full 52): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33742K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:07:51.856+0800: 872.527: [Full GC 872.530: [CMS2016-09-06T16:07:52.941+0800: 873.611: [CMS-concurrent-mark: 2.078/2.247 secs] [Times: user=10.20 sys=0.30, real=2.25 secs] (concurrent mode failure): 6291455K-&gt;6291456K(6291456K), 13.9609260 secs] 8039103K-&gt;7521347K(8039104K), [CMS Perm : 33742K-&gt;33742K(56304K)], 13.9653250 secs] [Times: user=16.71 sys=0.01, real=13.96 secs] Heap after GC invocations=158 (full 53): par new generation total 1747648K, used 1229891K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 87% used [0x00000005fae00000, 0x0000000645f10d38, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33742K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.9726250 secondsTotal time for which application threads were stopped: 0.0059340 seconds2016-09-06T16:08:06.525+0800: 887.197: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 7798732K(8039104K), 0.9128790 secs] [Times: user=0.91 sys=0.01, real=0.92 secs] Total time for which application threads were stopped: 0.9196720 seconds2016-09-06T16:08:07.442+0800: 888.113: [CMS-concurrent-mark-start]{Heap before GC invocations=158 (full 54): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:08:08.549+0800: 889.220: [Full GC 889.223: [CMS2016-09-06T16:08:09.726+0800: 890.397: [CMS-concurrent-mark: 2.102/2.284 secs] [Times: user=9.85 sys=0.26, real=2.28 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 14.7983580 secs] 8039103K-&gt;7625409K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.8031370 secs] [Times: user=17.50 sys=0.03, real=14.80 secs] Heap after GC invocations=159 (full 55): par new generation total 1747648K, used 1333953K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 95% used [0x00000005fae00000, 0x000000064c4b0450, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x0000000650360000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.8105610 seconds{Heap before GC invocations=159 (full 55): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff98, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:08:25.017+0800: 905.689: [Full GC 905.691: [CMS: 6291455K-&gt;6291455K(6291456K), 13.7639430 secs] 8039103K-&gt;7691514K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 13.7682700 secs] [Times: user=13.77 sys=0.01, real=13.77 secs] Heap after GC invocations=160 (full 56): par new generation total 1747648K, used 1400058K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 0% used [0x0000000650360000, 0x000000065053eba8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.7755730 seconds2016-09-06T16:08:39.046+0800: 919.717: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 7738662K(8039104K), 0.8869350 secs] [Times: user=0.89 sys=0.00, real=0.89 secs] Total time for which application threads were stopped: 0.8941340 seconds2016-09-06T16:08:39.937+0800: 920.608: [CMS-concurrent-mark-start]{Heap before GC invocations=160 (full 57): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:08:41.319+0800: 921.991: [Full GC 921.993: [CMS2016-09-06T16:08:42.284+0800: 922.954: [CMS-concurrent-mark: 2.170/2.346 secs] [Times: user=11.04 sys=0.28, real=2.35 secs] (concurrent mode failure): 6291455K-&gt;6291455K(6291456K), 14.6775610 secs] 8039103K-&gt;7763371K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.6817840 secs] [Times: user=17.05 sys=0.01, real=14.68 secs] Heap after GC invocations=161 (full 58): par new generation total 1747648K, used 1471915K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fe60, 0x0000000650360000) from space 349504K, 21% used [0x0000000650360000, 0x0000000654b6ae50, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.6891960 seconds{Heap before GC invocations=161 (full 58): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:08:57.344+0800: 938.016: [Full GC 938.018: [CMS: 6291456K-&gt;6291455K(6291456K), 13.9811300 secs] 8039104K-&gt;7825262K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 13.9853400 secs] [Times: user=13.96 sys=0.02, real=13.99 secs] Heap after GC invocations=162 (full 59): par new generation total 1747648K, used 1533807K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff38, 0x0000000650360000) from space 349504K, 38% used [0x0000000650360000, 0x00000006587dbce0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.9924550 seconds2016-09-06T16:09:11.559+0800: 952.231: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 7876297K(8039104K), 0.9691090 secs] [Times: user=0.97 sys=0.00, real=0.97 secs] Total time for which application threads were stopped: 0.9760560 seconds2016-09-06T16:09:12.533+0800: 953.203: [CMS-concurrent-mark-start]{Heap before GC invocations=162 (full 60): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:09:13.148+0800: 953.820: [Full GC 953.822: [CMS2016-09-06T16:09:14.615+0800: 955.286: [CMS-concurrent-mark: 1.888/2.082 secs] [Times: user=8.37 sys=0.10, real=2.08 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 15.3630670 secs] 8039104K-&gt;7854800K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 15.3672900 secs] [Times: user=18.89 sys=0.02, real=15.36 secs] Heap after GC invocations=163 (full 61): par new generation total 1747648K, used 1563344K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe0, 0x0000000650360000) from space 349504K, 47% used [0x0000000650360000, 0x000000065a4b4070, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.3745030 seconds{Heap before GC invocations=163 (full 61): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:09:29.372+0800: 970.043: [Full GC 970.045: [CMS: 6291456K-&gt;6291455K(6291456K), 14.1337350 secs] 8039103K-&gt;7874614K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.1379750 secs] [Times: user=14.15 sys=0.00, real=14.13 secs] Heap after GC invocations=164 (full 62): par new generation total 1747648K, used 1583158K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 52% used [0x0000000650360000, 0x000000065b80d828, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.1451990 seconds2016-09-06T16:09:43.576+0800: 984.248: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 7886395K(8039104K), 0.9679850 secs] [Times: user=0.97 sys=0.00, real=0.97 secs] Total time for which application threads were stopped: 0.9750250 seconds2016-09-06T16:09:44.548+0800: 985.219: [CMS-concurrent-mark-start]{Heap before GC invocations=164 (full 63): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:09:45.246+0800: 985.918: [Full GC 985.920: [CMS2016-09-06T16:09:46.602+0800: 987.273: [CMS-concurrent-mark: 1.868/2.054 secs] [Times: user=8.44 sys=0.09, real=2.06 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 15.4251140 secs] 8039104K-&gt;7886696K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 15.4293320 secs] [Times: user=18.75 sys=0.01, real=15.43 secs] Heap after GC invocations=165 (full 64): par new generation total 1747648K, used 1595240K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fea0, 0x0000000650360000) from space 349504K, 56% used [0x0000000650360000, 0x000000065c3da410, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.4366440 seconds{Heap before GC invocations=165 (full 64): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:10:01.486+0800: 1002.158: [Full GC 1002.160: [CMS: 6291456K-&gt;6291455K(6291456K), 14.2465520 secs] 8039104K-&gt;7915535K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.2507640 secs] [Times: user=14.25 sys=0.01, real=14.25 secs] Heap after GC invocations=166 (full 65): par new generation total 1747648K, used 1624079K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe0, 0x0000000650360000) from space 349504K, 64% used [0x0000000650360000, 0x000000065e003cd0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.2578290 seconds2016-09-06T16:10:15.744+0800: 1016.415: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 7915535K(8039104K), 0.9897810 secs] [Times: user=0.99 sys=0.00, real=0.99 secs] Total time for which application threads were stopped: 0.9958960 seconds2016-09-06T16:10:16.738+0800: 1017.408: [CMS-concurrent-mark-start]{Heap before GC invocations=166 (full 66): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:10:17.213+0800: 1017.885: [Full GC 1017.887: [CMS2016-09-06T16:10:18.728+0800: 1019.398: [CMS-concurrent-mark: 1.808/1.990 secs] [Times: user=8.14 sys=0.09, real=2.00 secs] (concurrent mode failure): 6291455K-&gt;6291438K(6291456K), 15.5859630 secs] 8039103K-&gt;7942947K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 15.5901690 secs] [Times: user=19.61 sys=0.01, real=15.59 secs] Heap after GC invocations=167 (full 67): par new generation total 1747648K, used 1651508K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 72% used [0x0000000650360000, 0x000000065facd0e0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291438K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.5975830 seconds{Heap before GC invocations=167 (full 67): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:10:33.286+0800: 1033.958: [Full GC 1033.960: [CMS: 6291456K-&gt;6291455K(6291456K), 14.2288290 secs] 8039103K-&gt;7944399K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.2330240 secs] [Times: user=14.24 sys=0.01, real=14.23 secs] Heap after GC invocations=168 (full 68): par new generation total 1747648K, used 1652943K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 72% used [0x0000000650360000, 0x000000065fc33f60, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.2401940 seconds2016-09-06T16:10:47.561+0800: 1048.233: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 7951290K(8039104K), 1.0198410 secs] [Times: user=1.02 sys=0.00, real=1.03 secs] Total time for which application threads were stopped: 1.0270770 seconds2016-09-06T16:10:48.585+0800: 1049.256: [CMS-concurrent-mark-start]{Heap before GC invocations=168 (full 69): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:10:49.022+0800: 1049.693: [Full GC 1049.695: [CMS2016-09-06T16:10:50.536+0800: 1051.207: [CMS-concurrent-mark: 1.769/1.951 secs] [Times: user=7.92 sys=0.06, real=1.95 secs] (concurrent mode failure): 6291455K-&gt;6291451K(6291456K), 15.8708250 secs] 8039103K-&gt;7941653K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 15.8750420 secs] [Times: user=19.88 sys=0.02, real=15.87 secs] Heap after GC invocations=169 (full 70): par new generation total 1747648K, used 1650201K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fe08, 0x0000000650360000) from space 349504K, 72% used [0x0000000650360000, 0x000000065f9868b8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291451K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.8823550 seconds{Heap before GC invocations=169 (full 70): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:11:05.441+0800: 1066.113: [Full GC 1066.115: [CMS: 6291456K-&gt;6291456K(6291456K), 14.2127400 secs] 8039104K-&gt;7950787K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.2169180 secs] [Times: user=14.23 sys=0.01, real=14.22 secs] Heap after GC invocations=170 (full 71): par new generation total 1747648K, used 1659331K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffa0, 0x0000000650360000) from space 349504K, 74% used [0x0000000650360000, 0x0000000660271000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.2240340 seconds2016-09-06T16:11:19.834+0800: 1080.506: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 7982258K(8039104K), 1.0410110 secs] [Times: user=1.04 sys=0.00, real=1.04 secs] Total time for which application threads were stopped: 1.0480760 seconds2016-09-06T16:11:20.879+0800: 1081.550: [CMS-concurrent-mark-start]{Heap before GC invocations=170 (full 72): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:11:21.185+0800: 1081.857: [Full GC 1081.859: [CMS2016-09-06T16:11:22.774+0800: 1083.445: [CMS-concurrent-mark: 1.713/1.895 secs] [Times: user=7.43 sys=0.05, real=1.89 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 15.7086040 secs] 8039104K-&gt;7939069K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 15.7127900 secs] [Times: user=19.94 sys=0.00, real=15.71 secs] Heap after GC invocations=171 (full 73): par new generation total 1747648K, used 1647613K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 71% used [0x0000000650360000, 0x000000065f6ff6c0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.7202050 seconds{Heap before GC invocations=171 (full 73): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:11:37.436+0800: 1098.108: [Full GC 1098.110: [CMS: 6291456K-&gt;6291455K(6291456K), 14.2856410 secs] 8039104K-&gt;7945349K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.6436480 secs] [Times: user=14.30 sys=0.00, real=14.64 secs] Heap after GC invocations=172 (full 74): par new generation total 1747648K, used 1653893K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe8, 0x0000000650360000) from space 349504K, 73% used [0x0000000650360000, 0x000000065fd21518, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.6510190 seconds2016-09-06T16:11:52.161+0800: 1112.833: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 7959251K(8039104K), 1.0334830 secs] [Times: user=1.04 sys=0.00, real=1.03 secs] Total time for which application threads were stopped: 1.0405380 seconds2016-09-06T16:11:53.199+0800: 1113.870: [CMS-concurrent-mark-start]{Heap before GC invocations=172 (full 75): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:11:53.626+0800: 1114.297: [Full GC 1114.299: [CMS2016-09-06T16:11:55.418+0800: 1116.089: [CMS-concurrent-mark: 2.034/2.218 secs] [Times: user=7.73 sys=0.06, real=2.22 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 16.0219430 secs] 8039104K-&gt;7951837K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 16.0260770 secs] [Times: user=19.67 sys=0.01, real=16.02 secs] Heap after GC invocations=173 (full 76): par new generation total 1747648K, used 1660381K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff28, 0x0000000650360000) from space 349504K, 75% used [0x0000000650360000, 0x00000006603777f8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.0334350 seconds{Heap before GC invocations=173 (full 76): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:12:10.141+0800: 1130.813: [Full GC 1130.815: [CMS: 6291456K-&gt;6291451K(6291456K), 14.3210730 secs] 8039104K-&gt;7981589K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.3252380 secs] [Times: user=14.32 sys=0.00, real=14.33 secs] Heap after GC invocations=174 (full 77): par new generation total 1747648K, used 1690138K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffd0, 0x0000000650360000) from space 349504K, 83% used [0x0000000650360000, 0x0000000662086b40, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291451K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.3326260 seconds2016-09-06T16:12:24.523+0800: 1145.194: [GC [1 CMS-initial-mark: 6291451K(6291456K)] 7990266K(8039104K), 1.0543170 secs] [Times: user=1.05 sys=0.00, real=1.06 secs] Total time for which application threads were stopped: 1.0605090 seconds2016-09-06T16:12:25.581+0800: 1146.252: [CMS-concurrent-mark-start]{Heap before GC invocations=174 (full 78): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:12:25.855+0800: 1146.527: [Full GC 1146.529: [CMS2016-09-06T16:12:27.528+0800: 1148.199: [CMS-concurrent-mark: 1.768/1.948 secs] [Times: user=7.45 sys=0.08, real=1.95 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 15.5857150 secs] 8039103K-&gt;8000732K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 15.5899810 secs] [Times: user=20.00 sys=0.01, real=15.59 secs] Heap after GC invocations=175 (full 79): par new generation total 1747648K, used 1709276K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffa0, 0x0000000650360000) from space 349504K, 89% used [0x0000000650360000, 0x00000006633372c0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.5966410 seconds{Heap before GC invocations=175 (full 79): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:12:41.639+0800: 1162.311: [Full GC 1162.313: [CMS: 6291456K-&gt;6291456K(6291456K), 14.4373180 secs] 8039104K-&gt;7998503K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.4415230 secs] [Times: user=14.45 sys=0.00, real=14.45 secs] Heap after GC invocations=176 (full 80): par new generation total 1747648K, used 1707047K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff78, 0x0000000650360000) from space 349504K, 88% used [0x0000000650360000, 0x000000066310a078, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.4488440 seconds2016-09-06T16:12:56.134+0800: 1176.806: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8010472K(8039104K), 1.0731920 secs] [Times: user=1.08 sys=0.01, real=1.07 secs] Total time for which application threads were stopped: 1.0802900 seconds2016-09-06T16:12:57.212+0800: 1177.883: [CMS-concurrent-mark-start]{Heap before GC invocations=176 (full 81): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:12:57.337+0800: 1178.008: [Full GC 1178.010: [CMS2016-09-06T16:12:59.067+0800: 1179.738: [CMS-concurrent-mark: 1.672/1.855 secs] [Times: user=7.03 sys=0.02, real=1.86 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 16.0299660 secs] 8039104K-&gt;7989659K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 16.0340880 secs] [Times: user=20.69 sys=0.02, real=16.03 secs] Heap after GC invocations=177 (full 82): par new generation total 1747648K, used 1698203K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffc0, 0x0000000650360000) from space 349504K, 85% used [0x0000000650360000, 0x0000000662866ff0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.0414370 seconds{Heap before GC invocations=177 (full 82): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:13:13.615+0800: 1194.287: [Full GC 1194.289: [CMS: 6291456K-&gt;6291456K(6291456K), 14.3944980 secs] 8039103K-&gt;7996627K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.3986650 secs] [Times: user=14.41 sys=0.00, real=14.39 secs] Heap after GC invocations=178 (full 83): par new generation total 1747648K, used 1705171K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffd8, 0x0000000650360000) from space 349504K, 87% used [0x0000000650360000, 0x0000000662f34d08, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.4061730 seconds2016-09-06T16:13:28.068+0800: 1208.740: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8005501K(8039104K), 1.0668510 secs] [Times: user=1.07 sys=0.00, real=1.06 secs] Total time for which application threads were stopped: 1.0739200 seconds2016-09-06T16:13:29.139+0800: 1209.810: [CMS-concurrent-mark-start]{Heap before GC invocations=178 (full 84): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:13:29.308+0800: 1209.979: [Full GC 1209.981: [CMS2016-09-06T16:13:31.011+0800: 1211.681: [CMS-concurrent-mark: 1.689/1.871 secs] [Times: user=7.11 sys=0.05, real=1.87 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 16.0288370 secs] 8039103K-&gt;7995494K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 16.0329990 secs] [Times: user=20.62 sys=0.01, real=16.03 secs] Heap after GC invocations=179 (full 85): par new generation total 1747648K, used 1704038K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffd0, 0x0000000650360000) from space 349504K, 87% used [0x0000000650360000, 0x0000000662e19a60, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.0404070 seconds{Heap before GC invocations=179 (full 85): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:13:45.557+0800: 1226.229: [Full GC 1226.231: [CMS: 6291456K-&gt;6291455K(6291456K), 14.5141200 secs] 8039103K-&gt;7997282K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.5182930 secs] [Times: user=14.53 sys=0.00, real=14.52 secs] Heap after GC invocations=180 (full 86): par new generation total 1747648K, used 1705826K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 88% used [0x0000000650360000, 0x0000000662fd8b90, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.5257610 seconds2016-09-06T16:14:00.110+0800: 1240.782: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8003510K(8039104K), 1.0710330 secs] [Times: user=1.07 sys=0.00, real=1.08 secs] Total time for which application threads were stopped: 1.0780630 seconds2016-09-06T16:14:01.186+0800: 1241.856: [CMS-concurrent-mark-start]{Heap before GC invocations=180 (full 87): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:14:01.337+0800: 1242.008: [Full GC 1242.010: [CMS2016-09-06T16:14:03.071+0800: 1243.742: [CMS-concurrent-mark: 1.705/1.886 secs] [Times: user=7.18 sys=0.03, real=1.89 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 16.0573920 secs] 8039104K-&gt;8003119K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 16.0615490 secs] [Times: user=20.70 sys=0.01, real=16.06 secs] Heap after GC invocations=181 (full 88): par new generation total 1747648K, used 1711663K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 89% used [0x0000000650360000, 0x000000066358be60, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.0691490 seconds{Heap before GC invocations=181 (full 88): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:14:17.566+0800: 1258.237: [Full GC 1258.239: [CMS: 6291456K-&gt;6291455K(6291456K), 14.4421800 secs] 8039104K-&gt;8012612K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.4463300 secs] [Times: user=14.46 sys=0.01, real=14.44 secs] Heap after GC invocations=182 (full 89): par new generation total 1747648K, used 1721156K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 92% used [0x0000000650360000, 0x0000000663ed1360, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.4537470 seconds2016-09-06T16:14:32.087+0800: 1272.758: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8030133K(8039104K), 1.0918620 secs] [Times: user=1.09 sys=0.00, real=1.09 secs] Total time for which application threads were stopped: 1.0989370 seconds2016-09-06T16:14:33.183+0800: 1273.854: [CMS-concurrent-mark-start]{Heap before GC invocations=182 (full 90): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:14:33.230+0800: 1273.902: [Full GC 1273.904: [CMS2016-09-06T16:14:35.000+0800: 1275.671: [CMS-concurrent-mark: 1.635/1.817 secs] [Times: user=6.75 sys=0.01, real=1.82 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 16.0599450 secs] 8039104K-&gt;8017480K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 16.0640560 secs] [Times: user=20.83 sys=0.01, real=16.06 secs] Heap after GC invocations=183 (full 91): par new generation total 1747648K, used 1726024K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff90, 0x0000000650360000) from space 349504K, 93% used [0x0000000650360000, 0x00000006643921e8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.0713720 seconds{Heap before GC invocations=183 (full 91): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:14:49.389+0800: 1290.060: [Full GC 1290.062: [CMS: 6291455K-&gt;6291455K(6291456K), 14.4181530 secs] 8039103K-&gt;8015301K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.4223600 secs] [Times: user=14.42 sys=0.01, real=14.42 secs] Heap after GC invocations=184 (full 92): par new generation total 1747648K, used 1723845K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 93% used [0x0000000650360000, 0x0000000664171708, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.4297330 seconds2016-09-06T16:15:03.825+0800: 1304.496: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8016795K(8039104K), 1.0775240 secs] [Times: user=1.08 sys=0.00, real=1.08 secs] Total time for which application threads were stopped: 1.0844230 seconds2016-09-06T16:15:04.907+0800: 1305.578: [CMS-concurrent-mark-start]{Heap before GC invocations=184 (full 93): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:15:05.007+0800: 1305.678: [Full GC 1305.680: [CMS2016-09-06T16:15:06.745+0800: 1307.416: [CMS-concurrent-mark: 1.656/1.838 secs] [Times: user=6.93 sys=0.02, real=1.84 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 16.1602030 secs] 8039103K-&gt;8011700K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 16.1643190 secs] [Times: user=20.85 sys=0.01, real=16.16 secs] Heap after GC invocations=185 (full 94): par new generation total 1747648K, used 1720244K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 92% used [0x0000000650360000, 0x0000000663ded2c8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.1717880 seconds{Heap before GC invocations=185 (full 94): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:15:21.300+0800: 1321.972: [Full GC 1321.974: [CMS: 6291456K-&gt;6291455K(6291456K), 14.5271590 secs] 8039103K-&gt;8015236K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.5313370 secs] [Times: user=14.54 sys=0.01, real=14.53 secs] Heap after GC invocations=186 (full 95): par new generation total 1747648K, used 1723780K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 93% used [0x0000000650360000, 0x0000000664161110, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.5387770 seconds{Heap before GC invocations=186 (full 95): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:15:35.934+0800: 1336.605: [Full GC 1336.607: [CMS: 6291456K-&gt;6291455K(6291456K), 14.5084140 secs] 8039104K-&gt;8022666K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.5125290 secs] [Times: user=14.52 sys=0.01, real=14.51 secs] Heap after GC invocations=187 (full 96): par new generation total 1747648K, used 1731210K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 95% used [0x0000000650360000, 0x00000006648a2ab8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.5199530 seconds2016-09-06T16:15:50.457+0800: 1351.128: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8023277K(8039104K), 1.0897120 secs] [Times: user=1.09 sys=0.00, real=1.09 secs] Total time for which application threads were stopped: 1.0960600 seconds2016-09-06T16:15:51.551+0800: 1352.221: [CMS-concurrent-mark-start]{Heap before GC invocations=187 (full 97): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:15:51.622+0800: 1352.294: [Full GC 1352.296: [CMS2016-09-06T16:15:53.395+0800: 1354.066: [CMS-concurrent-mark: 1.663/1.844 secs] [Times: user=6.90 sys=0.02, real=1.84 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 16.0314990 secs] 8039103K-&gt;8026554K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 16.0356150 secs] [Times: user=20.80 sys=0.01, real=16.03 secs] Heap after GC invocations=188 (full 98): par new generation total 1747648K, used 1735098K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 96% used [0x0000000650360000, 0x0000000664c6ea20, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.0428820 seconds{Heap before GC invocations=188 (full 98): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff70, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:16:07.734+0800: 1368.405: [Full GC 1368.407: [CMS: 6291455K-&gt;6291455K(6291456K), 14.3710870 secs] 8039103K-&gt;8030594K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.3752240 secs] [Times: user=14.38 sys=0.01, real=14.37 secs] Heap after GC invocations=189 (full 99): par new generation total 1747648K, used 1739138K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 97% used [0x0000000650360000, 0x0000000665060b80, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.3824400 seconds2016-09-06T16:16:22.129+0800: 1382.801: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8032937K(8039104K), 1.0927650 secs] [Times: user=1.09 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.0992820 seconds2016-09-06T16:16:23.226+0800: 1383.897: [CMS-concurrent-mark-start]{Heap before GC invocations=189 (full 100): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:16:23.269+0800: 1383.940: [Full GC 1383.942: [CMS2016-09-06T16:16:25.059+0800: 1385.730: [CMS-concurrent-mark: 1.650/1.833 secs] [Times: user=6.80 sys=0.02, real=1.83 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 16.2996390 secs] 8039104K-&gt;8029608K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 16.3037500 secs] [Times: user=21.15 sys=0.02, real=16.30 secs] Heap after GC invocations=190 (full 101): par new generation total 1747648K, used 1738152K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffc0, 0x0000000650360000) from space 349504K, 97% used [0x0000000650360000, 0x0000000664f6a2d0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.3110700 seconds{Heap before GC invocations=190 (full 101): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff98, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:16:39.631+0800: 1400.303: [Full GC 1400.305: [CMS: 6291456K-&gt;6291456K(6291456K), 14.5660950 secs] 8039103K-&gt;8025111K(8039104K), [CMS Perm : 33753K-&gt;33753K(56304K)], 14.5702780 secs] [Times: user=14.57 sys=0.00, real=14.57 secs] Heap after GC invocations=191 (full 102): par new generation total 1747648K, used 1733655K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff10, 0x0000000650360000) from space 349504K, 95% used [0x0000000650360000, 0x0000000664b060c8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33753K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.5774730 seconds2016-09-06T16:16:54.211+0800: 1414.883: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8025641K(8039104K), 1.0890180 secs] [Times: user=1.09 sys=0.01, real=1.09 secs] Total time for which application threads were stopped: 1.0954230 seconds2016-09-06T16:16:55.304+0800: 1415.975: [CMS-concurrent-mark-start]{Heap before GC invocations=191 (full 103): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afe78, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:16:55.373+0800: 1416.045: [Full GC 1416.047: [CMS2016-09-06T16:16:57.172+0800: 1417.842: [CMS-concurrent-mark: 1.686/1.867 secs] [Times: user=6.98 sys=0.01, real=1.87 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 15.7311930 secs] 8039103K-&gt;8029219K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 15.7350580 secs] [Times: user=20.56 sys=0.00, real=15.73 secs] Heap after GC invocations=192 (full 104): par new generation total 1747648K, used 1737763K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 97% used [0x0000000650360000, 0x0000000664f08c98, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.7421900 seconds{Heap before GC invocations=192 (full 104): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:17:11.172+0800: 1431.844: [Full GC 1431.845: [CMS: 6291456K-&gt;6291455K(6291456K), 13.8414700 secs] 8039104K-&gt;8028453K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 13.8452040 secs] [Times: user=13.85 sys=0.00, real=13.84 secs] Heap after GC invocations=193 (full 105): par new generation total 1747648K, used 1736997K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fee8, 0x0000000650360000) from space 349504K, 96% used [0x0000000650360000, 0x0000000664e497c8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.8518610 seconds{Heap before GC invocations=193 (full 105): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:17:25.088+0800: 1445.759: [Full GC 1445.761: [CMS: 6291456K-&gt;6291455K(6291456K), 13.8532080 secs] 8039104K-&gt;8028301K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 13.8568860 secs] [Times: user=13.85 sys=0.00, real=13.86 secs] Heap after GC invocations=194 (full 106): par new generation total 1747648K, used 1736845K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fe20, 0x0000000650360000) from space 349504K, 96% used [0x0000000650360000, 0x0000000664e239d8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.8633130 seconds2016-09-06T16:17:38.964+0800: 1459.636: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8030859K(8039104K), 1.0608010 secs] [Times: user=1.06 sys=0.00, real=1.07 secs] Total time for which application threads were stopped: 1.0669680 seconds2016-09-06T16:17:40.029+0800: 1460.700: [CMS-concurrent-mark-start]{Heap before GC invocations=194 (full 107): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:17:40.094+0800: 1460.765: [Full GC 1460.767: [CMS2016-09-06T16:17:41.857+0800: 1462.528: [CMS-concurrent-mark: 1.652/1.828 secs] [Times: user=6.82 sys=0.02, real=1.83 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 16.2089490 secs] 8039104K-&gt;8028843K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 16.2128900 secs] [Times: user=21.02 sys=0.00, real=16.22 secs] Heap after GC invocations=195 (full 108): par new generation total 1747648K, used 1737387K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 97% used [0x0000000650360000, 0x0000000664eaac98, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.2195840 seconds{Heap before GC invocations=195 (full 108): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:17:56.389+0800: 1477.060: [Full GC 1477.062: [CMS: 6291456K-&gt;6291455K(6291456K), 14.5029450 secs] 8039103K-&gt;8030584K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 14.5070400 secs] [Times: user=14.51 sys=0.00, real=14.50 secs] Heap after GC invocations=196 (full 109): par new generation total 1747648K, used 1739129K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffb8, 0x0000000650360000) from space 349504K, 97% used [0x0000000650360000, 0x000000066505e468, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.5141900 seconds2016-09-06T16:18:10.906+0800: 1491.577: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8031021K(8039104K), 1.0686070 secs] [Times: user=1.07 sys=0.00, real=1.07 secs] Total time for which application threads were stopped: 1.0746330 seconds2016-09-06T16:18:11.978+0800: 1492.648: [CMS-concurrent-mark-start]{Heap before GC invocations=196 (full 110): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:18:12.035+0800: 1492.707: [Full GC 1492.709: [CMS2016-09-06T16:18:13.804+0800: 1494.474: [CMS-concurrent-mark: 1.657/1.826 secs] [Times: user=6.87 sys=0.02, real=1.83 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 15.5360950 secs] 8039103K-&gt;8030518K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 15.5398010 secs] [Times: user=20.35 sys=0.01, real=15.54 secs] Heap after GC invocations=197 (full 111): par new generation total 1747648K, used 1739062K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffa8, 0x0000000650360000) from space 349504K, 97% used [0x0000000650360000, 0x000000066504dc50, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.5461680 seconds{Heap before GC invocations=197 (full 111): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:18:27.638+0800: 1508.309: [Full GC 1508.311: [CMS: 6291456K-&gt;6291455K(6291456K), 13.1216060 secs] 8039103K-&gt;8031448K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 13.1255780 secs] [Times: user=13.13 sys=0.00, real=13.13 secs] Heap after GC invocations=198 (full 112): par new generation total 1747648K, used 1739992K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 97% used [0x0000000650360000, 0x00000006651363b8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.1321000 seconds2016-09-06T16:18:40.799+0800: 1521.470: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8036900K(8039104K), 1.0952860 secs] [Times: user=1.09 sys=0.01, real=1.10 secs] Total time for which application threads were stopped: 1.1017940 seconds2016-09-06T16:18:41.898+0800: 1522.569: [CMS-concurrent-mark-start]{Heap before GC invocations=198 (full 113): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:18:41.929+0800: 1522.601: [Full GC 1522.603: [CMS2016-09-06T16:18:43.730+0800: 1524.401: [CMS-concurrent-mark: 1.656/1.832 secs] [Times: user=6.74 sys=0.02, real=1.83 secs] (concurrent mode failure): 6291456K-&gt;6291444K(6291456K), 15.7033870 secs] 8039104K-&gt;8032358K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 15.7074780 secs] [Times: user=20.59 sys=0.01, real=15.71 secs] Heap after GC invocations=199 (full 114): par new generation total 1747648K, used 1740914K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff78, 0x0000000650360000) from space 349504K, 98% used [0x0000000650360000, 0x000000066521ca48, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291444K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.7143200 seconds{Heap before GC invocations=199 (full 114): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:18:57.682+0800: 1538.353: [Full GC 1538.355: [CMS: 6291456K-&gt;6291454K(6291456K), 14.3655090 secs] 8039104K-&gt;8033486K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 14.3696120 secs] [Times: user=14.38 sys=0.01, real=14.37 secs] Heap after GC invocations=200 (full 115): par new generation total 1747648K, used 1742032K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 98% used [0x0000000650360000, 0x0000000665334270, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291454K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.3766620 seconds2016-09-06T16:19:12.081+0800: 1552.752: [GC [1 CMS-initial-mark: 6291454K(6291456K)] 8037423K(8039104K), 1.0955560 secs] [Times: user=1.10 sys=0.00, real=1.09 secs] Total time for which application threads were stopped: 1.1021040 seconds2016-09-06T16:19:13.180+0800: 1553.851: [CMS-concurrent-mark-start]{Heap before GC invocations=200 (full 116): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:19:13.193+0800: 1553.865: [Full GC 1553.867: [CMS2016-09-06T16:19:14.991+0800: 1555.661: [CMS-concurrent-mark: 1.636/1.810 secs] [Times: user=6.72 sys=0.01, real=1.81 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 16.1243860 secs] 8039103K-&gt;8033415K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 16.1284850 secs] [Times: user=21.01 sys=0.01, real=16.13 secs] Heap after GC invocations=201 (full 117): par new generation total 1747648K, used 1741959K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe0, 0x0000000650360000) from space 349504K, 98% used [0x0000000650360000, 0x0000000665321f78, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.1353450 seconds{Heap before GC invocations=201 (full 117): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:19:29.360+0800: 1570.031: [Full GC 1570.033: [CMS: 6291456K-&gt;6291455K(6291456K), 14.5409370 secs] 8039104K-&gt;8034354K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 14.5450500 secs] [Times: user=14.55 sys=0.01, real=14.55 secs] Heap after GC invocations=202 (full 118): par new generation total 1747648K, used 1742898K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 98% used [0x0000000650360000, 0x000000066540cba8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.5522080 seconds2016-09-06T16:19:43.918+0800: 1584.589: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8035416K(8039104K), 1.0982160 secs] [Times: user=1.10 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1045960 seconds2016-09-06T16:19:45.020+0800: 1585.691: [CMS-concurrent-mark-start]{Heap before GC invocations=202 (full 119): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff98, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:19:45.048+0800: 1585.720: [Full GC 1585.722: [CMS2016-09-06T16:19:46.839+0800: 1587.510: [CMS-concurrent-mark: 1.644/1.819 secs] [Times: user=6.78 sys=0.01, real=1.82 secs] (concurrent mode failure): 6291455K-&gt;6291455K(6291456K), 15.3049390 secs] 8039103K-&gt;8035433K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 15.3090310 secs] [Times: user=20.18 sys=0.00, real=15.31 secs] Heap after GC invocations=203 (full 120): par new generation total 1747648K, used 1743978K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe8, 0x0000000650360000) from space 349504K, 98% used [0x0000000650360000, 0x000000066551a850, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.3163510 seconds{Heap before GC invocations=203 (full 120): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:20:00.383+0800: 1601.054: [Full GC 1601.056: [CMS: 6291455K-&gt;6291455K(6291456K), 14.5759610 secs] 8039103K-&gt;8036140K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 14.5800670 secs] [Times: user=14.59 sys=0.01, real=14.58 secs] Heap after GC invocations=204 (full 121): par new generation total 1747648K, used 1744684K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006655cb208, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.5871770 seconds2016-09-06T16:20:14.993+0800: 1615.665: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8039103K(8039104K), 1.1009350 secs] [Times: user=1.10 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1146400 seconds2016-09-06T16:20:16.098+0800: 1616.769: [CMS-concurrent-mark-start]{Heap before GC invocations=204 (full 122): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:20:16.102+0800: 1616.774: [Full GC 1616.775: [CMS2016-09-06T16:20:17.959+0800: 1618.630: [CMS-concurrent-mark: 1.686/1.861 secs] [Times: user=6.72 sys=0.00, real=1.87 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 16.3389800 secs] 8039103K-&gt;8036549K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 16.3430330 secs] [Times: user=21.21 sys=0.01, real=16.34 secs] Heap after GC invocations=205 (full 123): par new generation total 1747648K, used 1745093K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffa8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665631580, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.3490590 seconds{Heap before GC invocations=205 (full 123): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affc0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:20:32.466+0800: 1633.137: [Full GC 1633.139: [CMS: 6291455K-&gt;6291455K(6291456K), 14.3787100 secs] 8039103K-&gt;8036828K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 14.3827850 secs] [Times: user=14.38 sys=0.01, real=14.38 secs] Heap after GC invocations=206 (full 124): par new generation total 1747648K, used 1745372K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffc8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665677190, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.3896600 seconds2016-09-06T16:20:46.864+0800: 1647.536: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8038455K(8039104K), 1.1000260 secs] [Times: user=1.10 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1064120 seconds2016-09-06T16:20:47.969+0800: 1648.640: [CMS-concurrent-mark-start]{Heap before GC invocations=206 (full 125): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:20:47.981+0800: 1648.652: [Full GC 1648.654: [CMS2016-09-06T16:20:49.918+0800: 1650.589: [CMS-concurrent-mark: 1.774/1.949 secs] [Times: user=6.73 sys=0.00, real=1.95 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 16.3159430 secs] 8039104K-&gt;8037131K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 16.3200060 secs] [Times: user=21.09 sys=0.01, real=16.32 secs] Heap after GC invocations=207 (full 126): par new generation total 1747648K, used 1745675K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006656c2d48, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.3266260 seconds{Heap before GC invocations=207 (full 126): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:21:04.320+0800: 1664.991: [Full GC 1664.993: [CMS: 6291455K-&gt;6291455K(6291456K), 14.3891640 secs] 8039103K-&gt;8037586K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 14.3932090 secs] [Times: user=14.40 sys=0.01, real=14.39 secs] Heap after GC invocations=208 (full 127): par new generation total 1747648K, used 1746130K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665734a70, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.3997120 seconds2016-09-06T16:21:18.723+0800: 1679.395: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8038286K(8039104K), 1.0998800 secs] [Times: user=1.10 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1061700 seconds2016-09-06T16:21:19.828+0800: 1680.498: [CMS-concurrent-mark-start]{Heap before GC invocations=208 (full 128): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affb8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:21:19.834+0800: 1680.505: [Full GC 1680.507: [CMS2016-09-06T16:21:21.637+0800: 1682.308: [CMS-concurrent-mark: 1.641/1.809 secs] [Times: user=6.73 sys=0.01, real=1.81 secs] (concurrent mode failure): 6291455K-&gt;6291455K(6291456K), 15.6815020 secs] 8039103K-&gt;8036410K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 15.6852180 secs] [Times: user=20.59 sys=0.01, real=15.68 secs] Heap after GC invocations=209 (full 129): par new generation total 1747648K, used 1744954K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffa0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066560e9a8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.6915400 seconds{Heap before GC invocations=209 (full 129): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:21:35.540+0800: 1696.212: [Full GC 1696.213: [CMS: 6291456K-&gt;6291455K(6291456K), 13.8174260 secs] 8039104K-&gt;8036748K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 13.8211620 secs] [Times: user=13.83 sys=0.00, real=13.82 secs] Heap after GC invocations=210 (full 130): par new generation total 1747648K, used 1745292K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006656632f0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.8272610 seconds2016-09-06T16:21:49.372+0800: 1710.044: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8037719K(8039104K), 1.0602950 secs] [Times: user=1.06 sys=0.00, real=1.07 secs] Total time for which application threads were stopped: 1.0660360 seconds2016-09-06T16:21:50.436+0800: 1711.107: [CMS-concurrent-mark-start]{Heap before GC invocations=210 (full 131): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:21:50.448+0800: 1711.119: [Full GC 1711.121: [CMS2016-09-06T16:21:52.235+0800: 1712.905: [CMS-concurrent-mark: 1.630/1.798 secs] [Times: user=6.65 sys=0.01, real=1.80 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 15.5548750 secs] 8039103K-&gt;8034511K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 15.5585850 secs] [Times: user=20.38 sys=0.01, real=15.56 secs] Heap after GC invocations=211 (full 132): par new generation total 1747648K, used 1743055K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff88, 0x0000000650360000) from space 349504K, 98% used [0x0000000650360000, 0x0000000665433ff0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.5647500 seconds{Heap before GC invocations=211 (full 132): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:22:06.037+0800: 1726.709: [Full GC 1726.710: [CMS: 6291456K-&gt;6291455K(6291456K), 13.6373440 secs] 8039103K-&gt;8034459K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 13.6410720 secs] [Times: user=13.64 sys=0.00, real=13.64 secs] Heap after GC invocations=212 (full 133): par new generation total 1747648K, used 1743003K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fba0, 0x0000000650360000) from space 349504K, 98% used [0x0000000650360000, 0x0000000665427180, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.6473050 seconds{Heap before GC invocations=212 (full 133): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:22:19.710+0800: 1740.382: [Full GC 1740.384: [CMS: 6291456K-&gt;6291455K(6291456K), 13.6846350 secs] 8039104K-&gt;8034359K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 13.6883830 secs] [Times: user=13.70 sys=0.00, real=13.69 secs] Heap after GC invocations=213 (full 134): par new generation total 1747648K, used 1742903K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe8, 0x0000000650360000) from space 349504K, 98% used [0x0000000650360000, 0x000000066540dd00, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.6946250 seconds2016-09-06T16:22:33.406+0800: 1754.077: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8034536K(8039104K), 1.0581160 secs] [Times: user=1.06 sys=0.00, real=1.06 secs] Total time for which application threads were stopped: 1.0637650 seconds2016-09-06T16:22:34.468+0800: 1755.138: [CMS-concurrent-mark-start]{Heap before GC invocations=213 (full 135): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:22:34.496+0800: 1755.168: [Full GC 1755.170: [CMS2016-09-06T16:22:36.266+0800: 1756.937: [CMS-concurrent-mark: 1.629/1.798 secs] [Times: user=6.71 sys=0.01, real=1.80 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 16.2425760 secs] 8039104K-&gt;8033024K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 16.2465080 secs] [Times: user=21.06 sys=0.01, real=16.25 secs] Heap after GC invocations=214 (full 136): par new generation total 1747648K, used 1741568K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 98% used [0x0000000650360000, 0x00000006652c03f0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.2532810 seconds{Heap before GC invocations=214 (full 136): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afeb8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:22:50.781+0800: 1771.453: [Full GC 1771.455: [CMS: 6291455K-&gt;6291455K(6291456K), 14.3835600 secs] 8039103K-&gt;8034618K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 14.3876510 secs] [Times: user=14.40 sys=0.00, real=14.38 secs] Heap after GC invocations=215 (full 137): par new generation total 1747648K, used 1743163K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 98% used [0x0000000650360000, 0x000000066544ec28, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.3948240 seconds2016-09-06T16:23:05.193+0800: 1785.865: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8037816K(8039104K), 1.0918910 secs] [Times: user=1.09 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.0982000 seconds2016-09-06T16:23:06.289+0800: 1786.960: [CMS-concurrent-mark-start]{Heap before GC invocations=215 (full 138): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:23:06.300+0800: 1786.972: [Full GC 1786.974: [CMS2016-09-06T16:23:08.130+0800: 1788.801: [CMS-concurrent-mark: 1.666/1.841 secs] [Times: user=6.74 sys=0.01, real=1.84 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 16.0873880 secs] 8039103K-&gt;8035673K(8039104K), [CMS Perm : 33754K-&gt;33754K(56304K)], 16.0914590 secs] [Times: user=20.97 sys=0.01, real=16.09 secs] Heap after GC invocations=216 (full 139): par new generation total 1747648K, used 1744217K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffc8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006655566a8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33754K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.0979600 seconds{Heap before GC invocations=216 (full 139): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:23:22.417+0800: 1803.088: [Full GC 1803.090: [CMS: 6291456K-&gt;6291455K(6291456K), 14.5738410 secs] 8039103K-&gt;8036246K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.5779040 secs] [Times: user=14.59 sys=0.00, real=14.57 secs] Heap after GC invocations=217 (full 140): par new generation total 1747648K, used 1744790K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff90, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006655e5c30, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.5846890 seconds2016-09-06T16:23:37.004+0800: 1817.675: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8036649K(8039104K), 1.0919490 secs] [Times: user=1.09 sys=0.00, real=1.09 secs] Total time for which application threads were stopped: 1.0979500 seconds2016-09-06T16:23:38.100+0800: 1818.771: [CMS-concurrent-mark-start]{Heap before GC invocations=217 (full 141): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affc8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:23:38.123+0800: 1818.795: [Full GC 1818.797: [CMS2016-09-06T16:23:39.955+0800: 1820.625: [CMS-concurrent-mark: 1.680/1.855 secs] [Times: user=6.75 sys=0.00, real=1.85 secs] (concurrent mode failure): 6291455K-&gt;6291455K(6291456K), 16.2502410 secs] 8039103K-&gt;8036806K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 16.2542910 secs] [Times: user=21.06 sys=0.01, real=16.25 secs] Heap after GC invocations=218 (full 142): par new generation total 1747648K, used 1745350K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665671ac0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.2614060 seconds{Heap before GC invocations=218 (full 142): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:23:54.401+0800: 1835.072: [Full GC 1835.074: [CMS: 6291456K-&gt;6291455K(6291456K), 14.4730830 secs] 8039104K-&gt;8037015K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.4771250 secs] [Times: user=14.48 sys=0.00, real=14.48 secs] Heap after GC invocations=219 (full 143): par new generation total 1747648K, used 1745559K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffd0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006656a5d70, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.4839380 seconds{Heap before GC invocations=219 (full 143): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:24:08.899+0800: 1849.570: [Full GC 1849.572: [CMS: 6291455K-&gt;6291456K(6291456K), 14.4116020 secs] 8039103K-&gt;8037046K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.4156090 secs] [Times: user=14.43 sys=0.00, real=14.41 secs] Heap after GC invocations=220 (full 144): par new generation total 1747648K, used 1745590K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006656adb90, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.4222850 seconds2016-09-06T16:24:23.330+0800: 1864.002: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8038774K(8039104K), 1.0912930 secs] [Times: user=1.10 sys=0.00, real=1.09 secs] Total time for which application threads were stopped: 1.0978200 seconds2016-09-06T16:24:24.426+0800: 1865.097: [CMS-concurrent-mark-start]{Heap before GC invocations=220 (full 145): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:24:24.430+0800: 1865.102: [Full GC 1865.104: [CMS2016-09-06T16:24:26.241+0800: 1866.912: [CMS-concurrent-mark: 1.643/1.815 secs] [Times: user=6.74 sys=0.01, real=1.82 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 16.1769720 secs] 8039104K-&gt;8036979K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 16.1810180 secs] [Times: user=21.10 sys=0.01, real=16.18 secs] Heap after GC invocations=221 (full 146): par new generation total 1747648K, used 1745523K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff88, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066569cd38, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.1875530 seconds{Heap before GC invocations=221 (full 146): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:24:40.633+0800: 1881.305: [Full GC 1881.307: [CMS: 6291456K-&gt;6291455K(6291456K), 14.4776060 secs] 8039103K-&gt;8036907K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.4816680 secs] [Times: user=14.49 sys=0.00, real=14.48 secs] Heap after GC invocations=222 (full 147): par new generation total 1747648K, used 1745451K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066568acc0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.4885580 seconds{Heap before GC invocations=222 (full 147): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:24:55.134+0800: 1895.806: [Full GC 1895.808: [CMS: 6291456K-&gt;6291455K(6291456K), 14.4123810 secs] 8039104K-&gt;8037218K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.4163820 secs] [Times: user=14.42 sys=0.00, real=14.41 secs] Heap after GC invocations=223 (full 148): par new generation total 1747648K, used 1745762K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffc0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006656d8aa8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.4228920 seconds2016-09-06T16:25:09.562+0800: 1910.234: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8037772K(8039104K), 1.0774760 secs] [Times: user=1.07 sys=0.00, real=1.08 secs] Total time for which application threads were stopped: 1.0836760 seconds2016-09-06T16:25:10.643+0800: 1911.314: [CMS-concurrent-mark-start]{Heap before GC invocations=223 (full 149): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:25:10.654+0800: 1911.326: [Full GC 1911.328: [CMS2016-09-06T16:25:12.460+0800: 1913.131: [CMS-concurrent-mark: 1.643/1.817 secs] [Times: user=6.74 sys=0.00, real=1.82 secs] (concurrent mode failure): 6291455K-&gt;6291455K(6291456K), 16.1827940 secs] 8039103K-&gt;8038039K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 16.1868370 secs] [Times: user=21.08 sys=0.00, real=16.18 secs] Heap after GC invocations=224 (full 150): par new generation total 1747648K, used 1746583K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006657a5d28, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.1935970 seconds{Heap before GC invocations=224 (full 150): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:25:26.854+0800: 1927.525: [Full GC 1927.527: [CMS: 6291456K-&gt;6291455K(6291456K), 14.2442840 secs] 8039103K-&gt;8037331K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.2483730 secs] [Times: user=14.25 sys=0.00, real=14.25 secs] Heap after GC invocations=225 (full 151): par new generation total 1747648K, used 1745875K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffc0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006656f4cb0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.2547210 seconds2016-09-06T16:25:41.119+0800: 1941.790: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8039103K(8039104K), 1.0908630 secs] [Times: user=1.09 sys=0.00, real=1.09 secs] Total time for which application threads were stopped: 1.0972480 seconds2016-09-06T16:25:42.214+0800: 1942.885: [CMS-concurrent-mark-start]{Heap before GC invocations=225 (full 152): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:25:42.222+0800: 1942.894: [Full GC 1942.896: [CMS2016-09-06T16:25:44.020+0800: 1944.691: [CMS-concurrent-mark: 1.635/1.806 secs] [Times: user=6.71 sys=0.00, real=1.81 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 14.4623230 secs] 8039104K-&gt;8037371K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.4664100 secs] [Times: user=19.36 sys=0.00, real=14.47 secs] Heap after GC invocations=226 (full 153): par new generation total 1747648K, used 1745915K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffd8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006656fec38, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.4729840 seconds{Heap before GC invocations=226 (full 153): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:25:56.711+0800: 1957.382: [Full GC 1957.384: [CMS: 6291456K-&gt;6291455K(6291456K), 13.7676430 secs] 8039104K-&gt;8037997K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.7715150 secs] [Times: user=13.78 sys=0.00, real=13.77 secs] Heap after GC invocations=227 (full 154): par new generation total 1747648K, used 1746541K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff28, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066579b5a0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.7779210 seconds{Heap before GC invocations=227 (full 154): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:26:10.493+0800: 1971.165: [Full GC 1971.167: [CMS: 6291456K-&gt;6291456K(6291456K), 12.6929450 secs] 8039104K-&gt;8038110K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.6969380 secs] [Times: user=12.71 sys=0.00, real=12.69 secs] Heap after GC invocations=228 (full 155): par new generation total 1747648K, used 1746654K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff88, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006657b7920, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.7030230 seconds2016-09-06T16:26:23.197+0800: 1983.869: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8038214K(8039104K), 1.0987110 secs] [Times: user=1.10 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1043560 seconds2016-09-06T16:26:24.300+0800: 1984.971: [CMS-concurrent-mark-start]{Heap before GC invocations=228 (full 156): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:26:24.308+0800: 1984.979: [Full GC 1984.981: [CMS2016-09-06T16:26:26.104+0800: 1986.775: [CMS-concurrent-mark: 1.638/1.804 secs] [Times: user=6.72 sys=0.01, real=1.80 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 13.6965320 secs] 8039103K-&gt;8038381K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.7002410 secs] [Times: user=18.61 sys=0.00, real=13.70 secs] Heap after GC invocations=229 (full 157): par new generation total 1747648K, used 1746925K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006657fb718, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.7062470 seconds{Heap before GC invocations=229 (full 157): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:26:38.021+0800: 1998.693: [Full GC 1998.694: [CMS: 6291456K-&gt;6291456K(6291456K), 11.8846270 secs] 8039104K-&gt;8038505K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.8883980 secs] [Times: user=11.90 sys=0.00, real=11.89 secs] Heap after GC invocations=230 (full 158): par new generation total 1747648K, used 1747049K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066581a630, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.8944090 seconds2016-09-06T16:26:49.917+0800: 2010.589: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8038804K(8039104K), 1.0624610 secs] [Times: user=1.06 sys=0.00, real=1.07 secs] Total time for which application threads were stopped: 1.0675540 seconds2016-09-06T16:26:50.983+0800: 2011.654: [CMS-concurrent-mark-start]{Heap before GC invocations=230 (full 159): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:26:50.988+0800: 2011.659: [Full GC 2011.661: [CMS2016-09-06T16:26:52.798+0800: 2013.469: [CMS-concurrent-mark: 1.649/1.815 secs] [Times: user=6.73 sys=0.00, real=1.81 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 15.3471300 secs] 8039104K-&gt;8037440K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 15.3508160 secs] [Times: user=20.25 sys=0.00, real=15.35 secs] Heap after GC invocations=231 (full 160): par new generation total 1747648K, used 1745984K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fe50, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006657102d0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.3565740 seconds{Heap before GC invocations=231 (full 160): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:27:06.356+0800: 2027.027: [Full GC 2027.029: [CMS: 6291456K-&gt;6291455K(6291456K), 13.0716610 secs] 8039104K-&gt;8037585K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.0753670 secs] [Times: user=13.08 sys=0.00, real=13.07 secs] Heap after GC invocations=232 (full 161): par new generation total 1747648K, used 1746129K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffc0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665734758, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.0812070 seconds{Heap before GC invocations=232 (full 161): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:27:19.447+0800: 2040.118: [Full GC 2040.120: [CMS: 6291456K-&gt;6291456K(6291456K), 12.6399360 secs] 8039103K-&gt;8037892K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.6438230 secs] [Times: user=12.65 sys=0.00, real=12.64 secs] Heap after GC invocations=233 (full 162): par new generation total 1747648K, used 1746436K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006657810a8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.6504590 seconds2016-09-06T16:27:32.097+0800: 2052.769: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8037955K(8039104K), 1.0981810 secs] [Times: user=1.09 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1038620 seconds2016-09-06T16:27:33.200+0800: 2053.870: [CMS-concurrent-mark-start]{Heap before GC invocations=233 (full 163): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:27:33.214+0800: 2053.885: [Full GC 2053.887: [CMS2016-09-06T16:27:35.004+0800: 2055.675: [CMS-concurrent-mark: 1.632/1.805 secs] [Times: user=6.70 sys=0.00, real=1.81 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 15.9606020 secs] 8039104K-&gt;8036951K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 15.9647170 secs] [Times: user=20.82 sys=0.00, real=15.97 secs] Heap after GC invocations=234 (full 164): par new generation total 1747648K, used 1745495K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665695d38, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.9713390 seconds{Heap before GC invocations=234 (full 164): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:27:49.200+0800: 2069.871: [Full GC 2069.873: [CMS: 6291456K-&gt;6291455K(6291456K), 14.3274150 secs] 8039103K-&gt;8036458K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.3314570 secs] [Times: user=14.34 sys=0.00, real=14.33 secs] Heap after GC invocations=235 (full 165): par new generation total 1747648K, used 1745002K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fe28, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066561ab60, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.3377850 seconds2016-09-06T16:28:03.537+0800: 2084.209: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8036458K(8039104K), 1.0968140 secs] [Times: user=1.10 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1024320 seconds2016-09-06T16:28:04.638+0800: 2085.309: [CMS-concurrent-mark-start]{Heap before GC invocations=235 (full 166): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affd8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:28:04.654+0800: 2085.326: [Full GC 2085.328: [CMS2016-09-06T16:28:06.442+0800: 2087.113: [CMS-concurrent-mark: 1.631/1.804 secs] [Times: user=6.71 sys=0.01, real=1.81 secs] (concurrent mode failure): 6291455K-&gt;6291446K(6291456K), 16.1148400 secs] 8039103K-&gt;8033933K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 16.1189400 secs] [Times: user=20.97 sys=0.02, real=16.12 secs] Heap after GC invocations=236 (full 167): par new generation total 1747648K, used 1742487K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffa8, 0x0000000650360000) from space 349504K, 98% used [0x0000000650360000, 0x00000006653a5c80, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291446K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.1256760 seconds{Heap before GC invocations=236 (full 167): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:28:20.812+0800: 2101.484: [Full GC 2101.485: [CMS: 6291455K-&gt;6291455K(6291456K), 14.2150820 secs] 8039103K-&gt;8034412K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.2191710 secs] [Times: user=14.23 sys=0.00, real=14.21 secs] Heap after GC invocations=237 (full 168): par new generation total 1747648K, used 1742956K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe8, 0x0000000650360000) from space 349504K, 98% used [0x0000000650360000, 0x000000066541b118, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.2259670 seconds2016-09-06T16:28:35.052+0800: 2115.723: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8036998K(8039104K), 1.0992600 secs] [Times: user=1.10 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1053640 seconds2016-09-06T16:28:36.155+0800: 2116.826: [CMS-concurrent-mark-start]{Heap before GC invocations=237 (full 169): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afdf0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:28:36.170+0800: 2116.841: [Full GC 2116.843: [CMS2016-09-06T16:28:37.973+0800: 2118.643: [CMS-concurrent-mark: 1.644/1.817 secs] [Times: user=6.76 sys=0.00, real=1.81 secs] (concurrent mode failure): 6291455K-&gt;6291456K(6291456K), 14.5901790 secs] 8039103K-&gt;8035774K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.5942500 secs] [Times: user=19.49 sys=0.01, real=14.59 secs] Heap after GC invocations=238 (full 170): par new generation total 1747648K, used 1744318K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff58, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066556fc00, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.6011450 seconds{Heap before GC invocations=238 (full 170): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:28:50.789+0800: 2131.461: [Full GC 2131.463: [CMS: 6291456K-&gt;6291455K(6291456K), 14.6158830 secs] 8039104K-&gt;8035263K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.6199690 secs] [Times: user=14.63 sys=0.02, real=14.62 secs] Heap after GC invocations=239 (full 171): par new generation total 1747648K, used 1743807K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff78, 0x0000000650360000) from space 349504K, 98% used [0x0000000650360000, 0x00000006654eff28, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.6267200 seconds2016-09-06T16:29:05.416+0800: 2146.088: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8035422K(8039104K), 1.0970620 secs] [Times: user=1.10 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1027380 seconds2016-09-06T16:29:06.518+0800: 2147.189: [CMS-concurrent-mark-start]{Heap before GC invocations=239 (full 172): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:29:06.546+0800: 2147.218: [Full GC 2147.220: [CMS2016-09-06T16:29:08.338+0800: 2149.009: [CMS-concurrent-mark: 1.648/1.820 secs] [Times: user=6.79 sys=0.01, real=1.82 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 16.3005270 secs] 8039103K-&gt;8036080K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 16.3045700 secs] [Times: user=21.17 sys=0.00, real=16.30 secs] Heap after GC invocations=240 (full 173): par new generation total 1747648K, used 1744624K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffd8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006655bc0e0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 16.3115930 seconds{Heap before GC invocations=240 (full 173): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff98, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:29:22.877+0800: 2163.548: [Full GC 2163.550: [CMS: 6291455K-&gt;6291455K(6291456K), 13.9058720 secs] 8039103K-&gt;8036908K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.9099300 secs] [Times: user=13.91 sys=0.00, real=13.91 secs] Heap after GC invocations=241 (full 174): par new generation total 1747648K, used 1745452K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffd0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066568b1d8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.9168300 seconds{Heap before GC invocations=241 (full 174): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:29:36.821+0800: 2177.492: [Full GC 2177.494: [CMS: 6291456K-&gt;6291455K(6291456K), 12.9222320 secs] 8039103K-&gt;8037527K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.9262750 secs] [Times: user=12.93 sys=0.00, real=12.93 secs] Heap after GC invocations=242 (full 175): par new generation total 1747648K, used 1746071K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665725db8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.9328580 seconds2016-09-06T16:29:49.756+0800: 2190.428: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8037936K(8039104K), 1.0965780 secs] [Times: user=1.09 sys=0.00, real=1.09 secs] Total time for which application threads were stopped: 1.1024280 seconds2016-09-06T16:29:50.857+0800: 2191.528: [CMS-concurrent-mark-start]{Heap before GC invocations=242 (full 176): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:29:50.869+0800: 2191.540: [Full GC 2191.542: [CMS2016-09-06T16:29:52.672+0800: 2193.343: [CMS-concurrent-mark: 1.645/1.815 secs] [Times: user=6.72 sys=0.00, real=1.81 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 14.1966110 secs] 8039104K-&gt;8037832K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.2006580 secs] [Times: user=19.08 sys=0.01, real=14.20 secs] Heap after GC invocations=243 (full 177): par new generation total 1747648K, used 1746376K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffc0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665772050, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.2073530 seconds{Heap before GC invocations=243 (full 177): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:30:05.084+0800: 2205.756: [Full GC 2205.758: [CMS: 6291456K-&gt;6291456K(6291456K), 12.6576810 secs] 8039103K-&gt;8038218K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.6617030 secs] [Times: user=12.67 sys=0.01, real=12.66 secs] Heap after GC invocations=244 (full 178): par new generation total 1747648K, used 1746762K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff98, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006657d2a68, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.6679760 seconds{Heap before GC invocations=244 (full 178): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:30:17.760+0800: 2218.431: [Full GC 2218.433: [CMS: 6291456K-&gt;6291455K(6291456K), 12.6082230 secs] 8039103K-&gt;8038541K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.6121920 secs] [Times: user=12.62 sys=0.01, real=12.61 secs] Heap after GC invocations=245 (full 179): par new generation total 1747648K, used 1747085K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffb0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665823730, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.6184820 seconds2016-09-06T16:30:30.379+0800: 2231.050: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8038585K(8039104K), 1.0960060 secs] [Times: user=1.10 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1018260 seconds2016-09-06T16:30:31.479+0800: 2232.149: [CMS-concurrent-mark-start]{Heap before GC invocations=245 (full 180): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affc0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:30:31.485+0800: 2232.156: [Full GC 2232.158: [CMS2016-09-06T16:30:33.276+0800: 2233.947: [CMS-concurrent-mark: 1.634/1.797 secs] [Times: user=6.70 sys=0.00, real=1.80 secs] (concurrent mode failure): 6291455K-&gt;6291455K(6291456K), 14.4948490 secs] 8039103K-&gt;8038808K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.4985430 secs] [Times: user=19.39 sys=0.01, real=14.50 secs] Heap after GC invocations=246 (full 181): par new generation total 1747648K, used 1747352K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665866060, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.5048880 seconds{Heap before GC invocations=246 (full 181): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:30:45.992+0800: 2246.663: [Full GC 2246.665: [CMS: 6291456K-&gt;6291456K(6291456K), 11.6654110 secs] 8039104K-&gt;8038939K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.6690830 secs] [Times: user=11.67 sys=0.00, real=11.67 secs] Heap after GC invocations=247 (full 182): par new generation total 1747648K, used 1747483K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665886dc8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.6747130 seconds{Heap before GC invocations=247 (full 182): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:30:57.668+0800: 2258.339: [Full GC 2258.341: [CMS: 6291456K-&gt;6291456K(6291456K), 11.6390390 secs] 8039103K-&gt;8039039K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.6426420 secs] [Times: user=11.65 sys=0.00, real=11.64 secs] Heap after GC invocations=248 (full 183): par new generation total 1747648K, used 1747583K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066589fd10, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.6481320 seconds{Heap before GC invocations=248 (full 183): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:31:09.317+0800: 2269.988: [Full GC 2269.990: [CMS: 6291456K-&gt;6291456K(6291456K), 11.6425690 secs] 8039103K-&gt;8039069K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.6461660 secs] [Times: user=11.65 sys=0.00, real=11.65 secs] Heap after GC invocations=249 (full 184): par new generation total 1747648K, used 1747613K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658a7650, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.6516070 seconds{Heap before GC invocations=249 (full 184): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff98, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:31:20.969+0800: 2281.640: [Full GC 2281.642: [CMS: 6291456K-&gt;6291456K(6291456K), 11.6087130 secs] 8039103K-&gt;8039101K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.6123030 secs] [Times: user=11.61 sys=0.00, real=11.62 secs] Heap after GC invocations=250 (full 185): par new generation total 1747648K, used 1747645K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658af7b8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.6177110 seconds{Heap before GC invocations=250 (full 185): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:31:32.586+0800: 2293.258: [Full GC 2293.259: [CMS: 6291456K-&gt;6291456K(6291456K), 11.5622870 secs] 8039103K-&gt;8039103K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.5659160 secs] [Times: user=11.57 sys=0.01, real=11.57 secs] Heap after GC invocations=251 (full 186): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afd28, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.5712490 seconds{Heap before GC invocations=251 (full 186): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff80, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:31:44.158+0800: 2304.829: [Full GC 2304.831: [CMS: 6291456K-&gt;6291456K(6291456K), 11.5660820 secs] 8039103K-&gt;8039103K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.5696890 secs] [Times: user=11.57 sys=0.00, real=11.57 secs] Heap after GC invocations=252 (full 187): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff48, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.5751430 seconds{Heap before GC invocations=252 (full 187): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affd8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:31:55.733+0800: 2316.405: [Full GC 2316.406: [CMS: 6291456K-&gt;6291456K(6291456K), 11.5613100 secs] 8039103K-&gt;8039103K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.5649110 secs] [Times: user=11.57 sys=0.00, real=11.57 secs] Heap after GC invocations=253 (full 188): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff98, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}{Heap before GC invocations=253 (full 188): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff98, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:32:07.300+0800: 2327.971: [Full GC 2327.972: [CMS: 6291456K-&gt;6291456K(6291456K), 11.6192490 secs] 8039103K-&gt;8039103K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.6223900 secs] [Times: user=11.63 sys=0.00, real=11.62 secs] Heap after GC invocations=254 (full 189): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff98, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 23.1939030 seconds{Heap before GC invocations=254 (full 189): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:32:18.927+0800: 2339.599: [Full GC 2339.600: [CMS: 6291456K-&gt;6291455K(6291456K), 13.3428250 secs] 8039103K-&gt;8037975K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.3464040 secs] [Times: user=13.35 sys=0.00, real=13.35 secs] Heap after GC invocations=255 (full 190): par new generation total 1747648K, used 1746519K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff78, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665795d28, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.3518230 seconds{Heap before GC invocations=255 (full 190): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:32:32.287+0800: 2352.958: [Full GC 2352.960: [CMS: 6291455K-&gt;6291455K(6291456K), 11.7431910 secs] 8039103K-&gt;8038370K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.7468500 secs] [Times: user=11.75 sys=0.00, real=11.75 secs] Heap after GC invocations=256 (full 191): par new generation total 1747648K, used 1746914K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006657f8980, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.7525470 seconds2016-09-06T16:32:44.046+0800: 2364.718: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039103K(8039104K), 1.0616250 secs] [Times: user=1.06 sys=0.00, real=1.06 secs] Total time for which application threads were stopped: 1.0669380 seconds2016-09-06T16:32:45.112+0800: 2365.782: [CMS-concurrent-mark-start]{Heap before GC invocations=256 (full 192): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:32:45.115+0800: 2365.786: [Full GC 2365.788: [CMS2016-09-06T16:32:46.907+0800: 2367.578: [CMS-concurrent-mark: 1.636/1.796 secs] [Times: user=6.69 sys=0.00, real=1.80 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 13.6066030 secs] 8039103K-&gt;8038663K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.6102460 secs] [Times: user=18.51 sys=0.01, real=13.61 secs] Heap after GC invocations=257 (full 193): par new generation total 1747648K, used 1747207K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665841d58, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.6155530 seconds{Heap before GC invocations=257 (full 193): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afed0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:32:58.733+0800: 2379.405: [Full GC 2379.406: [CMS: 6291456K-&gt;6291455K(6291456K), 13.0818610 secs] 8039103K-&gt;8038743K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.0855220 secs] [Times: user=13.09 sys=0.00, real=13.09 secs] Heap after GC invocations=258 (full 194): par new generation total 1747648K, used 1747287K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665855ea0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.0911680 seconds{Heap before GC invocations=258 (full 194): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:33:11.827+0800: 2392.498: [Full GC 2392.500: [CMS: 6291456K-&gt;6291456K(6291456K), 11.7522940 secs] 8039103K-&gt;8038909K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.7559300 secs] [Times: user=11.76 sys=0.00, real=11.75 secs] Heap after GC invocations=259 (full 195): par new generation total 1747648K, used 1747453K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066587f568, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.7614490 seconds{Heap before GC invocations=259 (full 195): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:33:23.590+0800: 2404.261: [Full GC 2404.263: [CMS: 6291456K-&gt;6291456K(6291456K), 11.6929480 secs] 8039103K-&gt;8038968K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.6965370 secs] [Times: user=11.70 sys=0.00, real=11.69 secs] Heap after GC invocations=260 (full 196): par new generation total 1747648K, used 1747512K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffd0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066588e3c0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.7020030 seconds2016-09-06T16:33:35.292+0800: 2415.963: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8038969K(8039104K), 1.0616020 secs] [Times: user=1.06 sys=0.00, real=1.06 secs] Total time for which application threads were stopped: 1.0665990 seconds2016-09-06T16:33:36.357+0800: 2417.028: [CMS-concurrent-mark-start]{Heap before GC invocations=260 (full 197): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affb0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:33:36.359+0800: 2417.031: [Full GC 2417.032: [CMS2016-09-06T16:33:38.150+0800: 2418.821: [CMS-concurrent-mark: 1.633/1.793 secs] [Times: user=6.70 sys=0.01, real=1.79 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 13.3397980 secs] 8039103K-&gt;8038974K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.3434700 secs] [Times: user=18.24 sys=0.01, real=13.35 secs] Heap after GC invocations=261 (full 198): par new generation total 1747648K, used 1747518K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066588fb58, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.3487420 seconds{Heap before GC invocations=261 (full 198): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:33:49.709+0800: 2430.381: [Full GC 2430.382: [CMS: 6291456K-&gt;6291456K(6291456K), 11.7226510 secs] 8039104K-&gt;8039013K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.7262910 secs] [Times: user=11.72 sys=0.00, real=11.73 secs] Heap after GC invocations=262 (full 199): par new generation total 1747648K, used 1747557K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658997c8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.7317780 seconds{Heap before GC invocations=262 (full 199): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:34:01.443+0800: 2442.114: [Full GC 2442.116: [CMS: 6291456K-&gt;6291456K(6291456K), 11.7135470 secs] 8039104K-&gt;8039038K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.7171530 secs] [Times: user=11.72 sys=0.01, real=11.72 secs] Heap after GC invocations=263 (full 200): par new generation total 1747648K, used 1747582K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066589f9c8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.7225650 seconds{Heap before GC invocations=263 (full 200): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:34:13.166+0800: 2453.837: [Full GC 2453.839: [CMS: 6291456K-&gt;6291456K(6291456K), 11.6588610 secs] 8039103K-&gt;8039085K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.6624440 secs] [Times: user=11.66 sys=0.00, real=11.66 secs] Heap after GC invocations=264 (full 201): par new generation total 1747648K, used 1747629K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658ab6f0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.6679510 seconds{Heap before GC invocations=264 (full 201): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affd8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:34:24.834+0800: 2465.505: [Full GC 2465.507: [CMS: 6291456K-&gt;6291456K(6291456K), 11.6934650 secs] 8039103K-&gt;8039098K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.6970540 secs] [Times: user=11.70 sys=0.00, real=11.70 secs] Heap after GC invocations=265 (full 202): par new generation total 1747648K, used 1747642K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658ae968, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.7023970 seconds{Heap before GC invocations=265 (full 202): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affc0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:34:36.536+0800: 2477.208: [Full GC 2477.210: [CMS: 6291456K-&gt;6291456K(6291456K), 11.5763370 secs] 8039103K-&gt;8039103K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.5799260 secs] [Times: user=11.58 sys=0.00, real=11.58 secs] Heap after GC invocations=266 (full 203): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff98, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.5852500 seconds{Heap before GC invocations=266 (full 203): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:34:48.122+0800: 2488.793: [Full GC 2488.795: [CMS: 6291456K-&gt;6291456K(6291456K), 11.6289050 secs] 8039103K-&gt;8039103K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.6324750 secs] [Times: user=11.63 sys=0.00, real=11.63 secs] Heap after GC invocations=267 (full 204): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}{Heap before GC invocations=267 (full 204): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:34:59.756+0800: 2500.427: [Full GC 2500.428: [CMS: 6291456K-&gt;6291456K(6291456K), 11.5758830 secs] 8039103K-&gt;8039103K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.5790260 secs] [Times: user=11.58 sys=0.00, real=11.58 secs] Heap after GC invocations=268 (full 205): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 23.2180130 seconds2016-09-06T16:35:11.340+0800: 2512.011: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039103K(8039104K), 1.0645420 secs] [Times: user=1.07 sys=0.00, real=1.07 secs] Total time for which application threads were stopped: 1.0695230 seconds2016-09-06T16:35:12.408+0800: 2513.079: [CMS-concurrent-mark-start]{Heap before GC invocations=268 (full 206): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:35:12.411+0800: 2513.082: [Full GC 2513.084: [CMS2016-09-06T16:35:14.198+0800: 2514.869: [CMS-concurrent-mark: 1.631/1.790 secs] [Times: user=6.68 sys=0.00, real=1.79 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 15.1926460 secs] 8039104K-&gt;8037417K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 15.1962890 secs] [Times: user=20.09 sys=0.00, real=15.20 secs] Heap after GC invocations=269 (full 207): par new generation total 1747648K, used 1745961K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fe30, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066570a6c0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.2015110 seconds{Heap before GC invocations=269 (full 207): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:35:27.625+0800: 2528.297: [Full GC 2528.298: [CMS: 6291456K-&gt;6291456K(6291456K), 13.2173480 secs] 8039104K-&gt;8037759K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.2210270 secs] [Times: user=13.22 sys=0.00, real=13.22 secs] Heap after GC invocations=270 (full 208): par new generation total 1747648K, used 1746303K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fd20, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665760240, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.2268080 seconds2016-09-06T16:35:40.854+0800: 2541.526: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8038236K(8039104K), 1.0636250 secs] [Times: user=1.06 sys=0.01, real=1.07 secs] Total time for which application threads were stopped: 1.0687040 seconds2016-09-06T16:35:41.922+0800: 2542.592: [CMS-concurrent-mark-start]{Heap before GC invocations=270 (full 209): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:35:41.940+0800: 2542.612: [Full GC 2542.613: [CMS2016-09-06T16:35:43.717+0800: 2544.387: [CMS-concurrent-mark: 1.634/1.795 secs] [Times: user=6.69 sys=0.00, real=1.79 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 13.6259980 secs] 8039104K-&gt;8038295K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.6296750 secs] [Times: user=18.48 sys=0.00, real=13.63 secs] Heap after GC invocations=271 (full 210): par new generation total 1747648K, used 1746839K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fdf0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006657e5e60, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.6356500 seconds{Heap before GC invocations=271 (full 210): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:35:55.582+0800: 2556.253: [Full GC 2556.255: [CMS: 6291456K-&gt;6291455K(6291456K), 11.9460940 secs] 8039103K-&gt;8038535K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.9498250 secs] [Times: user=11.96 sys=0.00, real=11.94 secs] Heap after GC invocations=272 (full 211): par new generation total 1747648K, used 1747079K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fae8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665822180, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.9554510 seconds2016-09-06T16:36:07.537+0800: 2568.209: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8038552K(8039104K), 1.0664730 secs] [Times: user=1.07 sys=0.00, real=1.07 secs] Total time for which application threads were stopped: 1.0714450 seconds2016-09-06T16:36:08.607+0800: 2569.278: [CMS-concurrent-mark-start]{Heap before GC invocations=272 (full 212): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:36:08.613+0800: 2569.284: [Full GC 2569.286: [CMS2016-09-06T16:36:10.407+0800: 2571.077: [CMS-concurrent-mark: 1.639/1.799 secs] [Times: user=6.71 sys=0.01, real=1.80 secs] (concurrent mode failure): 6291455K-&gt;6291455K(6291456K), 13.5652700 secs] 8039103K-&gt;8038665K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.5689520 secs] [Times: user=18.47 sys=0.01, real=13.56 secs] Heap after GC invocations=273 (full 213): par new generation total 1747648K, used 1747209K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fde0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665842778, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.5746730 seconds{Heap before GC invocations=273 (full 213): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:36:22.190+0800: 2582.861: [Full GC 2582.863: [CMS: 6291455K-&gt;6291455K(6291456K), 11.9941340 secs] 8039103K-&gt;8038705K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.9977860 secs] [Times: user=11.99 sys=0.01, real=12.00 secs] Heap after GC invocations=274 (full 214): par new generation total 1747648K, used 1747249K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066584c6a0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.0032870 seconds2016-09-06T16:36:34.194+0800: 2594.866: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8038786K(8039104K), 1.0961170 secs] [Times: user=1.10 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1020040 seconds2016-09-06T16:36:35.294+0800: 2595.965: [CMS-concurrent-mark-start]{Heap before GC invocations=274 (full 215): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:36:35.299+0800: 2595.970: [Full GC 2595.972: [CMS2016-09-06T16:36:37.151+0800: 2597.822: [CMS-concurrent-mark: 1.691/1.857 secs] [Times: user=6.69 sys=0.01, real=1.86 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 14.2952790 secs] 8039103K-&gt;8038799K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.2992770 secs] [Times: user=19.13 sys=0.01, real=14.29 secs] Heap after GC invocations=275 (full 216): par new generation total 1747648K, used 1747343K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffd8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665863dc0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.3053580 seconds{Heap before GC invocations=275 (full 216): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:36:49.607+0800: 2610.279: [Full GC 2610.280: [CMS: 6291456K-&gt;6291456K(6291456K), 12.3791110 secs] 8039104K-&gt;8038916K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.3831290 secs] [Times: user=12.39 sys=0.01, real=12.38 secs] Heap after GC invocations=276 (full 217): par new generation total 1747648K, used 1747460K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658811d8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.3893650 seconds{Heap before GC invocations=276 (full 217): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affc8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:37:01.998+0800: 2622.669: [Full GC 2622.671: [CMS: 6291456K-&gt;6291456K(6291456K), 12.3243860 secs] 8039103K-&gt;8038971K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.3283590 secs] [Times: user=12.33 sys=0.01, real=12.33 secs] Heap after GC invocations=277 (full 218): par new generation total 1747648K, used 1747515K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066588ec18, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.3345920 seconds2016-09-06T16:37:14.335+0800: 2635.006: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039103K(8039104K), 1.0973800 secs] [Times: user=1.10 sys=0.00, real=1.09 secs] Total time for which application threads were stopped: 1.1031720 seconds2016-09-06T16:37:15.436+0800: 2636.107: [CMS-concurrent-mark-start]{Heap before GC invocations=277 (full 219): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:37:15.439+0800: 2636.110: [Full GC 2636.112: [CMS2016-09-06T16:37:17.266+0800: 2637.937: [CMS-concurrent-mark: 1.664/1.830 secs] [Times: user=6.70 sys=0.00, real=1.83 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 14.0575280 secs] 8039103K-&gt;8039016K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.0615480 secs] [Times: user=18.92 sys=0.01, real=14.06 secs] Heap after GC invocations=278 (full 220): par new generation total 1747648K, used 1747560K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066589a2a0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.0673180 seconds{Heap before GC invocations=278 (full 220): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:37:29.507+0800: 2650.178: [Full GC 2650.180: [CMS: 6291456K-&gt;6291456K(6291456K), 12.3783610 secs] 8039103K-&gt;8039027K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.3823580 secs] [Times: user=12.38 sys=0.01, real=12.38 secs] Heap after GC invocations=279 (full 221): par new generation total 1747648K, used 1747571K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066589cc40, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.3883790 seconds2016-09-06T16:37:41.896+0800: 2662.567: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039064K(8039104K), 1.0973740 secs] [Times: user=1.09 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1030810 seconds2016-09-06T16:37:42.997+0800: 2663.668: [CMS-concurrent-mark-start]{Heap before GC invocations=279 (full 222): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:37:43.000+0800: 2663.671: [Full GC 2663.673: [CMS2016-09-06T16:37:44.802+0800: 2665.472: [CMS-concurrent-mark: 1.639/1.804 secs] [Times: user=6.69 sys=0.01, real=1.81 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 13.5297470 secs] 8039103K-&gt;8039033K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.5335880 secs] [Times: user=18.42 sys=0.00, real=13.53 secs] Heap after GC invocations=280 (full 223): par new generation total 1747648K, used 1747577K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066589e4d8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.5390870 seconds{Heap before GC invocations=280 (full 223): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afe60, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:37:56.540+0800: 2677.211: [Full GC 2677.213: [CMS: 6291456K-&gt;6291456K(6291456K), 11.6582320 secs] 8039103K-&gt;8039047K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.6619790 secs] [Times: user=11.66 sys=0.00, real=11.67 secs] Heap after GC invocations=281 (full 224): par new generation total 1747648K, used 1747591K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658a1d50, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.6673460 seconds2016-09-06T16:38:08.207+0800: 2688.879: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039087K(8039104K), 1.0613040 secs] [Times: user=1.06 sys=0.00, real=1.06 secs] Total time for which application threads were stopped: 1.0663920 seconds2016-09-06T16:38:09.272+0800: 2689.943: [CMS-concurrent-mark-start]{Heap before GC invocations=281 (full 225): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff80, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:38:09.275+0800: 2689.946: [Full GC 2689.948: [CMS2016-09-06T16:38:11.101+0800: 2691.772: [CMS-concurrent-mark: 1.670/1.829 secs] [Times: user=6.83 sys=0.00, real=1.83 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 13.5811620 secs] 8039103K-&gt;8039062K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.5848310 secs] [Times: user=18.60 sys=0.01, real=13.58 secs] Heap after GC invocations=282 (full 226): par new generation total 1747648K, used 1747606K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658a59a8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.5905160 seconds{Heap before GC invocations=282 (full 226): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:38:22.865+0800: 2703.537: [Full GC 2703.539: [CMS: 6291456K-&gt;6291456K(6291456K), 11.6559540 secs] 8039103K-&gt;8039079K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.6596000 secs] [Times: user=11.67 sys=0.01, real=11.66 secs] Heap after GC invocations=283 (full 227): par new generation total 1747648K, used 1747623K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658a9e38, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.6649900 seconds2016-09-06T16:38:34.531+0800: 2715.202: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039095K(8039104K), 1.0617140 secs] [Times: user=1.06 sys=0.00, real=1.06 secs] Total time for which application threads were stopped: 1.0667560 seconds2016-09-06T16:38:35.596+0800: 2716.267: [CMS-concurrent-mark-start]{Heap before GC invocations=283 (full 228): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affc0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:38:35.598+0800: 2716.270: [Full GC 2716.271: [CMS2016-09-06T16:38:37.391+0800: 2718.061: [CMS-concurrent-mark: 1.636/1.795 secs] [Times: user=6.69 sys=0.00, real=1.80 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 14.2838360 secs] 8039103K-&gt;8039019K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.2875070 secs] [Times: user=19.19 sys=0.01, real=14.28 secs] Heap after GC invocations=284 (full 229): par new generation total 1747648K, used 1747563K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff98, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066589af08, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.2930770 seconds{Heap before GC invocations=284 (full 229): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:38:49.892+0800: 2730.563: [Full GC 2730.565: [CMS: 6291456K-&gt;6291456K(6291456K), 11.6349060 secs] 8039103K-&gt;8039065K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.6385230 secs] [Times: user=11.64 sys=0.01, real=11.64 secs] Heap after GC invocations=285 (full 230): par new generation total 1747648K, used 1747609K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658a6500, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.6439730 seconds2016-09-06T16:39:01.536+0800: 2742.208: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039077K(8039104K), 1.0618630 secs] [Times: user=1.06 sys=0.00, real=1.06 secs] Total time for which application threads were stopped: 1.0669070 seconds2016-09-06T16:39:02.602+0800: 2743.272: [CMS-concurrent-mark-start]{Heap before GC invocations=285 (full 231): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:39:02.606+0800: 2743.278: [Full GC 2743.279: [CMS2016-09-06T16:39:04.397+0800: 2745.067: [CMS-concurrent-mark: 1.636/1.795 secs] [Times: user=6.69 sys=0.00, real=1.79 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 13.7737250 secs] 8039103K-&gt;8039086K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.7774160 secs] [Times: user=18.67 sys=0.01, real=13.78 secs] Heap after GC invocations=286 (full 232): par new generation total 1747648K, used 1747630K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffd8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658ab890, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.7831280 seconds{Heap before GC invocations=286 (full 232): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:39:16.389+0800: 2757.061: [Full GC 2757.062: [CMS: 6291456K-&gt;6291456K(6291456K), 11.6241910 secs] 8039103K-&gt;8039091K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.6278430 secs] [Times: user=11.63 sys=0.00, real=11.63 secs] Heap after GC invocations=287 (full 233): par new generation total 1747648K, used 1747635K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658acc60, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.6332040 seconds2016-09-06T16:39:28.023+0800: 2768.694: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039103K(8039104K), 1.0611900 secs] [Times: user=1.06 sys=0.01, real=1.07 secs] Total time for which application threads were stopped: 1.0661840 seconds2016-09-06T16:39:29.087+0800: 2769.758: [CMS-concurrent-mark-start]{Heap before GC invocations=287 (full 234): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:39:29.090+0800: 2769.762: [Full GC 2769.764: [CMS2016-09-06T16:39:30.887+0800: 2771.557: [CMS-concurrent-mark: 1.634/1.799 secs] [Times: user=6.70 sys=0.00, real=1.80 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 14.3151680 secs] 8039103K-&gt;8039097K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.3192220 secs] [Times: user=19.22 sys=0.00, real=14.32 secs] Heap after GC invocations=288 (full 235): par new generation total 1747648K, used 1747641K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658ae800, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.3258670 seconds{Heap before GC invocations=288 (full 235): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affc8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:39:43.416+0800: 2784.087: [Full GC 2784.089: [CMS: 6291456K-&gt;6291456K(6291456K), 12.6526750 secs] 8039103K-&gt;8039044K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.6566590 secs] [Times: user=12.66 sys=0.00, real=12.65 secs] Heap after GC invocations=289 (full 236): par new generation total 1747648K, used 1747588K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fec0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658a1518, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.6627150 seconds2016-09-06T16:39:56.079+0800: 2796.750: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039081K(8039104K), 1.0963530 secs] [Times: user=1.10 sys=0.00, real=1.09 secs] Total time for which application threads were stopped: 1.1020050 seconds2016-09-06T16:39:57.180+0800: 2797.850: [CMS-concurrent-mark-start]{Heap before GC invocations=289 (full 237): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:39:57.183+0800: 2797.854: [Full GC 2797.856: [CMS2016-09-06T16:39:58.988+0800: 2799.658: [CMS-concurrent-mark: 1.648/1.808 secs] [Times: user=6.71 sys=0.00, real=1.80 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 13.6882370 secs] 8039103K-&gt;8039067K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.6919260 secs] [Times: user=18.60 sys=0.01, real=13.69 secs] Heap after GC invocations=290 (full 238): par new generation total 1747648K, used 1747611K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff10, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658a6e28, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.6978510 seconds{Heap before GC invocations=290 (full 238): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affd8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:40:10.880+0800: 2811.552: [Full GC 2811.553: [CMS: 6291456K-&gt;6291456K(6291456K), 11.8755110 secs] 8039103K-&gt;8039068K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.8791510 secs] [Times: user=11.88 sys=0.00, real=11.87 secs] Heap after GC invocations=291 (full 239): par new generation total 1747648K, used 1747612K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fea0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658a7528, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.8845520 seconds2016-09-06T16:40:22.765+0800: 2823.436: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039070K(8039104K), 1.0618490 secs] [Times: user=1.06 sys=0.00, real=1.06 secs] Total time for which application threads were stopped: 1.0667790 seconds2016-09-06T16:40:23.830+0800: 2824.501: [CMS-concurrent-mark-start]{Heap before GC invocations=291 (full 240): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:40:23.833+0800: 2824.504: [Full GC 2824.506: [CMS2016-09-06T16:40:25.626+0800: 2826.296: [CMS-concurrent-mark: 1.636/1.796 secs] [Times: user=6.70 sys=0.00, real=1.80 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 13.5181370 secs] 8039104K-&gt;8039084K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.5218060 secs] [Times: user=18.43 sys=0.01, real=13.52 secs] Heap after GC invocations=292 (full 241): par new generation total 1747648K, used 1747628K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fe18, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658ab3b8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.5335250 seconds{Heap before GC invocations=292 (full 241): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affc0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:40:37.367+0800: 2838.038: [Full GC 2838.040: [CMS: 6291456K-&gt;6291456K(6291456K), 11.9457580 secs] 8039103K-&gt;8039092K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.9493690 secs] [Times: user=11.95 sys=0.01, real=11.95 secs] Heap after GC invocations=293 (full 242): par new generation total 1747648K, used 1747636K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffa8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658ad3f0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.9547280 seconds{Heap before GC invocations=293 (full 242): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff90, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:40:49.322+0800: 2849.993: [Full GC 2849.995: [CMS: 6291456K-&gt;6291455K(6291456K), 11.7987800 secs] 8039103K-&gt;8039085K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.8026180 secs] [Times: user=11.81 sys=0.00, real=11.80 secs] Heap after GC invocations=294 (full 243): par new generation total 1747648K, used 1747629K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fe68, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658ab938, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.8079490 seconds2016-09-06T16:41:01.130+0800: 2861.801: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8039087K(8039104K), 1.0665830 secs] [Times: user=1.06 sys=0.00, real=1.06 secs] Total time for which application threads were stopped: 1.0718070 seconds2016-09-06T16:41:02.200+0800: 2862.871: [CMS-concurrent-mark-start]{Heap before GC invocations=294 (full 244): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff40, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:41:02.203+0800: 2862.874: [Full GC 2862.876: [CMS2016-09-06T16:41:04.054+0800: 2864.725: [CMS-concurrent-mark: 1.694/1.854 secs] [Times: user=6.93 sys=0.01, real=1.85 secs] (concurrent mode failure): 6291455K-&gt;6291455K(6291456K), 13.4261210 secs] 8039103K-&gt;8039097K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.4298060 secs] [Times: user=18.51 sys=0.00, real=13.43 secs] Heap after GC invocations=295 (full 245): par new generation total 1747648K, used 1747641K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fe88, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658ae8b8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.4351190 seconds{Heap before GC invocations=295 (full 245): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affc8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:41:15.638+0800: 2876.309: [Full GC 2876.311: [CMS: 6291455K-&gt;6291455K(6291456K), 11.7462530 secs] 8039103K-&gt;8039098K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.7498710 secs] [Times: user=11.75 sys=0.01, real=11.75 secs] Heap after GC invocations=296 (full 246): par new generation total 1747648K, used 1747642K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fe18, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aeb08, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.7552120 seconds{Heap before GC invocations=296 (full 246): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:41:27.394+0800: 2888.065: [Full GC 2888.067: [CMS: 6291456K-&gt;6291456K(6291456K), 12.0457080 secs] 8039104K-&gt;8039052K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.0493390 secs] [Times: user=12.05 sys=0.01, real=12.04 secs] Heap after GC invocations=297 (full 247): par new generation total 1747648K, used 1747596K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658a3090, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.0547370 seconds2016-09-06T16:41:39.448+0800: 2900.120: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039052K(8039104K), 1.0622240 secs] [Times: user=1.06 sys=0.00, real=1.06 secs] Total time for which application threads were stopped: 1.0671770 seconds2016-09-06T16:41:40.514+0800: 2901.185: [CMS-concurrent-mark-start]{Heap before GC invocations=297 (full 248): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:41:40.517+0800: 2901.188: [Full GC 2901.190: [CMS2016-09-06T16:41:42.322+0800: 2902.993: [CMS-concurrent-mark: 1.649/1.808 secs] [Times: user=6.69 sys=0.01, real=1.80 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 13.3793000 secs] 8039104K-&gt;8039081K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.3829360 secs] [Times: user=18.27 sys=0.01, real=13.38 secs] Heap after GC invocations=298 (full 249): par new generation total 1747648K, used 1747625K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aa490, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.3882570 seconds{Heap before GC invocations=298 (full 249): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:41:53.906+0800: 2914.577: [Full GC 2914.579: [CMS: 6291456K-&gt;6291456K(6291456K), 11.8083170 secs] 8039103K-&gt;8039089K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.8119210 secs] [Times: user=11.82 sys=0.01, real=11.82 secs] Heap after GC invocations=299 (full 250): par new generation total 1747648K, used 1747633K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fe98, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658ac898, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.8172410 seconds{Heap before GC invocations=299 (full 250): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:42:05.723+0800: 2926.395: [Full GC 2926.396: [CMS: 6291456K-&gt;6291456K(6291456K), 12.1906330 secs] 8039103K-&gt;8039092K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.1942520 secs] [Times: user=12.19 sys=0.01, real=12.19 secs] Heap after GC invocations=300 (full 251): par new generation total 1747648K, used 1747636K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fe50, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658ad530, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.1996210 seconds{Heap before GC invocations=300 (full 251): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff78, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:42:17.923+0800: 2938.594: [Full GC 2938.596: [CMS: 6291456K-&gt;6291456K(6291456K), 11.6361850 secs] 8039103K-&gt;8039099K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.6397700 secs] [Times: user=11.65 sys=0.00, real=11.64 secs] Heap after GC invocations=301 (full 252): par new generation total 1747648K, used 1747643K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fed0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aee40, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.6451370 seconds2016-09-06T16:42:29.568+0800: 2950.240: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039103K(8039104K), 1.0618570 secs] [Times: user=1.06 sys=0.00, real=1.07 secs] Total time for which application threads were stopped: 1.0668060 seconds2016-09-06T16:42:30.634+0800: 2951.305: [CMS-concurrent-mark-start]{Heap before GC invocations=301 (full 253): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:42:30.636+0800: 2951.307: [Full GC 2951.309: [CMS2016-09-06T16:42:32.413+0800: 2953.084: [CMS-concurrent-mark: 1.621/1.779 secs] [Times: user=6.64 sys=0.00, real=1.78 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 14.0102400 secs] 8039103K-&gt;8039103K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.0141280 secs] [Times: user=18.87 sys=0.00, real=14.01 secs] Heap after GC invocations=302 (full 254): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffa8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afd40, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.0197600 seconds{Heap before GC invocations=302 (full 254): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:42:44.656+0800: 2965.328: [Full GC 2965.330: [CMS: 6291456K-&gt;6291456K(6291456K), 12.3278040 secs] 8039104K-&gt;8039103K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.3318040 secs] [Times: user=12.33 sys=0.00, real=12.33 secs] Heap after GC invocations=303 (full 255): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff10, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.3377920 seconds{Heap before GC invocations=303 (full 255): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:42:56.995+0800: 2977.666: [Full GC 2977.668: [CMS: 6291456K-&gt;6291456K(6291456K), 12.2633450 secs] 8039103K-&gt;8039103K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.2673040 secs] [Times: user=12.27 sys=0.00, real=12.27 secs] Heap after GC invocations=304 (full 256): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff98, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.2733110 seconds{Heap before GC invocations=304 (full 256): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:43:09.268+0800: 2989.940: [Full GC 2989.941: [CMS: 6291456K-&gt;6291456K(6291456K), 12.2678670 secs] 8039103K-&gt;8039103K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.2718220 secs] [Times: user=12.27 sys=0.00, real=12.27 secs] Heap after GC invocations=305 (full 257): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affc8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}{Heap before GC invocations=305 (full 257): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affc8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:43:21.542+0800: 3002.213: [Full GC 3002.214: [CMS: 6291456K-&gt;6291456K(6291456K), 12.2658460 secs] 8039103K-&gt;8039103K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.2693110 secs] [Times: user=12.27 sys=0.00, real=12.27 secs] Heap after GC invocations=306 (full 258): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affc8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 24.5484820 seconds{Heap before GC invocations=306 (full 258): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:43:33.817+0800: 3014.488: [Full GC 3014.490: [CMS: 6291456K-&gt;6291455K(6291456K), 13.3157920 secs] 8039103K-&gt;8038680K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.3197720 secs] [Times: user=13.32 sys=0.00, real=13.32 secs] Heap after GC invocations=307 (full 259): par new generation total 1747648K, used 1747224K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff40, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665846198, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.3258180 seconds2016-09-06T16:43:47.143+0800: 3027.815: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8038681K(8039104K), 1.0949470 secs] [Times: user=1.09 sys=0.01, real=1.09 secs] Total time for which application threads were stopped: 1.1006390 seconds2016-09-06T16:43:48.242+0800: 3028.913: [CMS-concurrent-mark-start]{Heap before GC invocations=307 (full 260): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affd8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:43:48.248+0800: 3028.919: [Full GC 3028.921: [CMS2016-09-06T16:43:50.042+0800: 3030.712: [CMS-concurrent-mark: 1.634/1.799 secs] [Times: user=6.70 sys=0.00, real=1.80 secs] (concurrent mode failure): 6291455K-&gt;6291455K(6291456K), 15.7817910 secs] 8039103K-&gt;8038780K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 15.7858320 secs] [Times: user=20.68 sys=0.00, real=15.78 secs] Heap after GC invocations=308 (full 261): par new generation total 1747648K, used 1747324K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffb8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066585f118, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.7924320 seconds{Heap before GC invocations=308 (full 261): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:44:04.041+0800: 3044.713: [Full GC 3044.715: [CMS: 6291455K-&gt;6291455K(6291456K), 12.3870600 secs] 8039103K-&gt;8038812K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.3910820 secs] [Times: user=12.39 sys=0.01, real=12.39 secs] Heap after GC invocations=309 (full 262): par new generation total 1747648K, used 1747356K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665867118, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.3972220 seconds2016-09-06T16:44:16.439+0800: 3057.111: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8038968K(8039104K), 1.0950100 secs] [Times: user=1.09 sys=0.00, real=1.09 secs] Total time for which application threads were stopped: 1.1007490 seconds2016-09-06T16:44:17.538+0800: 3058.209: [CMS-concurrent-mark-start]{Heap before GC invocations=309 (full 263): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:44:17.542+0800: 3058.213: [Full GC 3058.215: [CMS2016-09-06T16:44:19.352+0800: 3060.023: [CMS-concurrent-mark: 1.647/1.814 secs] [Times: user=6.75 sys=0.00, real=1.81 secs] (concurrent mode failure): 6291455K-&gt;6291455K(6291456K), 14.5029700 secs] 8039103K-&gt;8038866K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.5070200 secs] [Times: user=19.45 sys=0.00, real=14.51 secs] Heap after GC invocations=310 (full 264): par new generation total 1747648K, used 1747410K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffa0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665874aa8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.5135090 seconds{Heap before GC invocations=310 (full 264): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff78, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:44:32.057+0800: 3072.728: [Full GC 3072.730: [CMS: 6291455K-&gt;6291455K(6291456K), 12.4422940 secs] 8039103K-&gt;8038952K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.4463240 secs] [Times: user=12.45 sys=0.00, real=12.45 secs] Heap after GC invocations=311 (full 265): par new generation total 1747648K, used 1747497K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff80, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066588a498, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.4525990 seconds{Heap before GC invocations=311 (full 265): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:44:44.511+0800: 3085.183: [Full GC 3085.184: [CMS: 6291456K-&gt;6291456K(6291456K), 12.5617910 secs] 8039104K-&gt;8038929K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.5656530 secs] [Times: user=12.57 sys=0.00, real=12.57 secs] Heap after GC invocations=312 (full 266): par new generation total 1747648K, used 1747473K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffc0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665884440, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.5722300 seconds2016-09-06T16:44:57.084+0800: 3097.755: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039066K(8039104K), 1.0998220 secs] [Times: user=1.10 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1057730 seconds2016-09-06T16:44:58.188+0800: 3098.859: [CMS-concurrent-mark-start]{Heap before GC invocations=312 (full 267): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:44:58.191+0800: 3098.862: [Full GC 3098.864: [CMS2016-09-06T16:45:00.009+0800: 3100.680: [CMS-concurrent-mark: 1.655/1.821 secs] [Times: user=6.75 sys=0.01, real=1.82 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 14.2213480 secs] 8039103K-&gt;8038951K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.2254030 secs] [Times: user=19.15 sys=0.01, real=14.23 secs] Heap after GC invocations=313 (full 268): par new generation total 1747648K, used 1747495K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665889e50, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.2318040 seconds{Heap before GC invocations=313 (full 268): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:45:12.424+0800: 3113.095: [Full GC 3113.097: [CMS: 6291456K-&gt;6291456K(6291456K), 12.5662640 secs] 8039103K-&gt;8038889K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.5703010 secs] [Times: user=12.58 sys=0.01, real=12.57 secs] Heap after GC invocations=314 (full 269): par new generation total 1747648K, used 1747433K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066587a450, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.5766030 seconds{Heap before GC invocations=314 (full 269): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:45:25.003+0800: 3125.674: [Full GC 3125.676: [CMS: 6291456K-&gt;6291456K(6291456K), 12.5132580 secs] 8039103K-&gt;8038924K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.5173870 secs] [Times: user=12.52 sys=0.00, real=12.52 secs] Heap after GC invocations=315 (full 270): par new generation total 1747648K, used 1747468K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665883350, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.5235750 seconds2016-09-06T16:45:37.528+0800: 3138.199: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039101K(8039104K), 1.0748940 secs] [Times: user=1.07 sys=0.00, real=1.08 secs] Total time for which application threads were stopped: 1.0806690 seconds2016-09-06T16:45:38.607+0800: 3139.277: [CMS-concurrent-mark-start]{Heap before GC invocations=315 (full 271): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:45:38.609+0800: 3139.280: [Full GC 3139.282: [CMS2016-09-06T16:45:40.438+0800: 3141.109: [CMS-concurrent-mark: 1.673/1.831 secs] [Times: user=6.73 sys=0.00, real=1.83 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 13.6468310 secs] 8039103K-&gt;8038987K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.6505480 secs] [Times: user=18.56 sys=0.01, real=13.65 secs] Heap after GC invocations=316 (full 272): par new generation total 1747648K, used 1747531K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665892de8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.6557990 seconds{Heap before GC invocations=316 (full 272): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff90, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:45:52.266+0800: 3152.937: [Full GC 3152.939: [CMS: 6291456K-&gt;6291456K(6291456K), 11.7713060 secs] 8039103K-&gt;8039022K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.7750290 secs] [Times: user=11.78 sys=0.00, real=11.77 secs] Heap after GC invocations=317 (full 273): par new generation total 1747648K, used 1747566K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fe68, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066589bd60, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.7804880 seconds{Heap before GC invocations=317 (full 273): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff8, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:46:04.048+0800: 3164.720: [Full GC 3164.721: [CMS: 6291456K-&gt;6291456K(6291456K), 11.8821860 secs] 8039103K-&gt;8039021K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 11.8859160 secs] [Times: user=11.89 sys=0.01, real=11.88 secs] Heap after GC invocations=318 (full 274): par new generation total 1747648K, used 1747565K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066589b6b8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 11.8915930 seconds2016-09-06T16:46:15.940+0800: 3176.612: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8039091K(8039104K), 1.0620410 secs] [Times: user=1.07 sys=0.00, real=1.06 secs] Total time for which application threads were stopped: 1.0670910 seconds2016-09-06T16:46:17.006+0800: 3177.677: [CMS-concurrent-mark-start]{Heap before GC invocations=318 (full 275): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:46:17.018+0800: 3177.689: [Full GC 3177.691: [CMS2016-09-06T16:46:18.815+0800: 3179.486: [CMS-concurrent-mark: 1.651/1.809 secs] [Times: user=6.74 sys=0.01, real=1.81 secs] (concurrent mode failure): 6291456K-&gt;6291455K(6291456K), 13.9914790 secs] 8039103K-&gt;8039044K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.9953070 secs] [Times: user=18.92 sys=0.01, real=13.99 secs] Heap after GC invocations=319 (full 276): par new generation total 1747648K, used 1747588K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658a13a0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.0011530 seconds{Heap before GC invocations=319 (full 276): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affe8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:46:31.019+0800: 3191.690: [Full GC 3191.692: [CMS: 6291455K-&gt;6291455K(6291456K), 12.3014850 secs] 8039103K-&gt;8038988K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.3052020 secs] [Times: user=12.31 sys=0.01, real=12.30 secs] Heap after GC invocations=320 (full 277): par new generation total 1747648K, used 1747532K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ff98, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665893150, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.3106660 seconds{Heap before GC invocations=320 (full 277): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affd0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:46:43.331+0800: 3204.002: [Full GC 3204.004: [CMS: 6291455K-&gt;6291455K(6291456K), 12.5191890 secs] 8039103K-&gt;8038925K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.5231670 secs] [Times: user=12.53 sys=0.01, real=12.52 secs] Heap after GC invocations=321 (full 278): par new generation total 1747648K, used 1747469K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665883530, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.5286820 seconds{Heap before GC invocations=321 (full 278): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658aff90, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:46:55.861+0800: 3216.532: [Full GC 3216.534: [CMS: 6291455K-&gt;6291456K(6291456K), 12.4076270 secs] 8039103K-&gt;8038926K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.4116700 secs] [Times: user=12.42 sys=0.00, real=12.41 secs] Heap after GC invocations=322 (full 279): par new generation total 1747648K, used 1747470K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffd0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665883ae0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.4176570 seconds{Heap before GC invocations=322 (full 279): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff8, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:47:08.280+0800: 3228.952: [Full GC 3228.953: [CMS: 6291456K-&gt;6291455K(6291456K), 13.5704180 secs] 8039103K-&gt;8038881K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.5744700 secs] [Times: user=13.57 sys=0.01, real=13.58 secs] Heap after GC invocations=323 (full 280): par new generation total 1747648K, used 1747425K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665878648, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.5812620 seconds{Heap before GC invocations=323 (full 280): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:47:21.862+0800: 3242.534: [Full GC 3242.536: [CMS: 6291455K-&gt;6291455K(6291456K), 13.0286270 secs] 8039103K-&gt;8038866K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.0327720 secs] [Times: user=13.03 sys=0.00, real=13.03 secs] Heap after GC invocations=324 (full 281): par new generation total 1747648K, used 1747410K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x0000000665874950, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.0390630 seconds2016-09-06T16:47:34.903+0800: 3255.574: [GC [1 CMS-initial-mark: 6291455K(6291456K)] 8039091K(8039104K), 1.0999700 secs] [Times: user=1.10 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1060980 seconds2016-09-06T16:47:36.007+0800: 3256.678: [CMS-concurrent-mark-start]{Heap before GC invocations=324 (full 282): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:47:36.010+0800: 3256.681: [Full GC 3256.683: [CMS2016-09-06T16:47:37.812+0800: 3258.483: [CMS-concurrent-mark: 1.640/1.805 secs] [Times: user=6.72 sys=0.00, real=1.81 secs] (concurrent mode failure): 6291455K-&gt;6291455K(6291456K), 15.8443020 secs] 8039103K-&gt;8038642K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 15.8483830 secs] [Times: user=20.77 sys=0.00, real=15.84 secs] Heap after GC invocations=325 (full 283): par new generation total 1747648K, used 1747186K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffe8, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066583ca08, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 15.8539550 seconds{Heap before GC invocations=325 (full 283): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affa0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:47:51.868+0800: 3272.539: [Full GC 3272.542: [CMS: 6291455K-&gt;6291455K(6291456K), 13.0328240 secs] 8039103K-&gt;8038719K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 13.0373460 secs] [Times: user=13.04 sys=0.00, real=13.04 secs] Heap after GC invocations=326 (full 284): par new generation total 1747648K, used 1747263K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffd0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066584ff00, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291455K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 13.0443610 seconds{Heap before GC invocations=326 (full 284): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:48:04.916+0800: 3285.588: [Full GC 3285.590: [CMS: 6291456K-&gt;6291456K(6291456K), 12.6184520 secs] 8039104K-&gt;8038697K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.6226070 secs] [Times: user=12.62 sys=0.01, real=12.62 secs] Heap after GC invocations=327 (full 285): par new generation total 1747648K, used 1747241K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035fff0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066584a700, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.6289590 seconds2016-09-06T16:48:17.545+0800: 3298.217: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8038712K(8039104K), 1.0986290 secs] [Times: user=1.10 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1045310 seconds2016-09-06T16:48:18.649+0800: 3299.319: [CMS-concurrent-mark-start]{Heap before GC invocations=327 (full 286): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658afff0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:48:18.661+0800: 3299.332: [Full GC 3299.334: [CMS2016-09-06T16:48:20.458+0800: 3301.128: [CMS-concurrent-mark: 1.643/1.809 secs] [Times: user=6.74 sys=0.01, real=1.81 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 14.2027280 secs] 8039103K-&gt;8038702K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.2069110 secs] [Times: user=19.11 sys=0.01, real=14.21 secs] Heap after GC invocations=328 (full 287): par new generation total 1747648K, used 1747246K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066584b988, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.2138430 seconds{Heap before GC invocations=328 (full 287): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:48:32.877+0800: 3313.549: [Full GC 3313.551: [CMS: 6291456K-&gt;6291456K(6291456K), 12.5341340 secs] 8039104K-&gt;8038726K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 12.5381510 secs] [Times: user=12.54 sys=0.01, real=12.53 secs] Heap after GC invocations=329 (full 288): par new generation total 1747648K, used 1747270K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 99% used [0x00000005fae00000, 0x000000065035ffd0, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658519f0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 12.5443560 seconds2016-09-06T16:48:45.422+0800: 3326.094: [GC [1 CMS-initial-mark: 6291456K(6291456K)] 8038793K(8039104K), 1.0983410 secs] [Times: user=1.10 sys=0.00, real=1.10 secs] Total time for which application threads were stopped: 1.1041650 seconds2016-09-06T16:48:46.525+0800: 3327.196: [CMS-concurrent-mark-start]{Heap before GC invocations=329 (full 289): par new generation total 1747648K, used 1747648K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 100% used [0x0000000650360000, 0x00000006658b0000, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:48:46.529+0800: 3327.201: [Full GC 3327.203: [CMS2016-09-06T16:48:48.333+0800: 3329.004: [CMS-concurrent-mark: 1.643/1.808 secs] [Times: user=6.74 sys=0.01, real=1.81 secs] (concurrent mode failure): 6291456K-&gt;6291456K(6291456K), 14.3327630 secs] 8039104K-&gt;8038772K(8039104K), [CMS Perm : 33755K-&gt;33755K(56304K)], 14.3368050 secs] [Times: user=19.26 sys=0.01, real=14.33 secs] Heap after GC invocations=330 (full 290): par new generation total 1747648K, used 1747316K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x000000066585d308, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)}Total time for which application threads were stopped: 14.3428950 seconds{Heap before GC invocations=330 (full 290): par new generation total 1747648K, used 1747647K [0x00000005fae00000, 0x000000067ae00000, 0x000000067ae00000) eden space 1398144K, 100% used [0x00000005fae00000, 0x0000000650360000, 0x0000000650360000) from space 349504K, 99% used [0x0000000650360000, 0x00000006658affd0, 0x00000006658b0000) to space 349504K, 0% used [0x00000006658b0000, 0x00000006658b0000, 0x000000067ae00000) concurrent mark-sweep generation total 6291456K, used 6291456K [0x000000067ae00000, 0x00000007fae00000, 0x00000007fae00000) concurrent-mark-sweep perm gen total 56304K, used 33755K [0x00000007fae00000, 0x00000007fe4fc000, 0x0000000800000000)2016-09-06T16:49:00.874+0800: 3341.546: [Full GC 3341.548: [CMS" }, { "title": "go语言学习笔记", "url": "/posts/golang/", "categories": "go", "tags": "go, golang", "date": "2015-06-12 00:00:00 +0000", "snippet": "环境配置,这里把$GOPATH/bin也加入cd /data/devwget http://www.golangtc.com/static/go/1.7/go1.7.linux-amd64.tar.gztar -zxvf go1.7.linux-amd64.tar.gzexport GOROOT=/data/dev/goexport GOPATH=/data/dev/GoProjexport PATH=$PATH:$GOROOT/binexport PATH=$PATH:$GOPATH/bin" }, { "title": "go相关疑难杂症", "url": "/posts/go/", "categories": "go", "tags": "go, golang", "date": "2015-06-12 00:00:00 +0000", "snippet": "解决 unrecognized import path “http://golang.org/x/tools/types(unrecognized import path “http://golang.org/x/tools/xxxx)mkdir -p $GOPATH/src/golang.org/x/cd $GOPATH/src/golang.org/xgit clone https://github.com/golang/tools.git" }, { "title": "添加Latex支持数学公式", "url": "/posts/Latex/", "categories": "Latex", "tags": "Latex", "date": "2015-06-11 00:00:00 +0000", "snippet": "数学公式目前想到的要么直接截图，可惜图片已经不能直接上传了。不然还是老老实实用Latex可以参考怎样在 Markdown 中使用数学公式–图灵社区有很多Latex公开的接口可以用。这里多谢STbioinf提供的对数学公式的支持方法, 其实MathJax的js 只需要引入如下代码&lt;script type=\"text/x-mathjax-config\"&gt; MathJax.Hub.Config({ tex2jax: {inlineMath: [['$','$'], ['\\\\(','\\\\)']]} });&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\"&gt;&lt;/script&gt;然后通过$$包围Latex表达式就可以完成手写数学公式了。eg:$$\\rho_i=\\sum_j\\chi(d_{ij}-d_c)$$现实的结果是：\\(\\rho_i=\\sum_j\\chi(d_{ij}-d_c)\\)MSE\\(S = sum_{samples put to the left}^{(label - muLeft)^2} + sum_{samples put to the right}^{(label - muRight)^2}\\)具体文章见STbioinf博客博客大改版：添加评论，二维码生成，数学公式的显示，添加分析代码等" }, { "title": "分词算法", "url": "/posts/fenci/", "categories": "Lucene", "tags": "Lucene, Search", "date": "2015-06-11 00:00:00 +0000", "snippet": "基于字符匹配基于统计中文分词算法" }, { "title": "爬虫相关", "url": "/posts/Python-Spider/", "categories": "spider", "tags": "spider, 爬虫, python", "date": "2015-06-10 00:00:00 +0000", "snippet": "python 爬虫相关pyspider 分布式架构 WebUIpyspider架构设计pyspider’docspyspider githubcola 分布式 weibo wikicola githubscrapy （support python2.7）scrapy docscrapy githubother link如何入门 Python 爬虫 —谢科，用python分布式地爬过豆瓣/Twitter Searchscrapy-redisdistribute_crawler-使用scrapy,redis, mongodb,graphite实现的一个分布式网络爬虫,底层存储mongodb集群,分布式使用redis实现,爬虫状态显示使用graphite实现Python爬虫学习系列教程Python爬虫实战四之抓取淘宝MM照片Scrapy爬虫抓取动态网站如何让你的scrapy爬虫不再被ban之二（利用第三方平台crawlera做scrapy爬虫防屏蔽）pip安装 镜像： 如： https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/pip install scrapy -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/" }, { "title": "Lucene评分机制(Score)", "url": "/posts/Lucene-Score/", "categories": "Lucene", "tags": "Lucene, Search", "date": "2015-06-10 00:00:00 +0000", "snippet": "Lucene Score 评分机制先来看几个数学公式，参考官方文档对TFIDFSimilarity的说明分值算法公式：\\[score(q,d)=coord(q,d)*queryNorm(q)\\sum_{t\\ in\\ d }(tf( t\\ in\\ d )*idf(t)^2*t.getBoost()*norm(t,d)\\]其中 tf(t in d) 表示词频，Term在当前文档中出现的次数 idf(t) 词的逆词频 coord(q,d) 评分因子。越多的查询项(Term)在一个文档中，说明这些文档的匹配程序越高 queryNorm(q) 标准化因子，用于查询时比较 t.getBoost() 权重，这个可以在查询的时候给定（如:lucene^2），也可以在索引的时候由setBoost()给定 norm(t,d) 字段加权(Field boost ), 文档加权(Document boost)和长度因子由字段内的 Token 的个数来计算此值，字段越短，评分越高，在做索引的时候由 Similarity.lengthNorm 计算,norm这个值在索引的时候会encode 成一个byte 保存在索引中，搜索的时候，再把索引中 norm 值decode成一个float值，在这个过程中会有精度丢失，不保证可逆，如decode(encode(0.89)) = 0.75。词频tf(t in d) 计算公式(默认DefaultSimilarity )\\[tf(t\\ in\\ d )=sqrt{frequency}\\]逆词频idf(t)计算公式(默认DefaultSimilarity )\\[idf=1+\\log\\frac{numDocs}{docFreq+1}\\]coord(q,d) 计算公式(DefaultSimilarity)\\[coord(q,d)=\\frac{overlap}{maxOverlap}\\]queryNorm(q)计算公式 (DefaultSimilarity)\\[queryNorm(q)=queryNorm(sumOfSquaredWeights)=\\frac{1}{\\sqrt{sumOfSquaredWeights}}\\]这里sumOfSquaredWeights的计算公式为:\\[sumOfSquaredWeights= q.getBoost() ^2*\\sum_{t\\ in\\ q}{(idf(t)* t.getBoost())^2}\\]norm(t,d)的计算公式为:\\[norm(t,d)= lengthNorm*\\prod_{field\\ f\\ in\\ d\\ named\\ as\\ t}f.boost()\\]" }, { "title": "Java并发编程的艺术-方腾飞笔记", "url": "/posts/the-Art-of-Java-Concurrency-Programming/", "categories": "Java", "tags": "Java, JUC", "date": "2015-06-06 00:00:00 +0000", "snippet": "The Art of Java Concurrency Programming第一章 并发编程的挑战1.11.1.11.1.2vmstat 命令显示CS(Content Switch),表示上下文切换次数第二章 Java并发机制的底层实现原理volatile应用2.1 volatile的两条实现原则 Lock前缀指令会引起处理器缓存回写到内存 一个处理器的缓存回写到内存会导致其他处理器的缓存实效，MESI(修改，独占，共享，无效) 2.2 synchronized实现原理与应用2.3 原子操作的实现原理2.3.3 Java如何实现原子操作 使用CAS实现愿次操作，基本思路：循环到进行CAS操作成功为止 CAS操作三大问题 ABA–&gt;1A-2B-3A,循环时间长开销大，只能保证一个共享变量的原子操作 第三章 Java内存模型3.1 Java内存模型的基础3.1.13.1.5 happens-before3.2 重排序3.2.1 数据依赖性3.2.2 as-if-serial语义不管怎么重排序，（单线程）程序的执行结果不能被改变；编译器和处理器不会对存在数据以来关系的操作做重排序，因为这种重排序会改变执行结果3.2.3 程序顺序规则 注意happens-before传递性3.2.4 重排序对多线程的影响，对存在控制以来的操作重排序，可能会该此案程序的执行结果3.3 顺序一致性3.4 volatile的内存语义3.4.1 volatile的特性 可见性； 原子性： 对任意单个valatile变量的读/写具有原子性，比如valatile++ 这种符合操作不具有原子性 3.4.2 volatile 写－读建立的happens-before关系3.4.3 volatile 写－读的内存语义3.4.3 volatile 写－读的内存语义的实现3.5 锁的内存语义3.5.1 锁的释放－获取建立的happens－before关系3.5.2 锁的释放－获取的内存语义3.5.2 锁的内存语义实现3.6 Final域的内存语义3.7 happens－before3.8 双重检查锁定与延迟初始化3.9 Java 内存模型综述（JSR-133）第四章 Java并发编程基础第五章 Java中的锁5.1 Lock 接口5.2 队列同步器5.3 重入锁ReentrantLock5.4 读写锁5.5 LockSupport5.6 Condition接口第六章 Java并发容器和框架第七章 Java中13个原子操作类第八章 Java并发工具类第九章 Java中的线程池9.19.29.2.19.2.1.19.2.1.2 任务队列 ArrayBlockingQueue 一个基于数组结构的有界阻塞对列（FIFO） LinkedBlockingQueue 一个基于链表结构的阻塞队列，吞吐量通常高于ArrayBlockingQueue SynchronousQueue 一个不存储元素的阻塞队列，吞吐量通常高于LinkedBlockingQueue 9.2.1.3 9.2.1.4 9.2.1.5 饱和策略（RejectedExecutionHandler） AbortPolicy 直接抛出异常 CallerRunsPolicy 只用调用者所在线程来运行任务 DiscardOldestPolicy 丢弃队列里最近的一个任务，并执行当前任务 DiscardPolicy 不处理，丢弃掉 自定义 第十章 Executor框架第十一章 Java并发编程实战" }, { "title": "Javacc", "url": "/posts/Javacc/", "categories": "", "tags": "", "date": "2015-06-06 00:00:00 +0000", "snippet": "官网Java Compiler Compiler tm (JavaCC tm) - The Java Parser Generator下载地址6.1.0unzip javacc-6.1.0.zip " } ]
